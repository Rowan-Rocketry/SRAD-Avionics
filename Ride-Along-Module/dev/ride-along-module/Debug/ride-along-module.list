
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ac  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000173  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08008668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000575  20000070  080086d8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  200005e5  080086d8  000205e5  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c64b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f6b  00000000  00000000  0003c6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001508  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013e0  00000000  00000000  00040b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030f20  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001add4  00000000  00000000  00072e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135873  00000000  00000000  0008dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c34af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e1c  00000000  00000000  001c3500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	080084cc 	.word	0x080084cc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	080084cc 	.word	0x080084cc

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <LSM6DSL_config>:

static int16_t accel[3];
static int16_t gyro[3];

void LSM6DSL_config(LSM6DSL_HandleTypeDef* LSM6DSL_initStruct)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	config = LSM6DSL_initStruct;
 80005a0:	4a3b      	ldr	r2, [pc, #236]	; (8000690 <LSM6DSL_config+0xf8>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]

	switch (config->accelFullScale)
 80005a6:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <LSM6DSL_config+0xf8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	7adb      	ldrb	r3, [r3, #11]
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	d82c      	bhi.n	800060a <LSM6DSL_config+0x72>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <LSM6DSL_config+0x20>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	080005e5 	.word	0x080005e5
 80005bc:	0800060b 	.word	0x0800060b
 80005c0:	0800060b 	.word	0x0800060b
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000603 	.word	0x08000603
 80005cc:	0800060b 	.word	0x0800060b
 80005d0:	0800060b 	.word	0x0800060b
 80005d4:	0800060b 	.word	0x0800060b
 80005d8:	080005ef 	.word	0x080005ef
 80005dc:	0800060b 	.word	0x0800060b
 80005e0:	080005f9 	.word	0x080005f9
	{
		case LSM6DSL_ACCEL_FS_PM_2:
			config->accelSensitivity = 0.061f;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <LSM6DSL_config+0xf8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <LSM6DSL_config+0xfc>)
 80005ea:	611a      	str	r2, [r3, #16]
			break;
 80005ec:	e00d      	b.n	800060a <LSM6DSL_config+0x72>
		case LSM6DSL_ACCEL_FS_PM_4:
			config->accelSensitivity = 0.122f;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <LSM6DSL_config+0xf8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a29      	ldr	r2, [pc, #164]	; (8000698 <LSM6DSL_config+0x100>)
 80005f4:	611a      	str	r2, [r3, #16]
			break;
 80005f6:	e008      	b.n	800060a <LSM6DSL_config+0x72>
		case LSM6DSL_ACCEL_FS_PM_8:
			config->accelSensitivity = 0.244f;
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <LSM6DSL_config+0xf8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <LSM6DSL_config+0x104>)
 80005fe:	611a      	str	r2, [r3, #16]
			break;
 8000600:	e003      	b.n	800060a <LSM6DSL_config+0x72>
		case LSM6DSL_ACCEL_FS_PM_16:
			config->accelSensitivity = 0.488f;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <LSM6DSL_config+0xf8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <LSM6DSL_config+0x108>)
 8000608:	611a      	str	r2, [r3, #16]
	}

	switch (config->gyroFullScale)
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <LSM6DSL_config+0xf8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	7b1b      	ldrb	r3, [r3, #12]
 8000610:	2b0c      	cmp	r3, #12
 8000612:	d836      	bhi.n	8000682 <LSM6DSL_config+0xea>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <LSM6DSL_config+0x84>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800065b 	.word	0x0800065b
 8000620:	08000683 	.word	0x08000683
 8000624:	08000651 	.word	0x08000651
 8000628:	08000683 	.word	0x08000683
 800062c:	08000665 	.word	0x08000665
 8000630:	08000683 	.word	0x08000683
 8000634:	08000683 	.word	0x08000683
 8000638:	08000683 	.word	0x08000683
 800063c:	0800066f 	.word	0x0800066f
 8000640:	08000683 	.word	0x08000683
 8000644:	08000683 	.word	0x08000683
 8000648:	08000683 	.word	0x08000683
 800064c:	08000679 	.word	0x08000679
	{
		case LSM6DSL_GYRO_FS_PM_125:
			config->gyroSensitivity = 4.375f;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <LSM6DSL_config+0xf8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <LSM6DSL_config+0x10c>)
 8000656:	615a      	str	r2, [r3, #20]
			break;
 8000658:	e013      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_250:	
			config->gyroSensitivity = 8.75f;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <LSM6DSL_config+0xf8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <LSM6DSL_config+0x110>)
 8000660:	615a      	str	r2, [r3, #20]
			break;
 8000662:	e00e      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_500:	
			config->gyroSensitivity = 17.50f;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <LSM6DSL_config+0xf8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <LSM6DSL_config+0x114>)
 800066a:	615a      	str	r2, [r3, #20]
			break;
 800066c:	e009      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_1000:	
			config->gyroSensitivity = 35.0f;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <LSM6DSL_config+0xf8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <LSM6DSL_config+0x118>)
 8000674:	615a      	str	r2, [r3, #20]
			break;
 8000676:	e004      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_2000:	
			config->gyroSensitivity = 70.0f;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <LSM6DSL_config+0xf8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LSM6DSL_config+0x11c>)
 800067e:	615a      	str	r2, [r3, #20]
	}
}
 8000680:	e7ff      	b.n	8000682 <LSM6DSL_config+0xea>
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c
 8000694:	3d79db23 	.word	0x3d79db23
 8000698:	3df9db23 	.word	0x3df9db23
 800069c:	3e79db23 	.word	0x3e79db23
 80006a0:	3ef9db23 	.word	0x3ef9db23
 80006a4:	408c0000 	.word	0x408c0000
 80006a8:	410c0000 	.word	0x410c0000
 80006ac:	418c0000 	.word	0x418c0000
 80006b0:	420c0000 	.word	0x420c0000
 80006b4:	428c0000 	.word	0x428c0000

080006b8 <LSM6DSL_init>:

void LSM6DSL_init()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	LSM6DSL_disable();
 80006bc:	f000 f896 	bl	80007ec <LSM6DSL_disable>

	// Send software reset
	LSM6DSL_writeRegister(LSM6DSL_CTRL3_C, LSM6DSL_SW_RESET);
 80006c0:	2101      	movs	r1, #1
 80006c2:	2012      	movs	r0, #18
 80006c4:	f000 f824 	bl	8000710 <LSM6DSL_writeRegister>

	// Configure interrupts when data is ready
	LSM6DSL_writeRegister(LSM6DSL_INT1_CTRL, LSM6DSL_ACCEL_READY);
 80006c8:	2101      	movs	r1, #1
 80006ca:	200d      	movs	r0, #13
 80006cc:	f000 f820 	bl	8000710 <LSM6DSL_writeRegister>
	LSM6DSL_writeRegister(LSM6DSL_INT2_CTRL, LSM6DSL_GYRO_READY);
 80006d0:	2102      	movs	r1, #2
 80006d2:	200e      	movs	r0, #14
 80006d4:	f000 f81c 	bl	8000710 <LSM6DSL_writeRegister>

	// Configure data rate and measurement scale
	LSM6DSL_writeRegister(LSM6DSL_CTRL1_XL, config->outputDataRate | config->accelFullScale);
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <LSM6DSL_init+0x54>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	7a9a      	ldrb	r2, [r3, #10]
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <LSM6DSL_init+0x54>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7adb      	ldrb	r3, [r3, #11]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	2010      	movs	r0, #16
 80006ec:	f000 f810 	bl	8000710 <LSM6DSL_writeRegister>
	LSM6DSL_writeRegister(LSM6DSL_CTRL2_G, config->outputDataRate | config->gyroFullScale);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LSM6DSL_init+0x54>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	7a9a      	ldrb	r2, [r3, #10]
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <LSM6DSL_init+0x54>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	7b1b      	ldrb	r3, [r3, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	2011      	movs	r0, #17
 8000704:	f000 f804 	bl	8000710 <LSM6DSL_writeRegister>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000008c 	.word	0x2000008c

08000710 <LSM6DSL_writeRegister>:
	gyro[1] = (int16_t)(gyRaw * config->gyroSensitivity);
	gyro[2] = (int16_t)(gzRaw * config->gyroSensitivity);
}

void LSM6DSL_writeRegister(uint8_t reg, uint8_t val)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[] = {
		reg & LSM6DSL_WRITE,
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000726:	b2db      	uxtb	r3, r3
	uint8_t buffer[] = {
 8000728:	733b      	strb	r3, [r7, #12]
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	737b      	strb	r3, [r7, #13]
		val
	};

	LSM6DSL_enable();
 800072e:	f000 f84d 	bl	80007cc <LSM6DSL_enable>
	HAL_SPI_Transmit(config->spi, &buffer, 2, 100);
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <LSM6DSL_writeRegister+0x40>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	f107 010c 	add.w	r1, r7, #12
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2202      	movs	r2, #2
 8000740:	f005 fea6 	bl	8006490 <HAL_SPI_Transmit>
	LSM6DSL_disable();
 8000744:	f000 f852 	bl	80007ec <LSM6DSL_disable>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000008c 	.word	0x2000008c

08000754 <LSM6DSL_getAccel>:

	return buffer.result;
}

void LSM6DSL_getAccel(int16_t* dest)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	dest[0] = accel[0];
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <LSM6DSL_getAccel+0x38>)
 800075e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	801a      	strh	r2, [r3, #0]
	dest[1] = accel[1];
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3302      	adds	r3, #2
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <LSM6DSL_getAccel+0x38>)
 800076c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000770:	801a      	strh	r2, [r3, #0]
	dest[2] = accel[2];
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3304      	adds	r3, #4
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <LSM6DSL_getAccel+0x38>)
 8000778:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800077c:	801a      	strh	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000090 	.word	0x20000090

08000790 <LSM6DSL_getGyro>:

void LSM6DSL_getGyro(int16_t* dest)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	dest[0] = gyro[0];
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LSM6DSL_getGyro+0x38>)
 800079a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	801a      	strh	r2, [r3, #0]
	dest[1] = gyro[1];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3302      	adds	r3, #2
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <LSM6DSL_getGyro+0x38>)
 80007a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80007ac:	801a      	strh	r2, [r3, #0]
	dest[2] = gyro[2];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3304      	adds	r3, #4
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <LSM6DSL_getGyro+0x38>)
 80007b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80007b8:	801a      	strh	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000098 	.word	0x20000098

080007cc <LSM6DSL_enable>:

void LSM6DSL_enable()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	// Set cs low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LSM6DSL_enable+0x1c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6858      	ldr	r0, [r3, #4]
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <LSM6DSL_enable+0x1c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	891b      	ldrh	r3, [r3, #8]
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f001 fcc4 	bl	800216c <HAL_GPIO_WritePin>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c

080007ec <LSM6DSL_disable>:

void LSM6DSL_disable()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	// Set cs high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <LSM6DSL_disable+0x1c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6858      	ldr	r0, [r3, #4]
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LSM6DSL_disable+0x1c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	891b      	ldrh	r3, [r3, #8]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f001 fcb4 	bl	800216c <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000008c 	.word	0x2000008c

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0a2      	sub	sp, #136	; 0x88
 8000810:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f001 f96b 	bl	8001aec <HAL_Init>

  /* USER CODE BEGIN Init */

  // Configure MS5607
	MS5607_HandleTypeDef ms5607Config = {0};
 8000816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  	ms5607Config.spi = &hspi1;
 8000824:	4b59      	ldr	r3, [pc, #356]	; (800098c <main+0x180>)
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  	ms5607Config.timer = &htim16;
 8000828:	4b59      	ldr	r3, [pc, #356]	; (8000990 <main+0x184>)
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  	ms5607Config.csPort = GPIOA;
 800082c:	4b59      	ldr	r3, [pc, #356]	; (8000994 <main+0x188>)
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  	ms5607Config.csPin = GPIO_PIN_3;
 8000830:	2308      	movs	r3, #8
 8000832:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  	ms5607Config.osr = MS5607_OSR_1024;
 8000836:	2304      	movs	r3, #4
 8000838:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	MS5607_config(&ms5607Config);
 800083c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fb23 	bl	8000e8c <MS5607_config>

	LSM6DSL_HandleTypeDef lsm6dslConfig = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]
	lsm6dslConfig.spi = &hspi2;
 8000858:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <main+0x18c>)
 800085a:	623b      	str	r3, [r7, #32]
	lsm6dslConfig.csPort = GPIOH;
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <main+0x190>)
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
	lsm6dslConfig.csPin = GPIO_PIN_1;
 8000860:	2302      	movs	r3, #2
 8000862:	853b      	strh	r3, [r7, #40]	; 0x28
	lsm6dslConfig.outputDataRate = LSM6DSL_ODR_104_HZ;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	lsm6dslConfig.accelFullScale = LSM6DSL_ACCEL_FS_PM_16;
 800086a:	2304      	movs	r3, #4
 800086c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	lsm6dslConfig.gyroFullScale = LSM6DSL_GYRO_FS_PM_500;
 8000870:	2304      	movs	r3, #4
 8000872:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	LSM6DSL_config(&lsm6dslConfig);
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe8c 	bl	8000598 <LSM6DSL_config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f89a 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 fa66 	bl	8000d54 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000888:	f000 f9c0 	bl	8000c0c <MX_TIM16_Init>
  MX_SPI1_Init();
 800088c:	f000 f8e2 	bl	8000a54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000890:	f000 f94e 	bl	8000b30 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000894:	f000 f9e6 	bl	8000c64 <MX_USART1_UART_Init>
  //MX_SDMMC1_SD_Init();
  MX_USB_PCD_Init();
 8000898:	f000 fa30 	bl	8000cfc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  	MS5607_init();
 800089c:	f000 fb4c 	bl	8000f38 <MS5607_init>
	LSM6DSL_init();
 80008a0:	f7ff ff0a 	bl	80006b8 <LSM6DSL_init>

	MS5607_readUncompPres();
 80008a4:	f000 fde0 	bl	8001468 <MS5607_readUncompPres>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	//writePressure();
	if (MS5607_getState() == MS5607_IDLE)
 80008a8:	f000 fe3c 	bl	8001524 <MS5607_getState>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d1fa      	bne.n	80008a8 <main+0x9c>
	{
		// Get result of digital read
		MS5607_RawVal rawVals = MS5607_getRawValues();
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fe16 	bl	80014e8 <MS5607_getRawValues>

		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues(&rawVals);
 80008bc:	463b      	mov	r3, r7
 80008be:	f107 0208 	add.w	r2, r7, #8
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fb53 	bl	8000f70 <MS5607_getCompValues>

		LSM6DSL_getAccel(&accel);
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff40 	bl	8000754 <LSM6DSL_getAccel>
		LSM6DSL_getGyro(&gyro);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff59 	bl	8000790 <LSM6DSL_getGyro>

		uartBufferLen = sprintf(uartBuffer, "Time: %d\n", HAL_GetTick());
 80008de:	f001 f97d 	bl	8001bdc <HAL_GetTick>
 80008e2:	4602      	mov	r2, r0
 80008e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e8:	492d      	ldr	r1, [pc, #180]	; (80009a0 <main+0x194>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f007 f970 	bl	8007bd0 <siprintf>
 80008f0:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80008f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	4829      	ldr	r0, [pc, #164]	; (80009a4 <main+0x198>)
 80008fe:	f006 fb51 	bl	8006fa4 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Pres: %d\n", pressure);
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <main+0x19c>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800090a:	4928      	ldr	r1, [pc, #160]	; (80009ac <main+0x1a0>)
 800090c:	4618      	mov	r0, r3
 800090e:	f007 f95f 	bl	8007bd0 <siprintf>
 8000912:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800091c:	2364      	movs	r3, #100	; 0x64
 800091e:	4821      	ldr	r0, [pc, #132]	; (80009a4 <main+0x198>)
 8000920:	f006 fb40 	bl	8006fa4 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Accel: %d %d %d\n", accel[0], accel[1], accel[2]);
 8000924:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000928:	461a      	mov	r2, r3
 800092a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800092e:	4619      	mov	r1, r3
 8000930:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000934:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	460b      	mov	r3, r1
 800093c:	491c      	ldr	r1, [pc, #112]	; (80009b0 <main+0x1a4>)
 800093e:	f007 f947 	bl	8007bd0 <siprintf>
 8000942:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000946:	b29a      	uxth	r2, r3
 8000948:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <main+0x198>)
 8000950:	f006 fb28 	bl	8006fa4 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Gyro: %d %d %d\n", accel[0], accel[1], accel[2]);
 8000954:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000958:	461a      	mov	r2, r3
 800095a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800095e:	4619      	mov	r1, r3
 8000960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000964:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	460b      	mov	r3, r1
 800096c:	4911      	ldr	r1, [pc, #68]	; (80009b4 <main+0x1a8>)
 800096e:	f007 f92f 	bl	8007bd0 <siprintf>
 8000972:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000976:	b29a      	uxth	r2, r3
 8000978:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <main+0x198>)
 8000980:	f006 fb10 	bl	8006fa4 <HAL_UART_Transmit>

		// Measure again
		MS5607_readUncompPres();
 8000984:	f000 fd70 	bl	8001468 <MS5607_readUncompPres>
	if (MS5607_getState() == MS5607_IDLE)
 8000988:	e78e      	b.n	80008a8 <main+0x9c>
 800098a:	bf00      	nop
 800098c:	200000a0 	.word	0x200000a0
 8000990:	200001c0 	.word	0x200001c0
 8000994:	42020000 	.word	0x42020000
 8000998:	20000130 	.word	0x20000130
 800099c:	42021c00 	.word	0x42021c00
 80009a0:	080084e4 	.word	0x080084e4
 80009a4:	2000020c 	.word	0x2000020c
 80009a8:	200005ac 	.word	0x200005ac
 80009ac:	080084f0 	.word	0x080084f0
 80009b0:	080084fc 	.word	0x080084fc
 80009b4:	08008510 	.word	0x08008510

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09e      	sub	sp, #120	; 0x78
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	2260      	movs	r2, #96	; 0x60
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 f8fa 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
 80009da:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80009dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80009e0:	f001 fd0a 	bl	80023f8 <HAL_PWREx_ControlVoltageScaling>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x36>
  {
    Error_Handler();
 80009ea:	f000 fa49 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80009ee:	2330      	movs	r3, #48	; 0x30
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f8:	2301      	movs	r3, #1
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009fc:	2310      	movs	r3, #16
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fd8e 	bl	8002530 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a1a:	f000 fa31 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	231f      	movs	r3, #31
 8000a20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fc54 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a46:	f000 fa1b 	bl	8000e80 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3778      	adds	r7, #120	; 0x78
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a66:	4a31      	ldr	r2, [pc, #196]	; (8000b2c <MX_SPI1_Init+0xd8>)
 8000a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a78:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aec:	480e      	ldr	r0, [pc, #56]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000aee:	f005 fbb9 	bl	8006264 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 8000af8:	f000 f9c2 	bl	8000e80 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_SPI1_Init+0xd4>)
 8000b10:	f005 ffc5 	bl	8006a9e <HAL_SPIEx_SetConfigAutonomousMode>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 8000b1a:	f000 f9b1 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000a0 	.word	0x200000a0
 8000b2c:	40013000 	.word	0x40013000

08000b30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b40:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b42:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <MX_SPI2_Init+0xd8>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b56:	2203      	movs	r2, #3
 8000b58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bcc:	f005 fb4a 	bl	8006264 <HAL_SPI_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000bd6:	f000 f953 	bl	8000e80 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000bde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000be2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_SPI2_Init+0xd4>)
 8000bee:	f005 ff56 	bl	8006a9e <HAL_SPIEx_SetConfigAutonomousMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000bf8:	f000 f942 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000130 	.word	0x20000130
 8000c08:	40003800 	.word	0x40003800

08000c0c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 8000c12:	f000 fc7b 	bl	800150c <MS5607_getMeasurementDelay>
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c1c:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <MX_TIM16_Init+0x54>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40-1;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c22:	2227      	movs	r2, #39	; 0x27
 8000c24:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c30:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_TIM16_Init+0x50>)
 8000c46:	f005 ff6b 	bl	8006b20 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 8000c50:	f000 f916 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001c0 	.word	0x200001c0
 8000c60:	40014400 	.word	0x40014400

08000c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cac:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000cae:	f006 f929 	bl	8006f04 <HAL_UART_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cb8:	f000 f8e2 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000cc0:	f006 fde8 	bl	8007894 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f000 f8d9 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000cd2:	f006 fe1d 	bl	8007910 <HAL_UARTEx_SetRxFifoThreshold>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cdc:	f000 f8d0 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_USART1_UART_Init+0x90>)
 8000ce2:	f006 fd9e 	bl	8007822 <HAL_UARTEx_DisableFifoMode>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f8c8 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000020c 	.word	0x2000020c
 8000cf8:	40013800 	.word	0x40013800

08000cfc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_USB_PCD_Init+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d08:	2208      	movs	r2, #8
 8000d0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USB_PCD_Init+0x50>)
 8000d38:	f001 fa30 	bl	800219c <HAL_PCD_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USB_PCD_Init+0x4a>
  {
    Error_Handler();
 8000d42:	f000 f89d 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002a0 	.word	0x200002a0
 8000d50:	40016000 	.word	0x40016000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d70:	4a3e      	ldr	r2, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dac:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dca:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2102      	movs	r1, #2
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_GPIO_Init+0x11c>)
 8000e06:	f001 f9b1 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4819      	ldr	r0, [pc, #100]	; (8000e74 <MX_GPIO_Init+0x120>)
 8000e10:	f001 f9ac 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e14:	2302      	movs	r3, #2
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4811      	ldr	r0, [pc, #68]	; (8000e70 <MX_GPIO_Init+0x11c>)
 8000e2c:	f000 ffc6 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8000e30:	2309      	movs	r3, #9
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_GPIO_Init+0x124>)
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_GPIO_Init+0x128>)
 8000e44:	f000 ffba 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_GPIO_Init+0x120>)
 8000e60:	f000 ffac 	bl	8001dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	46020c00 	.word	0x46020c00
 8000e70:	42021c00 	.word	0x42021c00
 8000e74:	42020000 	.word	0x42020000
 8000e78:	10110000 	.word	0x10110000
 8000e7c:	42020800 	.word	0x42020800

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <MS5607_config>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_config(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	config = MS5607_initStruct;
 8000e94:	4a24      	ldr	r2, [pc, #144]	; (8000f28 <MS5607_config+0x9c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MS5607_config+0x9c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MS5607_config+0xa0>)
 8000ea8:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MS5607_config+0x9c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	7b9b      	ldrb	r3, [r3, #14]
 8000eb0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MS5607_config+0xa4>)
 8000eb8:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MS5607_config+0x9c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	7b9b      	ldrb	r3, [r3, #14]
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d82b      	bhi.n	8000f1c <MS5607_config+0x90>
 8000ec4:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <MS5607_config+0x40>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000ef1 	.word	0x08000ef1
 8000ed0:	08000f1d 	.word	0x08000f1d
 8000ed4:	08000ef9 	.word	0x08000ef9
 8000ed8:	08000f1d 	.word	0x08000f1d
 8000edc:	08000f01 	.word	0x08000f01
 8000ee0:	08000f1d 	.word	0x08000f1d
 8000ee4:	08000f09 	.word	0x08000f09
 8000ee8:	08000f1d 	.word	0x08000f1d
 8000eec:	08000f13 	.word	0x08000f13
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MS5607_config+0xa8>)
 8000ef2:	2232      	movs	r2, #50	; 0x32
 8000ef4:	801a      	strh	r2, [r3, #0]
			break;
 8000ef6:	e011      	b.n	8000f1c <MS5607_config+0x90>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MS5607_config+0xa8>)
 8000efa:	226e      	movs	r2, #110	; 0x6e
 8000efc:	801a      	strh	r2, [r3, #0]
			break;
 8000efe:	e00d      	b.n	8000f1c <MS5607_config+0x90>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MS5607_config+0xa8>)
 8000f02:	22d2      	movs	r2, #210	; 0xd2
 8000f04:	801a      	strh	r2, [r3, #0]
			break;
 8000f06:	e009      	b.n	8000f1c <MS5607_config+0x90>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MS5607_config+0xa8>)
 8000f0a:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8000f0e:	801a      	strh	r2, [r3, #0]
			break;
 8000f10:	e004      	b.n	8000f1c <MS5607_config+0x90>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MS5607_config+0xa8>)
 8000f14:	f240 3236 	movw	r2, #822	; 0x336
 8000f18:	801a      	strh	r2, [r3, #0]
	}

}
 8000f1a:	e7ff      	b.n	8000f1c <MS5607_config+0x90>
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	200005b0 	.word	0x200005b0
 8000f2c:	200005cc 	.word	0x200005cc
 8000f30:	200005cd 	.word	0x200005cd
 8000f34:	200005ca 	.word	0x200005ca

08000f38 <MS5607_init>:

void MS5607_init()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	MS5607_disable();
 8000f3c:	f000 fac4 	bl	80014c8 <MS5607_disable>

	MS5607_enable();
 8000f40:	f000 fab2 	bl	80014a8 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MS5607_init+0x2c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	2364      	movs	r3, #100	; 0x64
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4906      	ldr	r1, [pc, #24]	; (8000f68 <MS5607_init+0x30>)
 8000f50:	f005 fa9e 	bl	8006490 <HAL_SPI_Transmit>
	MS5607_disable();
 8000f54:	f000 fab8 	bl	80014c8 <MS5607_disable>

	state = MS5607_STARTUP;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <MS5607_init+0x34>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200005b0 	.word	0x200005b0
 8000f68:	08008520 	.word	0x08008520
 8000f6c:	200005c8 	.word	0x200005c8

08000f70 <MS5607_getCompValues>:
		promDataPtr[promAddr-1] = ((uint8_t)responseBuffer[0]<<8) | (uint8_t)responseBuffer[1];
	}
}

MS5607_CompVal MS5607_getCompValues(MS5607_RawVal* rawVals)
{
 8000f70:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f74:	b0d5      	sub	sp, #340	; 0x154
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000f7c:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
	MS5607_CompVal compVals;

	uint32_t digTemp = rawVals->temp;
 8000f80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint32_t digPres = rawVals->pres;
 8000f8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 8000f94:	4baf      	ldr	r3, [pc, #700]	; (8001254 <MS5607_getCompValues+0x2e4>)
 8000f96:	891b      	ldrh	r3, [r3, #8]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 8000fa6:	4bab      	ldr	r3, [pc, #684]	; (8001254 <MS5607_getCompValues+0x2e4>)
 8000fa8:	895b      	ldrh	r3, [r3, #10]
 8000faa:	05da      	lsls	r2, r3, #23
 8000fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8000fbc:	4ba5      	ldr	r3, [pc, #660]	; (8001254 <MS5607_getCompValues+0x2e4>)
 8000fbe:	885b      	ldrh	r3, [r3, #2]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000fcc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	0bdb      	lsrs	r3, r3, #15
 8000fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fd8:	460b      	mov	r3, r1
 8000fda:	045b      	lsls	r3, r3, #17
 8000fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 8000fe0:	4b9c      	ldr	r3, [pc, #624]	; (8001254 <MS5607_getCompValues+0x2e4>)
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000fec:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ff4:	17da      	asrs	r2, r3, #31
 8000ff6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000ffa:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000ffe:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001002:	460b      	mov	r3, r1
 8001004:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001008:	fb02 f203 	mul.w	r2, r2, r3
 800100c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001010:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
 8001014:	4601      	mov	r1, r0
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001020:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001024:	fba2 4501 	umull	r4, r5, r2, r1
 8001028:	442b      	add	r3, r5
 800102a:	461d      	mov	r5, r3
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	09a2      	lsrs	r2, r4, #6
 8001036:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800103a:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 800103c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001040:	4621      	mov	r1, r4
 8001042:	1889      	adds	r1, r1, r2
 8001044:	6339      	str	r1, [r7, #48]	; 0x30
 8001046:	4629      	mov	r1, r5
 8001048:	eb43 0101 	adc.w	r1, r3, r1
 800104c:	6379      	str	r1, [r7, #52]	; 0x34
 800104e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001052:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8001056:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <MS5607_getCompValues+0x2e4>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	2200      	movs	r2, #0
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001062:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001066:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800106a:	460b      	mov	r3, r1
 800106c:	0c1b      	lsrs	r3, r3, #16
 800106e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001072:	460b      	mov	r3, r1
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 800107a:	4b76      	ldr	r3, [pc, #472]	; (8001254 <MS5607_getCompValues+0x2e4>)
 800107c:	889b      	ldrh	r3, [r3, #4]
 800107e:	b29b      	uxth	r3, r3
 8001080:	2200      	movs	r2, #0
 8001082:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001086:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800108a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800108e:	17da      	asrs	r2, r3, #31
 8001090:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001094:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800109c:	460b      	mov	r3, r1
 800109e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80010a2:	4622      	mov	r2, r4
 80010a4:	fb02 f203 	mul.w	r2, r2, r3
 80010a8:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
 80010ac:	462b      	mov	r3, r5
 80010ae:	4604      	mov	r4, r0
 80010b0:	460d      	mov	r5, r1
 80010b2:	4621      	mov	r1, r4
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	4622      	mov	r2, r4
 80010bc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80010c0:	fba2 ab01 	umull	sl, fp, r2, r1
 80010c4:	445b      	add	r3, fp
 80010c6:	469b      	mov	fp, r3
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	ea4f 12da 	mov.w	r2, sl, lsr #7
 80010d4:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 80010d8:	ea4f 13eb 	mov.w	r3, fp, asr #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 80010dc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80010e0:	4621      	mov	r1, r4
 80010e2:	1889      	adds	r1, r1, r2
 80010e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80010e6:	4629      	mov	r1, r5
 80010e8:	eb43 0101 	adc.w	r1, r3, r1
 80010ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80010ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80010f2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	// Second order compensation
	if (temp1 < 2000)
 80010f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010fe:	f280 8159 	bge.w	80013b4 <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 8001102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001106:	fb03 f303 	mul.w	r3, r3, r3
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		int32_t temp2000 = temp1 - 2000;
 8001110:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001114:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001118:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 800111c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001120:	17da      	asrs	r2, r3, #31
 8001122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800112a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800112e:	17da      	asrs	r2, r3, #31
 8001130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001138:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800113c:	462b      	mov	r3, r5
 800113e:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 8001142:	4652      	mov	r2, sl
 8001144:	fb02 f203 	mul.w	r2, r2, r3
 8001148:	465b      	mov	r3, fp
 800114a:	4621      	mov	r1, r4
 800114c:	fb01 f303 	mul.w	r3, r1, r3
 8001150:	4413      	add	r3, r2
 8001152:	4622      	mov	r2, r4
 8001154:	4651      	mov	r1, sl
 8001156:	fba2 1201 	umull	r1, r2, r2, r1
 800115a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800115e:	460a      	mov	r2, r1
 8001160:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001164:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001168:	4413      	add	r3, r2
 800116a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800116e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001172:	4622      	mov	r2, r4
 8001174:	462b      	mov	r3, r5
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	f04f 0100 	mov.w	r1, #0
 800117e:	0119      	lsls	r1, r3, #4
 8001180:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001184:	0110      	lsls	r0, r2, #4
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4621      	mov	r1, r4
 800118c:	ebb2 0801 	subs.w	r8, r2, r1
 8001190:	4629      	mov	r1, r5
 8001192:	eb63 0901 	sbc.w	r9, r3, r1
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80011a2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80011a6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80011aa:	4690      	mov	r8, r2
 80011ac:	4699      	mov	r9, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	eb18 0303 	adds.w	r3, r8, r3
 80011b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011b8:	462b      	mov	r3, r5
 80011ba:	eb49 0303 	adc.w	r3, r9, r3
 80011be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80011ce:	4621      	mov	r1, r4
 80011d0:	090a      	lsrs	r2, r1, #4
 80011d2:	4629      	mov	r1, r5
 80011d4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80011d8:	4629      	mov	r1, r5
 80011da:	110b      	asrs	r3, r1, #4
 80011dc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 80011e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011e4:	17da      	asrs	r2, r3, #31
 80011e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80011e8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80011ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ee:	17da      	asrs	r2, r3, #31
 80011f0:	673b      	str	r3, [r7, #112]	; 0x70
 80011f2:	677a      	str	r2, [r7, #116]	; 0x74
 80011f4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80011f8:	462b      	mov	r3, r5
 80011fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80011fe:	4642      	mov	r2, r8
 8001200:	fb02 f203 	mul.w	r2, r2, r3
 8001204:	464b      	mov	r3, r9
 8001206:	4621      	mov	r1, r4
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	4622      	mov	r2, r4
 8001210:	4641      	mov	r1, r8
 8001212:	fba2 1201 	umull	r1, r2, r2, r1
 8001216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800121a:	460a      	mov	r2, r1
 800121c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001220:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001224:	4413      	add	r3, r2
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800122a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800122e:	460b      	mov	r3, r1
 8001230:	18db      	adds	r3, r3, r3
 8001232:	623b      	str	r3, [r7, #32]
 8001234:	4613      	mov	r3, r2
 8001236:	eb42 0303 	adc.w	r3, r2, r3
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
 800123c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001240:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		if (temp1 < -1500)
 8001244:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <MS5607_getCompValues+0x2e8>)
 800124a:	429a      	cmp	r2, r3
 800124c:	f280 8091 	bge.w	8001372 <MS5607_getCompValues+0x402>
 8001250:	e004      	b.n	800125c <MS5607_getCompValues+0x2ec>
 8001252:	bf00      	nop
 8001254:	200005b4 	.word	0x200005b4
 8001258:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 800125c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001260:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001264:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 8001268:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800126c:	17da      	asrs	r2, r3, #31
 800126e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001270:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001272:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001276:	17da      	asrs	r2, r3, #31
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
 800127a:	667a      	str	r2, [r7, #100]	; 0x64
 800127c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001280:	462b      	mov	r3, r5
 8001282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001286:	4642      	mov	r2, r8
 8001288:	fb02 f203 	mul.w	r2, r2, r3
 800128c:	464b      	mov	r3, r9
 800128e:	4621      	mov	r1, r4
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	4413      	add	r3, r2
 8001296:	4622      	mov	r2, r4
 8001298:	4641      	mov	r1, r8
 800129a:	fba2 1201 	umull	r1, r2, r2, r1
 800129e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80012a2:	460a      	mov	r2, r1
 80012a4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80012a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80012ac:	4413      	add	r3, r2
 80012ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80012b2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80012b6:	4622      	mov	r2, r4
 80012b8:	462b      	mov	r3, r5
 80012ba:	f04f 0000 	mov.w	r0, #0
 80012be:	f04f 0100 	mov.w	r1, #0
 80012c2:	0119      	lsls	r1, r3, #4
 80012c4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80012c8:	0110      	lsls	r0, r2, #4
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4621      	mov	r1, r4
 80012d0:	1a51      	subs	r1, r2, r1
 80012d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80012d4:	4629      	mov	r1, r5
 80012d6:	eb63 0301 	sbc.w	r3, r3, r1
 80012da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012dc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80012e0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80012e4:	4621      	mov	r1, r4
 80012e6:	1851      	adds	r1, r2, r1
 80012e8:	61b9      	str	r1, [r7, #24]
 80012ea:	4629      	mov	r1, r5
 80012ec:	eb43 0101 	adc.w	r1, r3, r1
 80012f0:	61f9      	str	r1, [r7, #28]
 80012f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012f6:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 80012fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012fe:	17da      	asrs	r2, r3, #31
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
 8001302:	657a      	str	r2, [r7, #84]	; 0x54
 8001304:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001308:	17da      	asrs	r2, r3, #31
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
 800130c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800130e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001312:	462b      	mov	r3, r5
 8001314:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001318:	4642      	mov	r2, r8
 800131a:	fb02 f203 	mul.w	r2, r2, r3
 800131e:	464b      	mov	r3, r9
 8001320:	4621      	mov	r1, r4
 8001322:	fb01 f303 	mul.w	r3, r1, r3
 8001326:	4413      	add	r3, r2
 8001328:	4622      	mov	r2, r4
 800132a:	4641      	mov	r1, r8
 800132c:	fba2 1201 	umull	r1, r2, r2, r1
 8001330:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001334:	460a      	mov	r2, r1
 8001336:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800133a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800133e:	4413      	add	r3, r2
 8001340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001350:	462b      	mov	r3, r5
 8001352:	00d9      	lsls	r1, r3, #3
 8001354:	4623      	mov	r3, r4
 8001356:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800135a:	4623      	mov	r3, r4
 800135c:	00d8      	lsls	r0, r3, #3
 800135e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001362:	1814      	adds	r4, r2, r0
 8001364:	613c      	str	r4, [r7, #16]
 8001366:	414b      	adcs	r3, r1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800136e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
		}

		temp1 -= temp2;
 8001372:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001376:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset -= offset2;
 8001380:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001384:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001388:	1a84      	subs	r4, r0, r2
 800138a:	60bc      	str	r4, [r7, #8]
 800138c:	eb61 0303 	sbc.w	r3, r1, r3
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001396:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		sensitivity -= sense2;
 800139a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800139e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80013a2:	1a84      	subs	r4, r0, r2
 80013a4:	603c      	str	r4, [r7, #0]
 80013a6:	eb61 0303 	sbc.w	r3, r1, r3
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 80013b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013b8:	2200      	movs	r2, #0
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
 80013bc:	647a      	str	r2, [r7, #68]	; 0x44
 80013be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013c2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80013c6:	462a      	mov	r2, r5
 80013c8:	fb02 f203 	mul.w	r2, r2, r3
 80013cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013d0:	4621      	mov	r1, r4
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80013dc:	4621      	mov	r1, r4
 80013de:	fba2 1201 	umull	r1, r2, r2, r1
 80013e2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013e6:	460a      	mov	r2, r1
 80013e8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80013ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013f0:	4413      	add	r3, r2
 80013f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001402:	4621      	mov	r1, r4
 8001404:	0d4a      	lsrs	r2, r1, #21
 8001406:	4629      	mov	r1, r5
 8001408:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800140c:	4629      	mov	r1, r5
 800140e:	154b      	asrs	r3, r1, #21
 8001410:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001414:	1a14      	subs	r4, r2, r0
 8001416:	63bc      	str	r4, [r7, #56]	; 0x38
 8001418:	eb63 0301 	sbc.w	r3, r3, r1
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800142a:	4621      	mov	r1, r4
 800142c:	0bca      	lsrs	r2, r1, #15
 800142e:	4629      	mov	r1, r5
 8001430:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001434:	4629      	mov	r1, r5
 8001436:	13cb      	asrs	r3, r1, #15
 8001438:	4613      	mov	r3, r2
 800143a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	compVals.temp = temp1;
 800143e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001442:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	return compVals;
 8001446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800144a:	461a      	mov	r2, r3
 800144c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001450:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001454:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001458:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800145c:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8001460:	46bd      	mov	sp, r7
 8001462:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001466:	4770      	bx	lr

08001468 <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MS5607_readUncompPres+0x34>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 8001472:	f000 f819 	bl	80014a8 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MS5607_readUncompPres+0x38>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2201      	movs	r2, #1
 8001480:	4908      	ldr	r1, [pc, #32]	; (80014a4 <MS5607_readUncompPres+0x3c>)
 8001482:	f005 f805 	bl	8006490 <HAL_SPI_Transmit>
	MS5607_disable();
 8001486:	f000 f81f 	bl	80014c8 <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <MS5607_readUncompPres+0x38>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fb9d 	bl	8006bd0 <HAL_TIM_Base_Start_IT>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200005c8 	.word	0x200005c8
 80014a0:	200005b0 	.word	0x200005b0
 80014a4:	200005cc 	.word	0x200005cc

080014a8 <MS5607_enable>:
	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
}

void MS5607_enable()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <MS5607_enable+0x1c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6898      	ldr	r0, [r3, #8]
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <MS5607_enable+0x1c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	899b      	ldrh	r3, [r3, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f000 fe56 	bl	800216c <HAL_GPIO_WritePin>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200005b0 	.word	0x200005b0

080014c8 <MS5607_disable>:

void MS5607_disable()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <MS5607_disable+0x1c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6898      	ldr	r0, [r3, #8]
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <MS5607_disable+0x1c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	899b      	ldrh	r3, [r3, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f000 fe46 	bl	800216c <HAL_GPIO_WritePin>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200005b0 	.word	0x200005b0

080014e8 <MS5607_getRawValues>:
		state = MS5607_IDLE;
	}
}

MS5607_RawVal MS5607_getRawValues()
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	return rawValues;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <MS5607_getRawValues+0x20>)
 80014f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	200005c0 	.word	0x200005c0

0800150c <MS5607_getMeasurementDelay>:

uint16_t MS5607_getMeasurementDelay()
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return measurementDelay;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <MS5607_getMeasurementDelay+0x14>)
 8001512:	881b      	ldrh	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	200005ca 	.word	0x200005ca

08001524 <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return state;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <MS5607_getState+0x14>)
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200005c8 	.word	0x200005c8

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0be      	sub	sp, #248	; 0xf8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	22c0      	movs	r2, #192	; 0xc0
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fb27 	bl	8007bc0 <memset>
  if(hspi->Instance==SPI1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6b      	ldr	r2, [pc, #428]	; (8001724 <HAL_SPI_MspInit+0x1d8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d147      	bne.n	800160c <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800157c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001588:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800158c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fa7d 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80015a0:	f7ff fc6e 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a4:	4b60      	ldr	r3, [pc, #384]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 80015a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015aa:	4a5f      	ldr	r2, [pc, #380]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 80015ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80015b4:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 80015b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 80015c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c8:	4a57      	ldr	r2, [pc, #348]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015d2:	4b55      	ldr	r3, [pc, #340]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 80015d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80015e0:	23c2      	movs	r3, #194	; 0xc2
 80015e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f8:	2305      	movs	r3, #5
 80015fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001602:	4619      	mov	r1, r3
 8001604:	4849      	ldr	r0, [pc, #292]	; (800172c <HAL_SPI_MspInit+0x1e0>)
 8001606:	f000 fbd9 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800160a:	e086      	b.n	800171a <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a47      	ldr	r2, [pc, #284]	; (8001730 <HAL_SPI_MspInit+0x1e4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 8081 	bne.w	800171a <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fa2f 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 800163c:	f7ff fc20 	bl	8000e80 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001646:	4a38      	ldr	r2, [pc, #224]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001664:	4a30      	ldr	r2, [pc, #192]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 800167e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_SPI_MspInit+0x1dc>)
 800168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016bc:	4619      	mov	r1, r3
 80016be:	481d      	ldr	r0, [pc, #116]	; (8001734 <HAL_SPI_MspInit+0x1e8>)
 80016c0:	f000 fb7c 	bl	8001dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016dc:	2305      	movs	r3, #5
 80016de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <HAL_SPI_MspInit+0x1e8>)
 80016ea:	f000 fb67 	bl	8001dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001708:	2305      	movs	r3, #5
 800170a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001712:	4619      	mov	r1, r3
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <HAL_SPI_MspInit+0x1ec>)
 8001716:	f000 fb51 	bl	8001dbc <HAL_GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	37f8      	adds	r7, #248	; 0xf8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40013000 	.word	0x40013000
 8001728:	46020c00 	.word	0x46020c00
 800172c:	42020000 	.word	0x42020000
 8001730:	40003800 	.word	0x40003800
 8001734:	42020800 	.word	0x42020800
 8001738:	42020400 	.word	0x42020400

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_TIM_Base_MspInit+0x3c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10e      	bne.n	800176c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_TIM_Base_MspInit+0x40>)
 8001750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001754:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_TIM_Base_MspInit+0x40>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_TIM_Base_MspInit+0x40>)
 8001760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40014400 	.word	0x40014400
 800177c:	46020c00 	.word	0x46020c00

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ba      	sub	sp, #232	; 0xe8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	22c0      	movs	r2, #192	; 0xc0
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 fa0d 	bl	8007bc0 <memset>
  if(huart->Instance==USART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d145      	bne.n	800183c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017b0:	f04f 0201 	mov.w	r2, #1
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017bc:	2300      	movs	r3, #0
 80017be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 f965 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80017d0:	f7ff fb56 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_UART_MspInit+0xc8>)
 80017d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017da:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_UART_MspInit+0xc8>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_UART_MspInit+0xc8>)
 80017e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_UART_MspInit+0xc8>)
 80017f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_UART_MspInit+0xc8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_UART_MspInit+0xc8>)
 8001804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001810:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182a:	2307      	movs	r3, #7
 800182c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001834:	4619      	mov	r1, r3
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_MspInit+0xcc>)
 8001838:	f000 fac0 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	37e8      	adds	r7, #232	; 0xe8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40013800 	.word	0x40013800
 8001848:	46020c00 	.word	0x46020c00
 800184c:	42020000 	.word	0x42020000

08001850 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0bc      	sub	sp, #240	; 0xf0
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	22c0      	movs	r2, #192	; 0xc0
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f006 f9a5 	bl	8007bc0 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_PCD_MspInit+0x10c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d169      	bne.n	8001954 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	4618      	mov	r0, r3
 8001898:	f002 f8fc 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80018a2:	f7ff faed 	bl	8000e80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_PCD_MspInit+0x110>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ac:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <HAL_PCD_MspInit+0x110>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_PCD_MspInit+0x110>)
 80018b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80018de:	230a      	movs	r3, #10
 80018e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018e8:	4619      	mov	r1, r3
 80018ea:	481e      	ldr	r0, [pc, #120]	; (8001964 <HAL_PCD_MspInit+0x114>)
 80018ec:	f000 fa66 	bl	8001dbc <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_PCD_MspInit+0x110>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d119      	bne.n	8001932 <HAL_PCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 800191c:	f000 fdf8 	bl	8002510 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001930:	e001      	b.n	8001936 <HAL_PCD_MspInit+0xe6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001932:	f000 fded 	bl	8002510 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_PCD_MspInit+0x110>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_PCD_MspInit+0x110>)
 8001948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800194c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	37f0      	adds	r7, #240	; 0xf0
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40016000 	.word	0x40016000
 8001960:	46020c00 	.word	0x46020c00
 8001964:	42020000 	.word	0x42020000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f8fe 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f006 f8be 	bl	8007b6c <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20040000 	.word	0x20040000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	200005d0 	.word	0x200005d0
 8001a24:	200005e8 	.word	0x200005e8

08001a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <SystemInit+0x68>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <SystemInit+0x68>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <SystemInit+0x6c>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <SystemInit+0x6c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <SystemInit+0x6c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <SystemInit+0x6c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <SystemInit+0x6c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <SystemInit+0x6c>)
 8001a5a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a5e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a62:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <SystemInit+0x6c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <SystemInit+0x6c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <SystemInit+0x6c>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <SystemInit+0x6c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SystemInit+0x68>)
 8001a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a82:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	46020c00 	.word	0x46020c00

08001a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a9c:	f7ff ffc4 	bl	8001a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa2:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	; (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ac6:	f006 f857 	bl	8007b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7fe fe9f 	bl	800080c <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   r0, =_estack
 8001ad0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001adc:	08008668 	.word	0x08008668
  ldr r2, =_sbss
 8001ae0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ae4:	200005e5 	.word	0x200005e5

08001ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_IRQHandler>
	...

08001aec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_Init+0x4c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_Init+0x4c>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f92b 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b02:	f001 fde3 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_Init+0x50>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	490b      	ldr	r1, [pc, #44]	; (8001b40 <HAL_Init+0x54>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_Init+0x58>)
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1c:	200f      	movs	r0, #15
 8001b1e:	f000 f813 	bl	8001b48 <HAL_InitTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e002      	b.n	8001b32 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fd06 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	46020c00 	.word	0x46020c00
 8001b40:	08008524 	.word	0x08008524
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_InitTick+0x60>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e021      	b.n	8001ba0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_InitTick+0x64>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f915 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b90:	f000 f8ed 	bl	8001d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x68>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	200005d4 	.word	0x200005d4

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200005d4 	.word	0x200005d4

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d38:	f7ff ff8e 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff47 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff5e 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffb2 	bl	8001d14 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dce:	e1ba      	b.n	8002146 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 81aa 	beq.w	8002140 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_GPIO_Init+0x188>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d15d      	bne.n	8001eb0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001e24:	4a48      	ldr	r2, [pc, #288]	; (8001f48 <HAL_GPIO_Init+0x18c>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e2c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001e2e:	4a46      	ldr	r2, [pc, #280]	; (8001f48 <HAL_GPIO_Init+0x18c>)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	3208      	adds	r2, #8
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220b      	movs	r2, #11
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69f9      	ldr	r1, [r7, #28]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e067      	b.n	8001f80 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x104>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d145      	bne.n	8001f4c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69f9      	ldr	r1, [r7, #28]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e01e      	b.n	8001f80 <HAL_GPIO_Init+0x1c4>
 8001f42:	bf00      	nop
 8001f44:	46020000 	.word	0x46020000
 8001f48:	0800857c 	.word	0x0800857c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d00b      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f94:	2b11      	cmp	r3, #17
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d130      	bne.n	8002002 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f003 0201 	and.w	r2, r3, #1
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d017      	beq.n	800203a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	4013      	ands	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	4313      	orrs	r3, r2
 8002032:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d07c      	beq.n	8002140 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002046:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3318      	adds	r3, #24
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	4013      	ands	r3, r2
 8002068:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0a9a      	lsrs	r2, r3, #10
 800206e:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_GPIO_Init+0x3ac>)
 8002070:	4013      	ands	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	00d2      	lsls	r2, r2, #3
 800207a:	4093      	lsls	r3, r2
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	4313      	orrs	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002082:	4938      	ldr	r1, [pc, #224]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3318      	adds	r3, #24
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	4013      	ands	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80020de:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 80020e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 8002114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002118:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	4013      	ands	r3, r2
 8002122:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_GPIO_Init+0x3a8>)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae3d 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	; 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	46022000 	.word	0x46022000
 8002168:	002f7f7f 	.word	0x002f7f7f

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002188:	e002      	b.n	8002190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	b08f      	sub	sp, #60	; 0x3c
 80021a0:	af0a      	add	r7, sp, #40	; 0x28
 80021a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0fe      	b.n	80023ac <HAL_PCD_Init+0x210>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fb44 	bl	8001850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2203      	movs	r2, #3
 80021cc:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 fc5c 	bl	8007a92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	687e      	ldr	r6, [r7, #4]
 80021e2:	466d      	mov	r5, sp
 80021e4:	f106 0410 	add.w	r4, r6, #16
 80021e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f8:	1d33      	adds	r3, r6, #4
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f005 fc2a 	bl	8007a56 <USB_CoreInit>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0cb      	b.n	80023ac <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f005 fc4e 	bl	8007abc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e03e      	b.n	80022a4 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	333d      	adds	r3, #61	; 0x3d
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	333c      	adds	r3, #60	; 0x3c
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	334c      	adds	r3, #76	; 0x4c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	3350      	adds	r3, #80	; 0x50
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3354      	adds	r3, #84	; 0x54
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	3301      	adds	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d3bb      	bcc.n	8002226 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e044      	b.n	800233e <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	f203 137f 	addw	r3, r3, #383	; 0x17f
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	3301      	adds	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d3b5      	bcc.n	80022b4 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	687e      	ldr	r6, [r7, #4]
 8002350:	466d      	mov	r5, sp
 8002352:	f106 0410 	add.w	r4, r6, #16
 8002356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002362:	e885 0003 	stmia.w	r5, {r0, r1}
 8002366:	1d33      	adds	r3, r6, #4
 8002368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f005 fbc9 	bl	8007b02 <USB_DevInit>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_PCD_Init+0x1e6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e014      	b.n	80023ac <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f80a 	bl	80023b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f005 fbcf 	bl	8007b48 <USB_DevDisconnect>

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  hpcd->LPM_State = LPM_L0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 0202 	orr.w	r2, r3, #2
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002408:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10b      	bne.n	800242a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d905      	bls.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e057      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d90a      	bls.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	60d3      	str	r3, [r2, #12]
 8002446:	e007      	b.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002450:	4925      	ldr	r1, [pc, #148]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2232      	movs	r2, #50	; 0x32
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	3301      	adds	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002476:	e002      	b.n	800247e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x98>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f3      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01b      	beq.n	80024ce <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	2232      	movs	r2, #50	; 0x32
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	3301      	adds	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80024b4:	e002      	b.n	80024bc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_PWREx_ControlVoltageScaling+0xd6>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f3      	bne.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e000      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	46020800 	.word	0x46020800
 80024ec:	20000000 	.word	0x20000000
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_PWREx_GetVoltageRange+0x18>)
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	46020800 	.word	0x46020800

08002510 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_PWREx_EnableVddUSB+0x1c>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6113      	str	r3, [r2, #16]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	46020800 	.word	0x46020800

08002530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f000 bec8 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002554:	4b96      	ldr	r3, [pc, #600]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 816c 	beq.w	8002844 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_RCC_OscConfig+0x52>
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	2b0c      	cmp	r3, #12
 8002576:	f040 80de 	bne.w	8002736 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 80da 	bne.w	8002736 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f000 bea5 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002594:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_RCC_OscConfig+0x7a>
 80025a0:	4b83      	ldr	r3, [pc, #524]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025a8:	e005      	b.n	80025b6 <HAL_RCC_OscConfig+0x86>
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d255      	bcs.n	8002666 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 f9df 	bl	8003988 <RCC_SetFlashLatencyFromMSIRange>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f000 be82 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025e0:	6093      	str	r3, [r2, #8]
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	4970      	ldr	r1, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025fc:	d309      	bcc.n	8002612 <HAL_RCC_OscConfig+0xe2>
 80025fe:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f023 021f 	bic.w	r2, r3, #31
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4969      	ldr	r1, [pc, #420]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
 8002610:	e07e      	b.n	8002710 <HAL_RCC_OscConfig+0x1e0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	da0a      	bge.n	8002630 <HAL_RCC_OscConfig+0x100>
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	4961      	ldr	r1, [pc, #388]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
 800262e:	e06f      	b.n	8002710 <HAL_RCC_OscConfig+0x1e0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002638:	d30a      	bcc.n	8002650 <HAL_RCC_OscConfig+0x120>
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4959      	ldr	r1, [pc, #356]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
 800264e:	e05f      	b.n	8002710 <HAL_RCC_OscConfig+0x1e0>
 8002650:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	03db      	lsls	r3, r3, #15
 800265e:	4954      	ldr	r1, [pc, #336]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002660:	4313      	orrs	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
 8002664:	e054      	b.n	8002710 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002666:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4a51      	ldr	r2, [pc, #324]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800266c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002670:	6093      	str	r3, [r2, #8]
 8002672:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	494c      	ldr	r1, [pc, #304]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800268c:	d309      	bcc.n	80026a2 <HAL_RCC_OscConfig+0x172>
 800268e:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 021f 	bic.w	r2, r3, #31
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4945      	ldr	r1, [pc, #276]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800269c:	4313      	orrs	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
 80026a0:	e028      	b.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da0a      	bge.n	80026c0 <HAL_RCC_OscConfig+0x190>
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	015b      	lsls	r3, r3, #5
 80026b8:	493d      	ldr	r1, [pc, #244]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60cb      	str	r3, [r1, #12]
 80026be:	e019      	b.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d30a      	bcc.n	80026e0 <HAL_RCC_OscConfig+0x1b0>
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
 80026de:	e009      	b.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
 80026e0:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	03db      	lsls	r3, r3, #15
 80026ee:	4930      	ldr	r1, [pc, #192]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 f942 	bl	8003988 <RCC_SetFlashLatencyFromMSIRange>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f000 bde5 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002710:	f001 f8e4 	bl	80038dc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCC_OscConfig+0x284>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fa15 	bl	8001b48 <HAL_InitTick>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 808a 	beq.w	8002842 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800272e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002732:	f000 bdd2 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d066      	beq.n	800280c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800274a:	f7ff fa47 	bl	8001bdc <HAL_GetTick>
 800274e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002750:	e009      	b.n	8002766 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002752:	f7ff fa43 	bl	8001bdc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	f000 bdba 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800277c:	6093      	str	r3, [r2, #8]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	4909      	ldr	r1, [pc, #36]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002798:	d30e      	bcc.n	80027b8 <HAL_RCC_OscConfig+0x288>
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 021f 	bic.w	r2, r3, #31
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4902      	ldr	r1, [pc, #8]	; (80027b0 <HAL_RCC_OscConfig+0x280>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
 80027ac:	e04a      	b.n	8002844 <HAL_RCC_OscConfig+0x314>
 80027ae:	bf00      	nop
 80027b0:	46020c00 	.word	0x46020c00
 80027b4:	20000004 	.word	0x20000004
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da0a      	bge.n	80027d6 <HAL_RCC_OscConfig+0x2a6>
 80027c0:	4b98      	ldr	r3, [pc, #608]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	4995      	ldr	r1, [pc, #596]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
 80027d4:	e036      	b.n	8002844 <HAL_RCC_OscConfig+0x314>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d30a      	bcc.n	80027f6 <HAL_RCC_OscConfig+0x2c6>
 80027e0:	4b90      	ldr	r3, [pc, #576]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	498d      	ldr	r1, [pc, #564]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
 80027f4:	e026      	b.n	8002844 <HAL_RCC_OscConfig+0x314>
 80027f6:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	03db      	lsls	r3, r3, #15
 8002804:	4987      	ldr	r1, [pc, #540]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
 800280a:	e01b      	b.n	8002844 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800280c:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a84      	ldr	r2, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002818:	f7ff f9e0 	bl	8001bdc <HAL_GetTick>
 800281c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800281e:	e009      	b.n	8002834 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002820:	f7ff f9dc 	bl	8001bdc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	f000 bd53 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002834:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ef      	bne.n	8002820 <HAL_RCC_OscConfig+0x2f0>
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 808b 	beq.w	8002968 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	2b08      	cmp	r3, #8
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x334>
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	2b03      	cmp	r3, #3
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d17d      	bne.n	8002968 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	f000 bd34 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x35a>
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a68      	ldr	r2, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e041      	b.n	800290e <HAL_RCC_OscConfig+0x3de>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002892:	d112      	bne.n	80028ba <HAL_RCC_OscConfig+0x38a>
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a62      	ldr	r2, [pc, #392]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a5f      	ldr	r2, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e029      	b.n	800290e <HAL_RCC_OscConfig+0x3de>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80028c2:	d112      	bne.n	80028ea <HAL_RCC_OscConfig+0x3ba>
 80028c4:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a56      	ldr	r2, [pc, #344]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a53      	ldr	r2, [pc, #332]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e011      	b.n	800290e <HAL_RCC_OscConfig+0x3de>
 80028ea:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a4a      	ldr	r2, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800290c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d014      	beq.n	8002940 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002916:	f7ff f961 	bl	8001bdc <HAL_GetTick>
 800291a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291c:	e009      	b.n	8002932 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291e:	f7ff f95d 	bl	8001bdc <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b64      	cmp	r3, #100	; 0x64
 800292a:	d902      	bls.n	8002932 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	f000 bcd4 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ef      	beq.n	800291e <HAL_RCC_OscConfig+0x3ee>
 800293e:	e013      	b.n	8002968 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002940:	f7ff f94c 	bl	8001bdc <HAL_GetTick>
 8002944:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002946:	e009      	b.n	800295c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff f948 	bl	8001bdc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d902      	bls.n	800295c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	f000 bcbf 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ef      	bne.n	8002948 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05f      	beq.n	8002a34 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	2b04      	cmp	r3, #4
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x456>
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d114      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b02      	cmp	r3, #2
 8002984:	d111      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f000 bca3 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	4920      	ldr	r1, [pc, #128]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029a8:	e044      	b.n	8002a34 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d024      	beq.n	80029fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80029be:	f7ff f90d 	bl	8001bdc <HAL_GetTick>
 80029c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c4:	e009      	b.n	80029da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff f909 	bl	8001bdc <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d902      	bls.n	80029da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	f000 bc80 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0ef      	beq.n	80029c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	490b      	ldr	r1, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	610b      	str	r3, [r1, #16]
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a08:	f7ff f8e8 	bl	8001bdc <HAL_GetTick>
 8002a0c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a10:	f7ff f8e4 	bl	8001bdc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d904      	bls.n	8002a28 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f000 bc5b 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
 8002a24:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a28:	4baf      	ldr	r3, [pc, #700]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ed      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80c8 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a48:	4ba7      	ldr	r3, [pc, #668]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d111      	bne.n	8002a7a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4ba4      	ldr	r3, [pc, #656]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	4aa2      	ldr	r2, [pc, #648]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a66:	4ba0      	ldr	r3, [pc, #640]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a7a:	4b9c      	ldr	r3, [pc, #624]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d119      	bne.n	8002aba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a86:	4b99      	ldr	r3, [pc, #612]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	4a98      	ldr	r2, [pc, #608]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff f8a3 	bl	8001bdc <HAL_GetTick>
 8002a96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a98:	e009      	b.n	8002aae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7ff f89f 	bl	8001bdc <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f000 bc16 	b.w	80032da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002aae:	4b8f      	ldr	r3, [pc, #572]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ef      	beq.n	8002a9a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d05f      	beq.n	8002b82 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002ac2:	4b89      	ldr	r3, [pc, #548]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ac8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d037      	beq.n	8002b48 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e3f4      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002afa:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b00:	4a79      	ldr	r2, [pc, #484]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b02:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002b06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002b0a:	f7ff f867 	bl	8001bdc <HAL_GetTick>
 8002b0e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b12:	f7ff f863 	bl	8001bdc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e3da      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b24:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ef      	bne.n	8002b12 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4969      	ldr	r1, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002b48:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b4e:	4a66      	ldr	r2, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b58:	f7ff f840 	bl	8001bdc <HAL_GetTick>
 8002b5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff f83c 	bl	8001bdc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e3b3      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b72:	4b5d      	ldr	r3, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ef      	beq.n	8002b60 <HAL_RCC_OscConfig+0x630>
 8002b80:	e01b      	b.n	8002bba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002b8a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002b8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b92:	f7ff f823 	bl	8001bdc <HAL_GetTick>
 8002b96:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f81f 	bl	8001bdc <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e396      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002bac:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ef      	bne.n	8002b9a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8111 	beq.w	8002e02 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d118      	bne.n	8002c56 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	4a30      	ldr	r2, [pc, #192]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c30:	f7fe ffd4 	bl	8001bdc <HAL_GetTick>
 8002c34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fe ffd0 	bl	8001bdc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e347      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCC_OscConfig+0x7bc>)
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01f      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c74:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c96:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ca0:	e00f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_RCC_OscConfig+0x7b8>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d057      	beq.n	8002d7a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002cca:	f7fe ff87 	bl	8001bdc <HAL_GetTick>
 8002cce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd0:	e00e      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe ff83 	bl	8001bdc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d905      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e2f8      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
 8002ce8:	46020c00 	.word	0x46020c00
 8002cec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	4b9c      	ldr	r3, [pc, #624]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0e9      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d0a:	4b96      	ldr	r3, [pc, #600]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d10:	4a94      	ldr	r2, [pc, #592]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe ff5e 	bl	8001bdc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e2d3      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d32:	4b8c      	ldr	r3, [pc, #560]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ed      	beq.n	8002d1c <HAL_RCC_OscConfig+0x7ec>
 8002d40:	e053      	b.n	8002dea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d42:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d48:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe ff42 	bl	8001bdc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e2b7      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d6a:	4b7e      	ldr	r3, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ed      	bne.n	8002d54 <HAL_RCC_OscConfig+0x824>
 8002d78:	e037      	b.n	8002dea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002d7a:	f7fe ff2f 	bl	8001bdc <HAL_GetTick>
 8002d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe ff2b 	bl	8001bdc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e2a0      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d98:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1ed      	bne.n	8002d82 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002da6:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01a      	beq.n	8002dea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002db4:	4b6b      	ldr	r3, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dba:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fe ff09 	bl	8001bdc <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e27e      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ed      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df8:	4a5a      	ldr	r2, [pc, #360]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002e16:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e20:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e22:	f7fe fedb 	bl	8001bdc <HAL_GetTick>
 8002e26:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e2a:	f7fe fed7 	bl	8001bdc <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e24e      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e3c:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x8fa>
 8002e48:	e018      	b.n	8002e7c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a45      	ldr	r2, [pc, #276]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e54:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e56:	f7fe fec1 	bl	8001bdc <HAL_GetTick>
 8002e5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5e:	f7fe febd 	bl	8001bdc <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e234      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e70:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d036      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d019      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a33      	ldr	r2, [pc, #204]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e9c:	f7fe fe9e 	bl	8001bdc <HAL_GetTick>
 8002ea0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fe9a 	bl	8001bdc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e211      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x974>
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ed0:	f7fe fe84 	bl	8001bdc <HAL_GetTick>
 8002ed4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002ed8:	f7fe fe80 	bl	8001bdc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1f7      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d07f      	beq.n	8003002 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d062      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	4910      	ldr	r1, [pc, #64]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f30:	d309      	bcc.n	8002f46 <HAL_RCC_OscConfig+0xa16>
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f023 021f 	bic.w	r2, r3, #31
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4909      	ldr	r1, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60cb      	str	r3, [r1, #12]
 8002f44:	e02a      	b.n	8002f9c <HAL_RCC_OscConfig+0xa6c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0c      	bge.n	8002f68 <HAL_RCC_OscConfig+0xa38>
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	015b      	lsls	r3, r3, #5
 8002f5c:	4901      	ldr	r1, [pc, #4]	; (8002f64 <HAL_RCC_OscConfig+0xa34>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60cb      	str	r3, [r1, #12]
 8002f62:	e01b      	b.n	8002f9c <HAL_RCC_OscConfig+0xa6c>
 8002f64:	46020c00 	.word	0x46020c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d30a      	bcc.n	8002f88 <HAL_RCC_OscConfig+0xa58>
 8002f72:	4ba1      	ldr	r3, [pc, #644]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	499d      	ldr	r1, [pc, #628]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_OscConfig+0xa6c>
 8002f88:	4b9b      	ldr	r3, [pc, #620]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	03db      	lsls	r3, r3, #15
 8002f96:	4998      	ldr	r1, [pc, #608]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002f9c:	4b96      	ldr	r3, [pc, #600]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a95      	ldr	r2, [pc, #596]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002fa2:	f043 0310 	orr.w	r3, r3, #16
 8002fa6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002fa8:	f7fe fe18 	bl	8001bdc <HAL_GetTick>
 8002fac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002fb0:	f7fe fe14 	bl	8001bdc <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e18b      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002fc2:	4b8d      	ldr	r3, [pc, #564]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xa80>
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002fd0:	4b89      	ldr	r3, [pc, #548]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a88      	ldr	r2, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002fd6:	f023 0310 	bic.w	r3, r3, #16
 8002fda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002fdc:	f7fe fdfe 	bl	8001bdc <HAL_GetTick>
 8002fe0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002fe4:	f7fe fdfa 	bl	8001bdc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e171      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002ff6:	4b80      	ldr	r3, [pc, #512]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8166 	beq.w	80032d8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003012:	4b79      	ldr	r3, [pc, #484]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b0c      	cmp	r3, #12
 800301c:	f000 80f2 	beq.w	8003204 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 80c5 	bne.w	80031b4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a72      	ldr	r2, [pc, #456]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003034:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003036:	f7fe fdd1 	bl	8001bdc <HAL_GetTick>
 800303a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fdcd 	bl	8001bdc <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e144      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003050:	4b69      	ldr	r3, [pc, #420]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305c:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d111      	bne.n	800308e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003070:	4a61      	ldr	r2, [pc, #388]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800307a:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800308e:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0xccc>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030a2:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_RCC_OscConfig+0xccc>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4a55      	ldr	r2, [pc, #340]	; (80031fc <HAL_RCC_OscConfig+0xccc>)
 80030a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80030ae:	4b52      	ldr	r3, [pc, #328]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c2:	3a01      	subs	r2, #1
 80030c4:	0212      	lsls	r2, r2, #8
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030cc:	430a      	orrs	r2, r1
 80030ce:	494a      	ldr	r1, [pc, #296]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	628b      	str	r3, [r1, #40]	; 0x28
 80030d4:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80030d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d8:	4b49      	ldr	r3, [pc, #292]	; (8003200 <HAL_RCC_OscConfig+0xcd0>)
 80030da:	4013      	ands	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030e0:	3a01      	subs	r2, #1
 80030e2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0252      	lsls	r2, r2, #9
 80030ee:	b292      	uxth	r2, r2
 80030f0:	4311      	orrs	r1, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030f6:	3a01      	subs	r2, #1
 80030f8:	0412      	lsls	r2, r2, #16
 80030fa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003104:	3a01      	subs	r2, #1
 8003106:	0612      	lsls	r2, r2, #24
 8003108:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800310c:	430a      	orrs	r2, r1
 800310e:	493a      	ldr	r1, [pc, #232]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003114:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800311a:	f023 0310 	bic.w	r3, r3, #16
 800311e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	4a34      	ldr	r2, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800312a:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003130:	f043 0310 	orr.w	r3, r3, #16
 8003134:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003136:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f023 020c 	bic.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	492d      	ldr	r1, [pc, #180]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_OscConfig+0xccc>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a29      	ldr	r2, [pc, #164]	; (80031fc <HAL_RCC_OscConfig+0xccc>)
 8003156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800315c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003174:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 800317a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800318c:	f7fe fd26 	bl	8001bdc <HAL_GetTick>
 8003190:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fd22 	bl	8001bdc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e099      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0xc64>
 80031b2:	e091      	b.n	80032d8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80031ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80031c0:	f7fe fd0c 	bl	8001bdc <HAL_GetTick>
 80031c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fd08 	bl	8001bdc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e07f      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	4a03      	ldr	r2, [pc, #12]	; (80031f8 <HAL_RCC_OscConfig+0xcc8>)
 80031ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80031f0:	f023 0303 	bic.w	r3, r3, #3
 80031f4:	6293      	str	r3, [r2, #40]	; 0x28
 80031f6:	e06f      	b.n	80032d8 <HAL_RCC_OscConfig+0xda8>
 80031f8:	46020c00 	.word	0x46020c00
 80031fc:	46020800 	.word	0x46020800
 8003200:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003204:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	2b01      	cmp	r3, #1
 8003216:	d039      	beq.n	800328c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0203 	and.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d132      	bne.n	800328c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d129      	bne.n	800328c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d122      	bne.n	800328c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	0a5b      	lsrs	r3, r3, #9
 800325a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d108      	bne.n	800328c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e024      	b.n	80032da <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800329e:	429a      	cmp	r2, r3
 80032a0:	d01a      	beq.n	80032d8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 80032a8:	f023 0310 	bic.w	r3, r3, #16
 80032ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fc95 	bl	8001bdc <HAL_GetTick>
 80032b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80032b4:	bf00      	nop
 80032b6:	f7fe fc91 	bl	8001bdc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	4293      	cmp	r3, r2
 80032c0:	d0f9      	beq.n	80032b6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HAL_RCC_OscConfig+0xdb4>)
 80032d2:	f043 0310 	orr.w	r3, r3, #16
 80032d6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3738      	adds	r7, #56	; 0x38
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	46020c00 	.word	0x46020c00

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e1d9      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b9b      	ldr	r3, [pc, #620]	; (800356c <HAL_RCC_ClockConfig+0x284>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d910      	bls.n	800332c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b98      	ldr	r3, [pc, #608]	; (800356c <HAL_RCC_ClockConfig+0x284>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 020f 	bic.w	r2, r3, #15
 8003312:	4996      	ldr	r1, [pc, #600]	; (800356c <HAL_RCC_ClockConfig+0x284>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b94      	ldr	r3, [pc, #592]	; (800356c <HAL_RCC_ClockConfig+0x284>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e1c1      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	4b8c      	ldr	r3, [pc, #560]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003344:	429a      	cmp	r2, r3
 8003346:	d908      	bls.n	800335a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003348:	4b89      	ldr	r3, [pc, #548]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	4986      	ldr	r1, [pc, #536]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003356:	4313      	orrs	r3, r2
 8003358:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003374:	429a      	cmp	r2, r3
 8003376:	d909      	bls.n	800338c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003378:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	497a      	ldr	r1, [pc, #488]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003388:	4313      	orrs	r3, r2
 800338a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b71      	ldr	r3, [pc, #452]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	496e      	ldr	r1, [pc, #440]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	4b69      	ldr	r3, [pc, #420]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d908      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80033d6:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 020f 	bic.w	r2, r3, #15
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4963      	ldr	r1, [pc, #396]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80d2 	beq.w	800359a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d143      	bne.n	800348a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003402:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b57      	ldr	r3, [pc, #348]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003416:	4a56      	ldr	r2, [pc, #344]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003432:	f7fe fbd3 	bl	8001bdc <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003438:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <HAL_RCC_ClockConfig+0x28c>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00f      	beq.n	8003464 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003446:	f7fe fbc9 	bl	8001bdc <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e12b      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003458:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_RCC_ClockConfig+0x28c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003470:	4a3f      	ldr	r2, [pc, #252]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003472:	f023 0304 	bic.w	r3, r3, #4
 8003476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d121      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e112      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d115      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e106      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0fa      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0f2      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4926      	ldr	r1, [pc, #152]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80034dc:	f7fe fb7e 	bl	8001bdc <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d112      	bne.n	8003510 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fe fb76 	bl	8001bdc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0d6      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_ClockConfig+0x204>
 800350e:	e044      	b.n	800359a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d112      	bne.n	800353e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351a:	f7fe fb5f 	bl	8001bdc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0bf      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_ClockConfig+0x232>
 800353c:	e02d      	b.n	800359a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d123      	bne.n	800358e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fe fb48 	bl	8001bdc <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0a8      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <HAL_RCC_ClockConfig+0x288>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ee      	bne.n	8003548 <HAL_RCC_ClockConfig+0x260>
 800356a:	e016      	b.n	800359a <HAL_RCC_ClockConfig+0x2b2>
 800356c:	40022000 	.word	0x40022000
 8003570:	46020c00 	.word	0x46020c00
 8003574:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003578:	f7fe fb30 	bl	8001bdc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e090      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800358e:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d1ee      	bne.n	8003578 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d208      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80035b6:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 020f 	bic.w	r2, r3, #15
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	493d      	ldr	r1, [pc, #244]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b3c      	ldr	r3, [pc, #240]	; (80036bc <HAL_RCC_ClockConfig+0x3d4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d210      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_ClockConfig+0x3d4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 020f 	bic.w	r2, r3, #15
 80035de:	4937      	ldr	r1, [pc, #220]	; (80036bc <HAL_RCC_ClockConfig+0x3d4>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b35      	ldr	r3, [pc, #212]	; (80036bc <HAL_RCC_ClockConfig+0x3d4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e05b      	b.n	80036b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003610:	429a      	cmp	r2, r3
 8003612:	d208      	bcs.n	8003626 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4925      	ldr	r1, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003640:	429a      	cmp	r2, r3
 8003642:	d209      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4919      	ldr	r1, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d010      	beq.n	8003686 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003670:	429a      	cmp	r2, r3
 8003672:	d208      	bcs.n	8003686 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	490d      	ldr	r1, [pc, #52]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003682:	4313      	orrs	r3, r2
 8003684:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003686:	f000 f821 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800368a:	4602      	mov	r2, r0
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x3d0>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	490a      	ldr	r1, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x3d8>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x3dc>)
 800369e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x3e0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fa4f 	bl	8001b48 <HAL_InitTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	46020c00 	.word	0x46020c00
 80036bc:	40022000 	.word	0x40022000
 80036c0:	08008524 	.word	0x08008524
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004

080036cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b08b      	sub	sp, #44	; 0x2c
 80036d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e4:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x34>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d121      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11e      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003700:	4b71      	ldr	r3, [pc, #452]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800370c:	4b6e      	ldr	r3, [pc, #440]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800370e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003712:	0b1b      	lsrs	r3, r3, #12
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e005      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800371c:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	0f1b      	lsrs	r3, r3, #28
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003728:	4a68      	ldr	r2, [pc, #416]	; (80038cc <HAL_RCC_GetSysClockFreq+0x200>)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d110      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800373c:	e00d      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373e:	4b62      	ldr	r3, [pc, #392]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d102      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800374a:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	e004      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d101      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003756:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003758:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	f040 80ac 	bne.w	80038ba <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003762:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800376c:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003786:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8086 	beq.w	80038b6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d003      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0xec>
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d022      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x130>
 80037b6:	e043      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80038d4 <HAL_RCC_GetSysClockFreq+0x208>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037da:	ed97 6a01 	vldr	s12, [r7, #4]
 80037de:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80038d8 <HAL_RCC_GetSysClockFreq+0x20c>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80037fa:	e046      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a33 	vldr	s13, [pc, #204]	; 80038d4 <HAL_RCC_GetSysClockFreq+0x208>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800381e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003822:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80038d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800383e:	e024      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003868:	ed97 6a01 	vldr	s12, [r7, #4]
 800386c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80038d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8003870:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003874:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003884:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003888:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	0e1b      	lsrs	r3, r3, #24
 8003890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003894:	3301      	adds	r3, #1
 8003896:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80038a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ae:	ee17 3a90 	vmov	r3, s15
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	e001      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80038ba:	6a3b      	ldr	r3, [r7, #32]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	372c      	adds	r7, #44	; 0x2c
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	46020c00 	.word	0x46020c00
 80038cc:	0800853c 	.word	0x0800853c
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	4b742400 	.word	0x4b742400
 80038d8:	46000000 	.word	0x46000000

080038dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80038e0:	f7ff fef4 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_RCC_GetHCLKFreq+0x28>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4906      	ldr	r1, [pc, #24]	; (8003908 <HAL_RCC_GetHCLKFreq+0x2c>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_RCC_GetHCLKFreq+0x30>)
 80038f8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <HAL_RCC_GetHCLKFreq+0x30>)
 80038fc:	681b      	ldr	r3, [r3, #0]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	46020c00 	.word	0x46020c00
 8003908:	08008524 	.word	0x08008524
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003914:	f7ff ffe2 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	46020c00 	.word	0x46020c00
 8003934:	08008534 	.word	0x08008534

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800393c:	f7ff ffce 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	46020c00 	.word	0x46020c00
 800395c:	08008534 	.word	0x08008534

08003960 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003964:	f7ff ffba 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK3Freq+0x20>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	46020c00 	.word	0x46020c00
 8003984:	08008534 	.word	0x08008534

08003988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800399e:	f7fe fda9 	bl	80024f4 <HAL_PWREx_GetVoltageRange>
 80039a2:	6178      	str	r0, [r7, #20]
 80039a4:	e019      	b.n	80039da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039b6:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7fe fd96 	bl	80024f4 <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d0:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039d2:	f023 0304 	bic.w	r3, r3, #4
 80039d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e0:	d003      	beq.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d109      	bne.n	80039fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f0:	d202      	bcs.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80039f2:	2301      	movs	r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80039f6:	e033      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80039fc:	e030      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a04:	d208      	bcs.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d102      	bne.n	8003a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003a0e:	2303      	movs	r3, #3
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e025      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e035      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1e:	d90f      	bls.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a2c:	d902      	bls.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e015      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003a34:	2301      	movs	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e012      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e00f      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a46:	d109      	bne.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d102      	bne.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003a50:	2301      	movs	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e004      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003a56:	2302      	movs	r3, #2
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e001      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 020f 	bic.w	r2, r3, #15
 8003a68:	4909      	ldr	r1, [pc, #36]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	46020c00 	.word	0x46020c00
 8003a90:	40022000 	.word	0x40022000

08003a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b0b6      	sub	sp, #216	; 0xd8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f002 0401 	and.w	r4, r2, #1
 8003ab8:	2500      	movs	r5, #0
 8003aba:	ea54 0305 	orrs.w	r3, r4, r5
 8003abe:	d00b      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003ac0:	4bc5      	ldr	r3, [pc, #788]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac6:	f023 0103 	bic.w	r1, r3, #3
 8003aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	4ac1      	ldr	r2, [pc, #772]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f002 0804 	and.w	r8, r2, #4
 8003ae4:	f04f 0900 	mov.w	r9, #0
 8003ae8:	ea58 0309 	orrs.w	r3, r8, r9
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003aee:	4bba      	ldr	r3, [pc, #744]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	4ab6      	ldr	r2, [pc, #728]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f002 0a08 	and.w	sl, r2, #8
 8003b12:	f04f 0b00 	mov.w	fp, #0
 8003b16:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b1a:	d00b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003b1c:	4bae      	ldr	r3, [pc, #696]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4aaa      	ldr	r2, [pc, #680]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f002 0310 	and.w	r3, r2, #16
 8003b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003b54:	4ba0      	ldr	r3, [pc, #640]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	4a9c      	ldr	r2, [pc, #624]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f002 0320 	and.w	r3, r2, #32
 8003b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b8c:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b92:	f023 0107 	bic.w	r1, r3, #7
 8003b96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	4a8e      	ldr	r2, [pc, #568]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003bc4:	4b84      	ldr	r3, [pc, #528]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bca:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003bce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd4:	4a80      	ldr	r2, [pc, #512]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003be8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bf2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003bfc:	4b76      	ldr	r3, [pc, #472]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c0c:	4a72      	ldr	r2, [pc, #456]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003c34:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	4a64      	ldr	r2, [pc, #400]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	d00b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c72:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a56      	ldr	r2, [pc, #344]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c9a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	d00b      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003caa:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb4:	4a48      	ldr	r2, [pc, #288]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cec:	4a3a      	ldr	r2, [pc, #232]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d02:	2300      	movs	r3, #0
 8003d04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d20:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003d34:	673b      	str	r3, [r7, #112]	; 0x70
 8003d36:	2300      	movs	r3, #0
 8003d38:	677b      	str	r3, [r7, #116]	; 0x74
 8003d3a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4313      	orrs	r3, r2
 8003d42:	d04f      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d02d      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d827      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d54:	2b60      	cmp	r3, #96	; 0x60
 8003d56:	d02b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003d58:	2b60      	cmp	r3, #96	; 0x60
 8003d5a:	d823      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d006      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d81f      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d011      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003d6c:	e01a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d7a:	e01a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d80:	3308      	adds	r3, #8
 8003d82:	4618      	mov	r0, r3
 8003d84:	f002 f93e 	bl	8006004 <RCCEx_PLL2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d8e:	e010      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d94:	332c      	adds	r3, #44	; 0x2c
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 f9cc 	bl	8006134 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003da2:	e006      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003dac:	bf00      	nop
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d110      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dc0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dcc:	4a02      	ldr	r2, [pc, #8]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003dd6:	bf00      	nop
 8003dd8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003de0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df2:	2300      	movs	r3, #0
 8003df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	d046      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e08:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e0e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e12:	d821      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e18:	d022      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1e:	d81b      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003e20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e24:	d01c      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e2a:	d815      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e30:	d008      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e36:	d80f      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d011      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	d00e      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e42:	e009      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e48:	3308      	adds	r3, #8
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f002 f8da 	bl	8006004 <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e62:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e6a:	4bb6      	ldr	r3, [pc, #728]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e7c:	4ab1      	ldr	r2, [pc, #708]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e8a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	d03e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d81d      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003efb 	.word	0x08003efb
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003edf 	.word	0x08003edf
 8003ec8:	08003efb 	.word	0x08003efb
 8003ecc:	08003efb 	.word	0x08003efb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ed0:	4b9c      	ldr	r3, [pc, #624]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	4a9b      	ldr	r2, [pc, #620]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eda:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003edc:	e00e      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee2:	332c      	adds	r3, #44	; 0x2c
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f002 f925 	bl	8006134 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003efa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003efc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10d      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f0a:	f023 0107 	bic.w	r1, r3, #7
 8003f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f16:	4a8b      	ldr	r2, [pc, #556]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f1e:	e003      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f24:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f36:	2300      	movs	r3, #0
 8003f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d04a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f50:	d028      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f56:	d821      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f5c:	d024      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f62:	d81b      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f68:	d00e      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6e:	d815      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d110      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	4a71      	ldr	r2, [pc, #452]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f86:	e012      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f8c:	332c      	adds	r3, #44	; 0x2c
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f002 f8d0 	bl	8006134 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f9a:	e008      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e002      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003fac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003fae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	4a5e      	ldr	r2, [pc, #376]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003fd6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe8:	2300      	movs	r3, #0
 8003fea:	657b      	str	r3, [r7, #84]	; 0x54
 8003fec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f000 80ba 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d113      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b4d      	ldr	r3, [pc, #308]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	4a4c      	ldr	r2, [pc, #304]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800401c:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800402a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004034:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	4a43      	ldr	r2, [pc, #268]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004040:	f7fd fdcc 	bl	8001bdc <HAL_GetTick>
 8004044:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004048:	e00b      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd fdc7 	bl	8001bdc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d903      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004060:	e005      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004062:	4b39      	ldr	r3, [pc, #228]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ed      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800406e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d16a      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004076:	4b33      	ldr	r3, [pc, #204]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800407c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d023      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800408c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004090:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004098:	4293      	cmp	r3, r2
 800409a:	d01b      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409c:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800409e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b0:	4a24      	ldr	r2, [pc, #144]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ba:	4b22      	ldr	r3, [pc, #136]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d019      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fd fd7c 	bl	8001bdc <HAL_GetTick>
 80040e4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e8:	e00d      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd fd77 	bl	8001bdc <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040f4:	1ad2      	subs	r2, r2, r3
 80040f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d903      	bls.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ea      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8004114:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800411e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800412a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800412e:	4a05      	ldr	r2, [pc, #20]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004130:	430b      	orrs	r3, r1
 8004132:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004136:	e00d      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004138:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800413c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004142:	bf00      	nop
 8004144:	46020c00 	.word	0x46020c00
 8004148:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004150:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004154:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415c:	4bb2      	ldr	r3, [pc, #712]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	4ab1      	ldr	r2, [pc, #708]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800416c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004178:	64bb      	str	r3, [r7, #72]	; 0x48
 800417a:	2300      	movs	r3, #0
 800417c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800417e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d042      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800418c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004190:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004194:	d022      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004196:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800419a:	d81b      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800419c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a0:	d011      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
 80041a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a6:	d815      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d019      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80041ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b0:	d110      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b6:	3308      	adds	r3, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 ff23 	bl	8006004 <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041c4:	e00d      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c6:	4b98      	ldr	r3, [pc, #608]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	4a97      	ldr	r2, [pc, #604]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80041d2:	e006      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041da:	e002      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80041e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80041ea:	4b8f      	ldr	r3, [pc, #572]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fc:	4a8a      	ldr	r2, [pc, #552]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800420a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800420e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
 800421c:	2300      	movs	r3, #0
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
 8004220:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004224:	460b      	mov	r3, r1
 8004226:	4313      	orrs	r3, r2
 8004228:	d02d      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800422a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004236:	d00b      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423c:	d804      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	d007      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004258:	bf00      	nop
    }
    if (ret == HAL_OK)
 800425a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004262:	4b71      	ldr	r3, [pc, #452]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	4a6c      	ldr	r2, [pc, #432]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004276:	430b      	orrs	r3, r1
 8004278:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004282:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
 8004294:	2300      	movs	r3, #0
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004298:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d00c      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80042a2:	4b61      	ldr	r3, [pc, #388]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042a8:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80042ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b4:	4a5c      	ldr	r2, [pc, #368]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80042bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042c8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ca:	2300      	movs	r3, #0
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
 80042ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d019      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80042d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d105      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042e6:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80042f2:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80042fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004304:	4a48      	ldr	r2, [pc, #288]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004306:	430b      	orrs	r3, r1
 8004308:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800430c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
 800431a:	2300      	movs	r3, #0
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d00c      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800433a:	493b      	ldr	r1, [pc, #236]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800434e:	623b      	str	r3, [r7, #32]
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
 8004354:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d00c      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800436c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004370:	492d      	ldr	r1, [pc, #180]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	d00c      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800439a:	f023 0218 	bic.w	r2, r3, #24
 800439e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043a6:	4920      	ldr	r1, [pc, #128]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043c4:	460b      	mov	r3, r1
 80043c6:	4313      	orrs	r3, r2
 80043c8:	d034      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80043ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043d6:	d105      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	4a12      	ldr	r2, [pc, #72]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e2:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80043e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f0:	d108      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f6:	3308      	adds	r3, #8
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fe03 	bl	8006004 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8004404:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10f      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800440e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800441a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800441e:	4902      	ldr	r1, [pc, #8]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004426:	e005      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004428:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004430:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d03a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800445c:	d00e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004462:	d815      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446c:	d110      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	4a26      	ldr	r2, [pc, #152]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800447a:	e00e      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800447c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004480:	3308      	adds	r3, #8
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fdbe 	bl	8006004 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004498:	bf00      	nop
    }
    if (ret == HAL_OK)
 800449a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b4:	4915      	ldr	r1, [pc, #84]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80044c2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80044c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d00c      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f4:	4905      	ldr	r1, [pc, #20]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044fc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8004500:	4618      	mov	r0, r3
 8004502:	37d8      	adds	r7, #216	; 0xd8
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	46020c00 	.word	0x46020c00

08004510 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004518:	4bad      	ldr	r3, [pc, #692]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004522:	4bab      	ldr	r3, [pc, #684]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800452c:	4ba8      	ldr	r3, [pc, #672]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	3301      	adds	r3, #1
 8004538:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800453a:	4ba5      	ldr	r3, [pc, #660]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004546:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	08db      	lsrs	r3, r3, #3
 800454c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8123 	beq.w	80047b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d062      	beq.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b03      	cmp	r3, #3
 8004574:	f200 8081 	bhi.w	800467a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d024      	beq.n	80045c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d17a      	bne.n	800467a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80047d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b8e      	ldr	r3, [pc, #568]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c6:	e08f      	b.n	80046e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045c8:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80045d4:	4b7e      	ldr	r3, [pc, #504]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	0f1b      	lsrs	r3, r3, #28
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	e006      	b.n	80045ee <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80045e0:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	0f1b      	lsrs	r3, r3, #28
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	4a7b      	ldr	r2, [pc, #492]	; (80047dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	ed97 6a02 	vldr	s12, [r7, #8]
 8004618:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800461c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004628:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004634:	e058      	b.n	80046e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eddf 6a64 	vldr	s13, [pc, #400]	; 80047d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004658:	ed97 6a02 	vldr	s12, [r7, #8]
 800465c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004660:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004664:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004678:	e036      	b.n	80046e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8004686:	4b52      	ldr	r3, [pc, #328]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	0f1b      	lsrs	r3, r3, #28
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8004692:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	0f1b      	lsrs	r3, r3, #28
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80046a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ca:	eddf 5a43 	vldr	s11, [pc, #268]	; 80047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80046ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046e6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d017      	beq.n	8004724 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	0a5b      	lsrs	r3, r3, #9
 80046fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800470a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800470e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471a:	ee17 2a90 	vmov	r2, s15
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e002      	b.n	800472a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800472a:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800474c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004750:	edd7 6a07 	vldr	s13, [r7, #28]
 8004754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475c:	ee17 2a90 	vmov	r2, s15
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	605a      	str	r2, [r3, #4]
 8004764:	e002      	b.n	800476c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	0e1b      	lsrs	r3, r3, #24
 800477e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800478a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800478e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004792:	edd7 6a07 	vldr	s13, [r7, #28]
 8004796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800479e:	ee17 2a90 	vmov	r2, s15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80047a6:	e00c      	b.n	80047c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	bf00      	nop
 80047c4:	3724      	adds	r7, #36	; 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	46020c00 	.word	0x46020c00
 80047d4:	4b742400 	.word	0x4b742400
 80047d8:	46000000 	.word	0x46000000
 80047dc:	0800853c 	.word	0x0800853c

080047e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80047e8:	4bad      	ldr	r3, [pc, #692]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80047f2:	4bab      	ldr	r3, [pc, #684]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80047fc:	4ba8      	ldr	r3, [pc, #672]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3301      	adds	r3, #1
 8004808:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800480a:	4ba5      	ldr	r3, [pc, #660]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004816:	4ba2      	ldr	r3, [pc, #648]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8123 	beq.w	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d062      	beq.n	8004906 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b03      	cmp	r3, #3
 8004844:	f200 8081 	bhi.w	800494a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d024      	beq.n	8004898 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d17a      	bne.n	800494a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004866:	4b8e      	ldr	r3, [pc, #568]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004876:	ed97 6a02 	vldr	s12, [r7, #8]
 800487a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800487e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004882:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004896:	e08f      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80048a4:	4b7e      	ldr	r3, [pc, #504]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0f1b      	lsrs	r3, r3, #28
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	e006      	b.n	80048be <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80048b0:	4b7b      	ldr	r3, [pc, #492]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	0f1b      	lsrs	r3, r3, #28
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a7b      	ldr	r2, [pc, #492]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80048e8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80048ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004904:	e058      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004910:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004918:	4b61      	ldr	r3, [pc, #388]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004928:	ed97 6a02 	vldr	s12, [r7, #8]
 800492c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004930:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004934:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004948:	e036      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800494a:	4b55      	ldr	r3, [pc, #340]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004956:	4b52      	ldr	r3, [pc, #328]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0f1b      	lsrs	r3, r3, #28
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8004962:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	0f1b      	lsrs	r3, r3, #28
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	4a4e      	ldr	r2, [pc, #312]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a02 	vldr	s12, [r7, #8]
 800499a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b6:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80049b8:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049c4:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	0a5b      	lsrs	r3, r3, #9
 80049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80049d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049da:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049de:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ea:	ee17 2a90 	vmov	r2, s15
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e002      	b.n	80049fa <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2c:	ee17 2a90 	vmov	r2, s15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	e002      	b.n	8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004a3c:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6e:	ee17 2a90 	vmov	r2, s15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a76:	e00c      	b.n	8004a92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
}
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	; 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	46020c00 	.word	0x46020c00
 8004aa4:	4b742400 	.word	0x4b742400
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	0800853c 	.word	0x0800853c

08004ab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004ab8:	4bad      	ldr	r3, [pc, #692]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004ac2:	4bab      	ldr	r3, [pc, #684]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004acc:	4ba8      	ldr	r3, [pc, #672]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004ada:	4ba5      	ldr	r3, [pc, #660]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004ae6:	4ba2      	ldr	r3, [pc, #648]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	08db      	lsrs	r3, r3, #3
 8004aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8123 	beq.w	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d062      	beq.n	8004bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	f200 8081 	bhi.w	8004c1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d024      	beq.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d17a      	bne.n	8004c1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b8e      	ldr	r3, [pc, #568]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b4a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004b66:	e08f      	b.n	8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b68:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004b74:	4b7e      	ldr	r3, [pc, #504]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	0f1b      	lsrs	r3, r3, #28
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	e006      	b.n	8004b8e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004b80:	4b7b      	ldr	r3, [pc, #492]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	0f1b      	lsrs	r3, r3, #28
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a7b      	ldr	r2, [pc, #492]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd4:	e058      	b.n	8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	ee07 3a90 	vmov	s15, r3
 8004bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be8:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c18:	e036      	b.n	8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c1a:	4b55      	ldr	r3, [pc, #340]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004c26:	4b52      	ldr	r3, [pc, #328]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0f1b      	lsrs	r3, r3, #28
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	e006      	b.n	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004c32:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	0f1b      	lsrs	r3, r3, #28
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	4a4e      	ldr	r2, [pc, #312]	; (8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c6a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c86:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004c88:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e002      	b.n	8004cca <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 2a90 	vmov	r2, s15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	e002      	b.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004d0c:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	0e1b      	lsrs	r3, r3, #24
 8004d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3e:	ee17 2a90 	vmov	r2, s15
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004d46:	e00c      	b.n	8004d62 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	609a      	str	r2, [r3, #8]
}
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
}
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	46020c00 	.word	0x46020c00
 8004d74:	4b742400 	.word	0x4b742400
 8004d78:	46000000 	.word	0x46000000
 8004d7c:	0800853c 	.word	0x0800853c

08004d80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004d92:	430b      	orrs	r3, r1
 8004d94:	d145      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d96:	4b9b      	ldr	r3, [pc, #620]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004da2:	4b98      	ldr	r3, [pc, #608]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d108      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	d104      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	f001 b912 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004dc2:	4b90      	ldr	r3, [pc, #576]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d114      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d110      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dda:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de8:	d103      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004dea:	23fa      	movs	r3, #250	; 0xfa
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dee:	f001 b8fa 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004df2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004df8:	f001 b8f5 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004dfc:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e08:	d107      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e10:	d103      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004e12:	4b7d      	ldr	r3, [pc, #500]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
 8004e16:	f001 b8e6 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1e:	f001 b8e2 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e26:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	d151      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004e2e:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e34:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b80      	cmp	r3, #128	; 0x80
 8004e3e:	d035      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d841      	bhi.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d02a      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b60      	cmp	r3, #96	; 0x60
 8004e50:	d83b      	bhi.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d009      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d835      	bhi.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00c      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d012      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e6a:	e02e      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fb4d 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e7a:	f001 b8b4 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e7e:	f107 0318 	add.w	r3, r7, #24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fcac 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e8c:	f001 b8ab 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e90:	f107 030c 	add.w	r3, r7, #12
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fe0b 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e9e:	f001 b8a2 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ea2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ea8:	f001 b89d 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eac:	4b55      	ldr	r3, [pc, #340]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb8:	d103      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004eba:	4b54      	ldr	r3, [pc, #336]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ebe:	f001 b892 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ec6:	f001 b88e 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ece:	f001 b88a 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004eda:	430b      	orrs	r3, r1
 8004edc:	d126      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004ede:	4b49      	ldr	r3, [pc, #292]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ee0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004eea:	4b46      	ldr	r3, [pc, #280]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d103      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004efe:	4b43      	ldr	r3, [pc, #268]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
 8004f02:	f001 b870 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004f06:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d107      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1a:	d103      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004f1c:	4b3c      	ldr	r3, [pc, #240]	; (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	f001 b861 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
 8004f28:	f001 b85d 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f30:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004f34:	430b      	orrs	r3, r1
 8004f36:	d171      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004f38:	4b32      	ldr	r3, [pc, #200]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f3e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f4a:	d034      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f52:	d853      	bhi.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5a:	d00b      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f62:	d84b      	bhi.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f70:	d009      	beq.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004f72:	e043      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fac9 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f82:	f001 b830 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fc28 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f94:	f001 b827 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004f98:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa4:	d103      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004faa:	f001 b81c 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fb2:	f001 b818 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d118      	bne.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0e1b      	lsrs	r3, r3, #24
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	0e1b      	lsrs	r3, r3, #24
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ff0:	f000 bff9 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ff8:	f000 bff5 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005000:	f000 bff1 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005004:	46020c00 	.word	0x46020c00
 8005008:	0007a120 	.word	0x0007a120
 800500c:	00f42400 	.word	0x00f42400
 8005010:	007a1200 	.word	0x007a1200
 8005014:	02dc6c00 	.word	0x02dc6c00
 8005018:	0800853c 	.word	0x0800853c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800501c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005020:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005024:	430b      	orrs	r3, r1
 8005026:	d17f      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005028:	4ba8      	ldr	r3, [pc, #672]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800502a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800502e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	2b00      	cmp	r3, #0
 8005038:	d165      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800503a:	4ba4      	ldr	r3, [pc, #656]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800503c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005040:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005044:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800504c:	d034      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005054:	d853      	bhi.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800505c:	d00b      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005064:	d84b      	bhi.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2b00      	cmp	r3, #0
 800506a:	d016      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005072:	d009      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005074:	e043      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fa48 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005084:	f000 bfaf 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005088:	f107 0318 	add.w	r3, r7, #24
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fba7 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005096:	f000 bfa6 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800509a:	4b8c      	ldr	r3, [pc, #560]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	d103      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80050a8:	4b89      	ldr	r3, [pc, #548]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80050ac:	f000 bf9b 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050b4:	f000 bf97 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050b8:	4b84      	ldr	r3, [pc, #528]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d118      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050c4:	4b81      	ldr	r3, [pc, #516]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80050d0:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	0e1b      	lsrs	r3, r3, #24
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	e006      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80050dc:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	4a7a      	ldr	r2, [pc, #488]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80050ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80050f2:	f000 bf78 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050fa:	f000 bf74 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005102:	f000 bf70 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510c:	d108      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800510e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f9fc 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
 800511c:	f000 bf63 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
 8005124:	f000 bf5f 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512c:	1e51      	subs	r1, r2, #1
 800512e:	430b      	orrs	r3, r1
 8005130:	d136      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005132:	4b66      	ldr	r3, [pc, #408]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005144:	f7fe fbf8 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8005148:	6378      	str	r0, [r7, #52]	; 0x34
 800514a:	f000 bf4c 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2b01      	cmp	r3, #1
 8005152:	d104      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005154:	f7fe faba 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005158:	6378      	str	r0, [r7, #52]	; 0x34
 800515a:	f000 bf44 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800515e:	4b5b      	ldr	r3, [pc, #364]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d106      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b02      	cmp	r3, #2
 8005170:	d103      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8005172:	4b59      	ldr	r3, [pc, #356]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
 8005176:	f000 bf36 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800517a:	4b54      	ldr	r3, [pc, #336]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800517c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d107      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	2b03      	cmp	r3, #3
 800518c:	d104      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
 8005194:	f000 bf27 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
 800519c:	f000 bf23 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80051a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a4:	1f11      	subs	r1, r2, #4
 80051a6:	430b      	orrs	r3, r1
 80051a8:	d136      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80051aa:	4b48      	ldr	r3, [pc, #288]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fe fba8 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 80051c0:	6378      	str	r0, [r7, #52]	; 0x34
 80051c2:	f000 bf10 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d104      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051cc:	f7fe fa7e 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80051d0:	6378      	str	r0, [r7, #52]	; 0x34
 80051d2:	f000 bf08 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d106      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d103      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80051ea:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	f000 befa 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80051f2:	4b36      	ldr	r3, [pc, #216]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d107      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2b30      	cmp	r3, #48	; 0x30
 8005204:	d104      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
 800520c:	f000 beeb 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
 8005214:	f000 bee7 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521c:	f1a2 0108 	sub.w	r1, r2, #8
 8005220:	430b      	orrs	r3, r1
 8005222:	d136      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005224:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800522a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800522e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005236:	f7fe fb6b 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 800523a:	6378      	str	r0, [r7, #52]	; 0x34
 800523c:	f000 bed3 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d104      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe fa41 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800524a:	6378      	str	r0, [r7, #52]	; 0x34
 800524c:	f000 becb 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005250:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525c:	d106      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2b80      	cmp	r3, #128	; 0x80
 8005262:	d103      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	f000 bebd 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800526e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2bc0      	cmp	r3, #192	; 0xc0
 800527e:	d104      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8005280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
 8005286:	f000 beae 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	f000 beaa 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005296:	f1a2 0110 	sub.w	r1, r2, #16
 800529a:	430b      	orrs	r3, r1
 800529c:	d141      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80052a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe fb2e 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 80052b4:	6378      	str	r0, [r7, #52]	; 0x34
 80052b6:	f000 be96 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe fa03 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80052c6:	6378      	str	r0, [r7, #52]	; 0x34
 80052c8:	f000 be8d 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80052cc:	46020c00 	.word	0x46020c00
 80052d0:	02dc6c00 	.word	0x02dc6c00
 80052d4:	0800853c 	.word	0x0800853c
 80052d8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80052dc:	4baa      	ldr	r3, [pc, #680]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d107      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f0:	d103      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80052f2:	4ba6      	ldr	r3, [pc, #664]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	f000 be76 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80052fa:	4ba3      	ldr	r3, [pc, #652]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d108      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530e:	d104      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8005310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	f000 be66 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
 800531e:	f000 be62 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005326:	f1a2 0120 	sub.w	r1, r2, #32
 800532a:	430b      	orrs	r3, r1
 800532c:	d158      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800532e:	4b96      	ldr	r3, [pc, #600]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005340:	f7fe fb0e 	bl	8003960 <HAL_RCC_GetPCLK3Freq>
 8005344:	6378      	str	r0, [r7, #52]	; 0x34
 8005346:	f000 be4e 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2b01      	cmp	r3, #1
 800534e:	d104      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005350:	f7fe f9bc 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005354:	6378      	str	r0, [r7, #52]	; 0x34
 8005356:	f000 be46 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800535a:	4b8b      	ldr	r3, [pc, #556]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d106      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2b02      	cmp	r3, #2
 800536c:	d103      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800536e:	4b87      	ldr	r3, [pc, #540]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	f000 be38 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005376:	4b84      	ldr	r3, [pc, #528]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d107      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2b03      	cmp	r3, #3
 8005388:	d104      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800538a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
 8005390:	f000 be29 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005394:	4b7c      	ldr	r3, [pc, #496]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b20      	cmp	r3, #32
 800539e:	d11b      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d118      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053a6:	4b78      	ldr	r3, [pc, #480]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80053b2:	4b75      	ldr	r3, [pc, #468]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80053be:	4b72      	ldr	r3, [pc, #456]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	0e1b      	lsrs	r3, r3, #24
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	4a70      	ldr	r2, [pc, #448]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80053ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
 80053d4:	f000 be07 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
 80053dc:	f000 be03 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80053e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80053e8:	430b      	orrs	r3, r1
 80053ea:	d16c      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80053ec:	4b66      	ldr	r3, [pc, #408]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d104      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005400:	f7fe f964 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005404:	6378      	str	r0, [r7, #52]	; 0x34
 8005406:	f000 bdee 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d108      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005412:	f107 0318 	add.w	r3, r7, #24
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f9e2 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
 8005420:	f000 bde1 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800542a:	f7fe fa57 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 800542e:	6378      	str	r0, [r7, #52]	; 0x34
 8005430:	f000 bdd9 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800543a:	d122      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800543c:	4b52      	ldr	r3, [pc, #328]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b20      	cmp	r3, #32
 8005446:	d118      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005448:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005454:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	e006      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005460:	4b49      	ldr	r3, [pc, #292]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	4a48      	ldr	r2, [pc, #288]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	f000 bdb6 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
 800547e:	f000 bdb2 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005482:	4b41      	ldr	r3, [pc, #260]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005496:	d103      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005498:	4b3c      	ldr	r3, [pc, #240]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	f000 bda3 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80054a0:	4b39      	ldr	r3, [pc, #228]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	d107      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b4:	d103      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80054b6:	4b35      	ldr	r3, [pc, #212]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	f000 bd94 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	f000 bd90 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80054c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ca:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80054ce:	430b      	orrs	r3, r1
 80054d0:	d160      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80054d2:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d84c      	bhi.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005525 	.word	0x08005525
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005513 	.word	0x08005513
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	08005539 	.word	0x08005539
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff f803 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800550e:	f000 bd6a 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff faca 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005520:	f000 bd61 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005524:	f7fe f9da 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8005528:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800552a:	f000 bd5c 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800552e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005534:	f000 bd57 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d118      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005544:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	0e1b      	lsrs	r3, r3, #24
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	e006      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800555e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	0e1b      	lsrs	r3, r3, #24
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005572:	f000 bd38 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800557a:	f000 bd34 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005582:	f000 bd30 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005586:	bf00      	nop
 8005588:	46020c00 	.word	0x46020c00
 800558c:	00f42400 	.word	0x00f42400
 8005590:	0800853c 	.word	0x0800853c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005598:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800559c:	430b      	orrs	r3, r1
 800559e:	d167      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80055a0:	4ba0      	ldr	r3, [pc, #640]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b2:	d036      	beq.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055ba:	d855      	bhi.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055c2:	d029      	beq.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ca:	d84d      	bhi.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d2:	d013      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055da:	d845      	bhi.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d015      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d13e      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe ff8e 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f8:	f000 bcf5 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fa55 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800560a:	f000 bcec 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800560e:	f7fe f965 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8005612:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005614:	f000 bce7 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005618:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800561e:	f000 bce2 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005622:	4b80      	ldr	r3, [pc, #512]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	d118      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800562e:	4b7d      	ldr	r3, [pc, #500]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800563a:	4b7a      	ldr	r3, [pc, #488]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0e1b      	lsrs	r3, r3, #24
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8005646:	4b77      	ldr	r3, [pc, #476]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	0e1b      	lsrs	r3, r3, #24
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	4a74      	ldr	r2, [pc, #464]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800565c:	f000 bcc3 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005664:	f000 bcbf 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800566c:	f000 bcbb 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005674:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005678:	430b      	orrs	r3, r1
 800567a:	d14c      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800567c:	4b69      	ldr	r3, [pc, #420]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800567e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005682:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005686:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800568e:	f7fe f93f 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8005692:	6378      	str	r0, [r7, #52]	; 0x34
 8005694:	f000 bca7 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569e:	d104      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056a0:	f7fe f814 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80056a4:	6378      	str	r0, [r7, #52]	; 0x34
 80056a6:	f000 bc9e 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80056aa:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b6:	d107      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d103      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80056c0:	4b5a      	ldr	r3, [pc, #360]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
 80056c4:	f000 bc8f 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80056c8:	4b56      	ldr	r3, [pc, #344]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d11c      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056da:	d118      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056dc:	4b51      	ldr	r3, [pc, #324]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	0e1b      	lsrs	r3, r3, #24
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	e006      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80056f4:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	4a49      	ldr	r2, [pc, #292]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	f000 bc6c 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
 8005712:	f000 bc68 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800571a:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800571e:	430b      	orrs	r3, r1
 8005720:	d14c      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005722:	4b40      	ldr	r3, [pc, #256]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005728:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800572c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe f8ec 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8005738:	6378      	str	r0, [r7, #52]	; 0x34
 800573a:	f000 bc54 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005744:	d104      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005746:	f7fd ffc1 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800574a:	6378      	str	r0, [r7, #52]	; 0x34
 800574c:	f000 bc4b 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005750:	4b34      	ldr	r3, [pc, #208]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d107      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d103      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8005766:	4b31      	ldr	r3, [pc, #196]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	f000 bc3c 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800576e:	4b2d      	ldr	r3, [pc, #180]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d11c      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005780:	d118      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005782:	4b28      	ldr	r3, [pc, #160]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800578e:	4b25      	ldr	r3, [pc, #148]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0e1b      	lsrs	r3, r3, #24
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	e006      	b.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800579a:	4b22      	ldr	r3, [pc, #136]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800579c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	0e1b      	lsrs	r3, r3, #24
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80057aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
 80057b0:	f000 bc19 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
 80057b8:	f000 bc15 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80057bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80057c4:	430b      	orrs	r3, r1
 80057c6:	d157      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80057ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2bc0      	cmp	r3, #192	; 0xc0
 80057d8:	d02a      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2bc0      	cmp	r3, #192	; 0xc0
 80057de:	d848      	bhi.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d00d      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d842      	bhi.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d011      	beq.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80057f8:	e03b      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80057fa:	f7fe f8b1 	bl	8003960 <HAL_RCC_GetPCLK3Freq>
 80057fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005800:	e3f1      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	d102      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005814:	e3e7      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800581a:	e3e4      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800581c:	f7fd ff56 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005820:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005822:	e3e0      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005824:	46020c00 	.word	0x46020c00
 8005828:	0800853c 	.word	0x0800853c
 800582c:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005830:	4ba3      	ldr	r3, [pc, #652]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b20      	cmp	r3, #32
 800583a:	d117      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800583c:	4ba0      	ldr	r3, [pc, #640]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8005848:	4b9d      	ldr	r3, [pc, #628]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	0e1b      	lsrs	r3, r3, #24
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	e006      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8005854:	4b9a      	ldr	r3, [pc, #616]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	0e1b      	lsrs	r3, r3, #24
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	4a98      	ldr	r2, [pc, #608]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800586a:	e3bc      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005870:	e3b9      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005876:	e3b6      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005880:	430b      	orrs	r3, r1
 8005882:	d147      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005884:	4b8e      	ldr	r3, [pc, #568]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800588a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800588e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005896:	f7fe f83b 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 800589a:	6378      	str	r0, [r7, #52]	; 0x34
 800589c:	e3a3      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a4:	d103      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fd ff11 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80058aa:	6378      	str	r0, [r7, #52]	; 0x34
 80058ac:	e39b      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80058ae:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ba:	d106      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c2:	d102      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80058c4:	4b80      	ldr	r3, [pc, #512]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
 80058c8:	e38d      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80058ca:	4b7d      	ldr	r3, [pc, #500]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d11b      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058dc:	d117      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058de:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80058ea:	4b75      	ldr	r3, [pc, #468]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0e1b      	lsrs	r3, r3, #24
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	e006      	b.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80058f6:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	0e1b      	lsrs	r3, r3, #24
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	4a6f      	ldr	r2, [pc, #444]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
 800590c:	e36b      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	e368      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005918:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800591c:	430b      	orrs	r3, r1
 800591e:	d164      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005920:	4b67      	ldr	r3, [pc, #412]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	2b00      	cmp	r3, #0
 8005930:	d120      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005932:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b20      	cmp	r3, #32
 800593c:	d117      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800593e:	4b60      	ldr	r3, [pc, #384]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800594a:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0e1b      	lsrs	r3, r3, #24
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005956:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	4a57      	ldr	r2, [pc, #348]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
 800596c:	e33b      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
 8005972:	e338      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005974:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800597a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005982:	d112      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598a:	d10e      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800598c:	4b4c      	ldr	r3, [pc, #304]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800598e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800599a:	d102      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 800599c:	23fa      	movs	r3, #250	; 0xfa
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059a0:	e321      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80059a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80059a6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059a8:	e31d      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80059aa:	4b45      	ldr	r3, [pc, #276]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b6:	d106      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059be:	d102      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	e30f      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80059c6:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d107      	bne.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059da:	d103      	bne.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 80059dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
 80059e2:	e300      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	e2fd      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80059ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ee:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80059f2:	430b      	orrs	r3, r1
 80059f4:	d16a      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80059f6:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d120      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a08:	4b2d      	ldr	r3, [pc, #180]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d117      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a14:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	0e1b      	lsrs	r3, r3, #24
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005a2c:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
 8005a42:	e2d0      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
 8005a48:	e2cd      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a58:	d112      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d10e      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a62:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a70:	d102      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005a72:	23fa      	movs	r3, #250	; 0xfa
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a76:	e2b6      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a7e:	e2b2      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a94:	d102      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9a:	e2a4      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d107      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ab0:	d103      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab8:	e295      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	e292      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005ac0:	46020c00 	.word	0x46020c00
 8005ac4:	0800853c 	.word	0x0800853c
 8005ac8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	d147      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ad8:	4b9a      	ldr	r3, [pc, #616]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ade:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7fd ff11 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8005aee:	6378      	str	r0, [r7, #52]	; 0x34
 8005af0:	e279      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005af2:	4b94      	ldr	r3, [pc, #592]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b00:	d112      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b08:	d10e      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b0a:	4b8e      	ldr	r3, [pc, #568]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b18:	d102      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005b1a:	23fa      	movs	r3, #250	; 0xfa
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b1e:	e262      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005b20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b26:	e25e      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005b28:	4b86      	ldr	r3, [pc, #536]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b34:	d106      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b3c:	d102      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005b3e:	4b82      	ldr	r3, [pc, #520]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	e250      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005b44:	4b7f      	ldr	r3, [pc, #508]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b58:	d103      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b60:	e241      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	e23e      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005b70:	430b      	orrs	r3, r1
 8005b72:	d12d      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005b74:	4b73      	ldr	r3, [pc, #460]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005b80:	4b70      	ldr	r3, [pc, #448]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8c:	d105      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005b94:	4b6c      	ldr	r3, [pc, #432]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
 8005b98:	e225      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fcb2 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb0:	e219      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb8:	d107      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bba:	f107 0318 	add.w	r3, r7, #24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fe0e 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc8:	e20d      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bce:	e20a      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	d156      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005bdc:	4b59      	ldr	r3, [pc, #356]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005be2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bee:	d028      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bf6:	d845      	bhi.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfe:	d013      	beq.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c06:	d83d      	bhi.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c14:	d004      	beq.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005c16:	e035      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fd fe8e 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c1e:	e1e2      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c20:	f7fd fd54 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005c24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c26:	e1de      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c28:	4b46      	ldr	r3, [pc, #280]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c34:	d102      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005c36:	4b44      	ldr	r3, [pc, #272]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c3a:	e1d4      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c40:	e1d1      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c42:	4b40      	ldr	r3, [pc, #256]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d117      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c4e:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005c5a:	4b3a      	ldr	r3, [pc, #232]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0e1b      	lsrs	r3, r3, #24
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005c66:	4b37      	ldr	r3, [pc, #220]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	0e1b      	lsrs	r3, r3, #24
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	4a35      	ldr	r2, [pc, #212]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c7c:	e1b3      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c82:	e1b0      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c88:	e1ad      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8e:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005c92:	430b      	orrs	r3, r1
 8005c94:	d15c      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005c96:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ca8:	d028      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cb0:	d845      	bhi.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb8:	d013      	beq.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc0:	d83d      	bhi.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cce:	d004      	beq.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005cd0:	e035      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005cd2:	f7fd fe1d 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8005cd6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cd8:	e185      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fd fcf7 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005cde:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ce0:	e181      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ce2:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cee:	d102      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cf4:	e177      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cfa:	e174      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d117      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	0e1b      	lsrs	r3, r3, #24
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	e006      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	0e1b      	lsrs	r3, r3, #24
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d36:	e156      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d3c:	e153      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d42:	e150      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005d44:	46020c00 	.word	0x46020c00
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	0800853c 	.word	0x0800853c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d54:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	d176      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005d5c:	4ba4      	ldr	r3, [pc, #656]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d62:	f003 0318 	and.w	r3, r3, #24
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2b18      	cmp	r3, #24
 8005d6c:	d86a      	bhi.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005e45 	.word	0x08005e45
 8005d7c:	08005e45 	.word	0x08005e45
 8005d80:	08005e45 	.word	0x08005e45
 8005d84:	08005e45 	.word	0x08005e45
 8005d88:	08005e45 	.word	0x08005e45
 8005d8c:	08005e45 	.word	0x08005e45
 8005d90:	08005e45 	.word	0x08005e45
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005e45 	.word	0x08005e45
 8005d9c:	08005e45 	.word	0x08005e45
 8005da0:	08005e45 	.word	0x08005e45
 8005da4:	08005e45 	.word	0x08005e45
 8005da8:	08005e45 	.word	0x08005e45
 8005dac:	08005e45 	.word	0x08005e45
 8005db0:	08005e45 	.word	0x08005e45
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005e45 	.word	0x08005e45
 8005dbc:	08005e45 	.word	0x08005e45
 8005dc0:	08005e45 	.word	0x08005e45
 8005dc4:	08005e45 	.word	0x08005e45
 8005dc8:	08005e45 	.word	0x08005e45
 8005dcc:	08005e45 	.word	0x08005e45
 8005dd0:	08005e45 	.word	0x08005e45
 8005dd4:	08005e03 	.word	0x08005e03
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005dd8:	f7fd fdc2 	bl	8003960 <HAL_RCC_GetPCLK3Freq>
 8005ddc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dde:	e102      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005de0:	f7fd fc74 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005de4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005de6:	e0fe      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005de8:	4b81      	ldr	r3, [pc, #516]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d102      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005df6:	4b7f      	ldr	r3, [pc, #508]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dfa:	e0f4      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e00:	e0f1      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e02:	4b7b      	ldr	r3, [pc, #492]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d117      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e0e:	4b78      	ldr	r3, [pc, #480]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005e1a:	4b75      	ldr	r3, [pc, #468]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005e26:	4b72      	ldr	r3, [pc, #456]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	0e1b      	lsrs	r3, r3, #24
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	4a70      	ldr	r2, [pc, #448]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e3c:	e0d3      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e42:	e0d0      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e48:	e0cd      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005e52:	430b      	orrs	r3, r1
 8005e54:	d155      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e56:	4b66      	ldr	r3, [pc, #408]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e68:	d013      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e70:	d844      	bhi.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e78:	d013      	beq.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e80:	d83c      	bhi.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d014      	beq.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8e:	d014      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005e90:	e034      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e92:	f107 0318 	add.w	r3, r7, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fca2 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ea0:	e0a1      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fb32 	bl	8004510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb0:	e099      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005eb2:	f7fd fc0b 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8005eb6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005eb8:	e095      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005eba:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d117      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ec6:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005ed2:	4b47      	ldr	r3, [pc, #284]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	0e1b      	lsrs	r3, r3, #24
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	e006      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005ede:	4b44      	ldr	r3, [pc, #272]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	0e1b      	lsrs	r3, r3, #24
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	4a42      	ldr	r2, [pc, #264]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ef4:	e077      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005efa:	e074      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f00:	e071      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f06:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	d131      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005f0e:	4b38      	ldr	r3, [pc, #224]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005f1a:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d106      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
 8005f34:	e057      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005f36:	4b2e      	ldr	r3, [pc, #184]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f44:	d112      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4c:	d10e      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f4e:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f5c:	d102      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005f5e:	23fa      	movs	r3, #250	; 0xfa
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f62:	e040      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f64:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f6a:	e03c      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f70:	e039      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f76:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	d131      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f8a:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa2:	e020      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005fa4:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005fba:	4b11      	ldr	r3, [pc, #68]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	e012      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fda:	e004      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe0:	e001      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3738      	adds	r7, #56	; 0x38
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	46020c00 	.word	0x46020c00
 8005ff4:	00f42400 	.word	0x00f42400
 8005ff8:	0800853c 	.word	0x0800853c
 8005ffc:	02dc6c00 	.word	0x02dc6c00
 8006000:	016e3600 	.word	0x016e3600

08006004 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800600c:	4b47      	ldr	r3, [pc, #284]	; (800612c <RCCEx_PLL2_Config+0x128>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a46      	ldr	r2, [pc, #280]	; (800612c <RCCEx_PLL2_Config+0x128>)
 8006012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006016:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006018:	f7fb fde0 	bl	8001bdc <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800601e:	e008      	b.n	8006032 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006020:	f7fb fddc 	bl	8001bdc <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e077      	b.n	8006122 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006032:	4b3e      	ldr	r3, [pc, #248]	; (800612c <RCCEx_PLL2_Config+0x128>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800603e:	4b3b      	ldr	r3, [pc, #236]	; (800612c <RCCEx_PLL2_Config+0x128>)
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6811      	ldr	r1, [r2, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6852      	ldr	r2, [r2, #4]
 8006052:	3a01      	subs	r2, #1
 8006054:	0212      	lsls	r2, r2, #8
 8006056:	430a      	orrs	r2, r1
 8006058:	4934      	ldr	r1, [pc, #208]	; (800612c <RCCEx_PLL2_Config+0x128>)
 800605a:	4313      	orrs	r3, r2
 800605c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800605e:	4b33      	ldr	r3, [pc, #204]	; (800612c <RCCEx_PLL2_Config+0x128>)
 8006060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006062:	4b33      	ldr	r3, [pc, #204]	; (8006130 <RCCEx_PLL2_Config+0x12c>)
 8006064:	4013      	ands	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6892      	ldr	r2, [r2, #8]
 800606a:	3a01      	subs	r2, #1
 800606c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68d2      	ldr	r2, [r2, #12]
 8006074:	3a01      	subs	r2, #1
 8006076:	0252      	lsls	r2, r2, #9
 8006078:	b292      	uxth	r2, r2
 800607a:	4311      	orrs	r1, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6912      	ldr	r2, [r2, #16]
 8006080:	3a01      	subs	r2, #1
 8006082:	0412      	lsls	r2, r2, #16
 8006084:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006088:	4311      	orrs	r1, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6952      	ldr	r2, [r2, #20]
 800608e:	3a01      	subs	r2, #1
 8006090:	0612      	lsls	r2, r2, #24
 8006092:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006096:	430a      	orrs	r2, r1
 8006098:	4924      	ldr	r1, [pc, #144]	; (800612c <RCCEx_PLL2_Config+0x128>)
 800609a:	4313      	orrs	r3, r2
 800609c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800609e:	4b23      	ldr	r3, [pc, #140]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f023 020c 	bic.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	4920      	ldr	r1, [pc, #128]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	491c      	ldr	r1, [pc, #112]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80060be:	4b1b      	ldr	r3, [pc, #108]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	4a1a      	ldr	r2, [pc, #104]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060c4:	f023 0310 	bic.w	r3, r3, #16
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	69d2      	ldr	r2, [r2, #28]
 80060da:	00d2      	lsls	r2, r2, #3
 80060dc:	4913      	ldr	r1, [pc, #76]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	4a11      	ldr	r2, [pc, #68]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060e8:	f043 0310 	orr.w	r3, r3, #16
 80060ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a0e      	ldr	r2, [pc, #56]	; (800612c <RCCEx_PLL2_Config+0x128>)
 80060f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060fa:	f7fb fd6f 	bl	8001bdc <HAL_GetTick>
 80060fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006100:	e008      	b.n	8006114 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006102:	f7fb fd6b 	bl	8001bdc <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e006      	b.n	8006122 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <RCCEx_PLL2_Config+0x128>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0f0      	beq.n	8006102 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0

}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	46020c00 	.word	0x46020c00
 8006130:	80800000 	.word	0x80800000

08006134 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800613c:	4b47      	ldr	r3, [pc, #284]	; (800625c <RCCEx_PLL3_Config+0x128>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a46      	ldr	r2, [pc, #280]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006146:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006148:	f7fb fd48 	bl	8001bdc <HAL_GetTick>
 800614c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800614e:	e008      	b.n	8006162 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006150:	f7fb fd44 	bl	8001bdc <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e077      	b.n	8006252 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006162:	4b3e      	ldr	r3, [pc, #248]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800616e:	4b3b      	ldr	r3, [pc, #236]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6852      	ldr	r2, [r2, #4]
 8006182:	3a01      	subs	r2, #1
 8006184:	0212      	lsls	r2, r2, #8
 8006186:	430a      	orrs	r2, r1
 8006188:	4934      	ldr	r1, [pc, #208]	; (800625c <RCCEx_PLL3_Config+0x128>)
 800618a:	4313      	orrs	r3, r2
 800618c:	630b      	str	r3, [r1, #48]	; 0x30
 800618e:	4b33      	ldr	r3, [pc, #204]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006192:	4b33      	ldr	r3, [pc, #204]	; (8006260 <RCCEx_PLL3_Config+0x12c>)
 8006194:	4013      	ands	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6892      	ldr	r2, [r2, #8]
 800619a:	3a01      	subs	r2, #1
 800619c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68d2      	ldr	r2, [r2, #12]
 80061a4:	3a01      	subs	r2, #1
 80061a6:	0252      	lsls	r2, r2, #9
 80061a8:	b292      	uxth	r2, r2
 80061aa:	4311      	orrs	r1, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6912      	ldr	r2, [r2, #16]
 80061b0:	3a01      	subs	r2, #1
 80061b2:	0412      	lsls	r2, r2, #16
 80061b4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6952      	ldr	r2, [r2, #20]
 80061be:	3a01      	subs	r2, #1
 80061c0:	0612      	lsls	r2, r2, #24
 80061c2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80061c6:	430a      	orrs	r2, r1
 80061c8:	4924      	ldr	r1, [pc, #144]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80061ce:	4b23      	ldr	r3, [pc, #140]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f023 020c 	bic.w	r2, r3, #12
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	4920      	ldr	r1, [pc, #128]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	491c      	ldr	r1, [pc, #112]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a1a      	ldr	r2, [pc, #104]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <RCCEx_PLL3_Config+0x128>)
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	69d2      	ldr	r2, [r2, #28]
 800620a:	00d2      	lsls	r2, r2, #3
 800620c:	4913      	ldr	r1, [pc, #76]	; (800625c <RCCEx_PLL3_Config+0x128>)
 800620e:	4313      	orrs	r3, r2
 8006210:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006212:	4b12      	ldr	r3, [pc, #72]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	4a11      	ldr	r2, [pc, #68]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006218:	f043 0310 	orr.w	r3, r3, #16
 800621c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a0e      	ldr	r2, [pc, #56]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006228:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800622a:	f7fb fcd7 	bl	8001bdc <HAL_GetTick>
 800622e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006230:	e008      	b.n	8006244 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006232:	f7fb fcd3 	bl	8001bdc <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e006      	b.n	8006252 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <RCCEx_PLL3_Config+0x128>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	46020c00 	.word	0x46020c00
 8006260:	80800000 	.word	0x80800000

08006264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e0fb      	b.n	800646e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7f      	ldr	r2, [pc, #508]	; (8006478 <HAL_SPI_Init+0x214>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_SPI_Init+0x26>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7d      	ldr	r2, [pc, #500]	; (800647c <HAL_SPI_Init+0x218>)
 8006286:	4293      	cmp	r3, r2
 8006288:	e000      	b.n	800628c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800628a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a78      	ldr	r2, [pc, #480]	; (8006478 <HAL_SPI_Init+0x214>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d004      	beq.n	80062a6 <HAL_SPI_Init+0x42>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a76      	ldr	r2, [pc, #472]	; (800647c <HAL_SPI_Init+0x218>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d105      	bne.n	80062b2 <HAL_SPI_Init+0x4e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	2b0f      	cmp	r3, #15
 80062ac:	d901      	bls.n	80062b2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e0dd      	b.n	800646e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fbd8 	bl	8006a68 <SPI_GetPacketSize>
 80062b8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6e      	ldr	r2, [pc, #440]	; (8006478 <HAL_SPI_Init+0x214>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_SPI_Init+0x6a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a6c      	ldr	r2, [pc, #432]	; (800647c <HAL_SPI_Init+0x218>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d102      	bne.n	80062d4 <HAL_SPI_Init+0x70>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d816      	bhi.n	8006302 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062d8:	4a69      	ldr	r2, [pc, #420]	; (8006480 <HAL_SPI_Init+0x21c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00e      	beq.n	80062fc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a68      	ldr	r2, [pc, #416]	; (8006484 <HAL_SPI_Init+0x220>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_SPI_Init+0x98>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a66      	ldr	r2, [pc, #408]	; (8006488 <HAL_SPI_Init+0x224>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_SPI_Init+0x98>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a65      	ldr	r2, [pc, #404]	; (800648c <HAL_SPI_Init+0x228>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d104      	bne.n	8006306 <HAL_SPI_Init+0xa2>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d901      	bls.n	8006306 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0b3      	b.n	800646e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fb f916 	bl	800154c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006342:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800634c:	d119      	bne.n	8006382 <HAL_SPI_Init+0x11e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006356:	d103      	bne.n	8006360 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800636c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006370:	d107      	bne.n	8006382 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006380:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00f      	beq.n	80063ae <HAL_SPI_Init+0x14a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b06      	cmp	r3, #6
 8006394:	d90b      	bls.n	80063ae <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e007      	b.n	80063be <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69da      	ldr	r2, [r3, #28]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	431a      	orrs	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	ea42 0103 	orr.w	r1, r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642a:	ea42 0103 	orr.w	r1, r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	46002000 	.word	0x46002000
 800647c:	56002000 	.word	0x56002000
 8006480:	40013000 	.word	0x40013000
 8006484:	50013000 	.word	0x50013000
 8006488:	40003800 	.word	0x40003800
 800648c:	50003800 	.word	0x50003800

08006490 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3320      	adds	r3, #32
 80064a6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_SPI_Transmit+0x2a>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e203      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064c2:	f7fb fb8b 	bl	8001bdc <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d007      	beq.n	80064e4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
 80064d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80064e0:	7efb      	ldrb	r3, [r7, #27]
 80064e2:	e1ee      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_Transmit+0x60>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d107      	bne.n	8006500 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80064fc:	7efb      	ldrb	r3, [r7, #27]
 80064fe:	e1e0      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2203      	movs	r2, #3
 8006504:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006550:	d108      	bne.n	8006564 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e009      	b.n	8006578 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006576:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	0c1b      	lsrs	r3, r3, #16
 8006580:	041b      	lsls	r3, r3, #16
 8006582:	88f9      	ldrh	r1, [r7, #6]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	430b      	orrs	r3, r1
 800658a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10c      	bne.n	80065c4 <HAL_SPI_Transmit+0x134>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b2:	d107      	bne.n	80065c4 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b0f      	cmp	r3, #15
 80065ca:	d95b      	bls.n	8006684 <HAL_SPI_Transmit+0x1f4>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a8f      	ldr	r2, [pc, #572]	; (8006810 <HAL_SPI_Transmit+0x380>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d04f      	beq.n	8006676 <HAL_SPI_Transmit+0x1e6>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a8e      	ldr	r2, [pc, #568]	; (8006814 <HAL_SPI_Transmit+0x384>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d04a      	beq.n	8006676 <HAL_SPI_Transmit+0x1e6>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a8c      	ldr	r2, [pc, #560]	; (8006818 <HAL_SPI_Transmit+0x388>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d045      	beq.n	8006676 <HAL_SPI_Transmit+0x1e6>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a8b      	ldr	r2, [pc, #556]	; (800681c <HAL_SPI_Transmit+0x38c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d147      	bne.n	8006684 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80065f4:	e03f      	b.n	8006676 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	d114      	bne.n	800662e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800662c:	e023      	b.n	8006676 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800662e:	f7fb fad5 	bl	8001bdc <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d803      	bhi.n	8006646 <HAL_SPI_Transmit+0x1b6>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006644:	d102      	bne.n	800664c <HAL_SPI_Transmit+0x1bc>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d114      	bne.n	8006676 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f93d 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e125      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1b9      	bne.n	80065f6 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006682:	e0f8      	b.n	8006876 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b07      	cmp	r3, #7
 800668a:	f240 80ed 	bls.w	8006868 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800668e:	e05d      	b.n	800674c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d132      	bne.n	8006704 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d918      	bls.n	80066dc <HAL_SPI_Transmit+0x24c>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c2:	1d1a      	adds	r2, r3, #4
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b02      	subs	r3, #2
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80066da:	e037      	b.n	800674c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006702:	e023      	b.n	800674c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006704:	f7fb fa6a 	bl	8001bdc <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d803      	bhi.n	800671c <HAL_SPI_Transmit+0x28c>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800671a:	d102      	bne.n	8006722 <HAL_SPI_Transmit+0x292>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d114      	bne.n	800674c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f8d2 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006736:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e0ba      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d19b      	bne.n	8006690 <HAL_SPI_Transmit+0x200>
 8006758:	e08d      	b.n	8006876 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d15b      	bne.n	8006820 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b03      	cmp	r3, #3
 8006772:	d918      	bls.n	80067a6 <HAL_SPI_Transmit+0x316>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d914      	bls.n	80067a6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678c:	1d1a      	adds	r2, r3, #4
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b04      	subs	r3, #4
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067a4:	e060      	b.n	8006868 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d917      	bls.n	80067e2 <HAL_SPI_Transmit+0x352>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d013      	beq.n	80067e2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067be:	881a      	ldrh	r2, [r3, #0]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c8:	1c9a      	adds	r2, r3, #2
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b02      	subs	r3, #2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067e0:	e042      	b.n	8006868 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3320      	adds	r3, #32
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800680c:	e02c      	b.n	8006868 <HAL_SPI_Transmit+0x3d8>
 800680e:	bf00      	nop
 8006810:	40013000 	.word	0x40013000
 8006814:	50013000 	.word	0x50013000
 8006818:	40003800 	.word	0x40003800
 800681c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006820:	f7fb f9dc 	bl	8001bdc <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d803      	bhi.n	8006838 <HAL_SPI_Transmit+0x3a8>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006836:	d102      	bne.n	800683e <HAL_SPI_Transmit+0x3ae>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d114      	bne.n	8006868 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 f844 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e02c      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f af72 	bne.w	800675a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2200      	movs	r2, #0
 800687e:	2108      	movs	r1, #8
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f8c3 	bl	8006a0c <SPI_WaitOnFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f815 	bl	80068cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 80068c0:	7efb      	ldrb	r3, [r7, #27]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0208 	orr.w	r2, r2, #8
 80068ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0210 	orr.w	r2, r2, #16
 80068fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800692e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b04      	cmp	r3, #4
 800693a:	d014      	beq.n	8006966 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00f      	beq.n	8006966 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800694c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0220 	orr.w	r2, r2, #32
 8006964:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d014      	beq.n	800699c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006982:	f043 0204 	orr.w	r2, r3, #4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800699a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00f      	beq.n	80069c6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ac:	f043 0201 	orr.w	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00f      	beq.n	80069f0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a1c:	e010      	b.n	8006a40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1e:	f7fb f8dd 	bl	8001bdc <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d803      	bhi.n	8006a36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a34:	d102      	bne.n	8006a3c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e00f      	b.n	8006a60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d0df      	beq.n	8006a1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3307      	adds	r3, #7
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d12e      	bne.n	8006b12 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e028      	b.n	8006b14 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0201 	bic.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006aee:	ea42 0103 	orr.w	r1, r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e049      	b.n	8006bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fa fdf8 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 f8d6 	bl	8006d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d001      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e072      	b.n	8006cce <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a35      	ldr	r2, [pc, #212]	; (8006cdc <HAL_TIM_Base_Start_IT+0x10c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d040      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a34      	ldr	r2, [pc, #208]	; (8006ce0 <HAL_TIM_Base_Start_IT+0x110>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d03b      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1c:	d036      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c26:	d031      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_TIM_Base_Start_IT+0x114>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02c      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_TIM_Base_Start_IT+0x118>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d027      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_TIM_Base_Start_IT+0x11c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d022      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <HAL_TIM_Base_Start_IT+0x120>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d01d      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <HAL_TIM_Base_Start_IT+0x124>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <HAL_TIM_Base_Start_IT+0x128>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <HAL_TIM_Base_Start_IT+0x12c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <HAL_TIM_Base_Start_IT+0x130>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_TIM_Base_Start_IT+0x134>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0xbc>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a20      	ldr	r2, [pc, #128]	; (8006d08 <HAL_TIM_Base_Start_IT+0x138>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d115      	bne.n	8006cb8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	4b1e      	ldr	r3, [pc, #120]	; (8006d0c <HAL_TIM_Base_Start_IT+0x13c>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b06      	cmp	r3, #6
 8006c9c:	d015      	beq.n	8006cca <HAL_TIM_Base_Start_IT+0xfa>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca4:	d011      	beq.n	8006cca <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0201 	orr.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb6:	e008      	b.n	8006cca <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e000      	b.n	8006ccc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	50012c00 	.word	0x50012c00
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	50000400 	.word	0x50000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	50000800 	.word	0x50000800
 8006cf4:	40000c00 	.word	0x40000c00
 8006cf8:	50000c00 	.word	0x50000c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	50013400 	.word	0x50013400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	50014000 	.word	0x50014000
 8006d0c:	00010007 	.word	0x00010007

08006d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a68      	ldr	r2, [pc, #416]	; (8006ec4 <TIM_Base_SetConfig+0x1b4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d02b      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a67      	ldr	r2, [pc, #412]	; (8006ec8 <TIM_Base_SetConfig+0x1b8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d027      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d36:	d023      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d3e:	d01f      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a62      	ldr	r2, [pc, #392]	; (8006ecc <TIM_Base_SetConfig+0x1bc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d01b      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a61      	ldr	r2, [pc, #388]	; (8006ed0 <TIM_Base_SetConfig+0x1c0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d017      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a60      	ldr	r2, [pc, #384]	; (8006ed4 <TIM_Base_SetConfig+0x1c4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a5f      	ldr	r2, [pc, #380]	; (8006ed8 <TIM_Base_SetConfig+0x1c8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00f      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a5e      	ldr	r2, [pc, #376]	; (8006edc <TIM_Base_SetConfig+0x1cc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a5d      	ldr	r2, [pc, #372]	; (8006ee0 <TIM_Base_SetConfig+0x1d0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a5c      	ldr	r2, [pc, #368]	; (8006ee4 <TIM_Base_SetConfig+0x1d4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0x70>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a5b      	ldr	r2, [pc, #364]	; (8006ee8 <TIM_Base_SetConfig+0x1d8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d108      	bne.n	8006d92 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a4b      	ldr	r2, [pc, #300]	; (8006ec4 <TIM_Base_SetConfig+0x1b4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d043      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a4a      	ldr	r2, [pc, #296]	; (8006ec8 <TIM_Base_SetConfig+0x1b8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d03f      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da8:	d03b      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db0:	d037      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a45      	ldr	r2, [pc, #276]	; (8006ecc <TIM_Base_SetConfig+0x1bc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d033      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a44      	ldr	r2, [pc, #272]	; (8006ed0 <TIM_Base_SetConfig+0x1c0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d02f      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a43      	ldr	r2, [pc, #268]	; (8006ed4 <TIM_Base_SetConfig+0x1c4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02b      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a42      	ldr	r2, [pc, #264]	; (8006ed8 <TIM_Base_SetConfig+0x1c8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a41      	ldr	r2, [pc, #260]	; (8006edc <TIM_Base_SetConfig+0x1cc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d023      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a40      	ldr	r2, [pc, #256]	; (8006ee0 <TIM_Base_SetConfig+0x1d0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01f      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a3f      	ldr	r2, [pc, #252]	; (8006ee4 <TIM_Base_SetConfig+0x1d4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01b      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a3e      	ldr	r2, [pc, #248]	; (8006ee8 <TIM_Base_SetConfig+0x1d8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d017      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a3d      	ldr	r2, [pc, #244]	; (8006eec <TIM_Base_SetConfig+0x1dc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a3c      	ldr	r2, [pc, #240]	; (8006ef0 <TIM_Base_SetConfig+0x1e0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00f      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a3b      	ldr	r2, [pc, #236]	; (8006ef4 <TIM_Base_SetConfig+0x1e4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a3a      	ldr	r2, [pc, #232]	; (8006ef8 <TIM_Base_SetConfig+0x1e8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a39      	ldr	r2, [pc, #228]	; (8006efc <TIM_Base_SetConfig+0x1ec>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_Base_SetConfig+0x112>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a38      	ldr	r2, [pc, #224]	; (8006f00 <TIM_Base_SetConfig+0x1f0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d108      	bne.n	8006e34 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <TIM_Base_SetConfig+0x1b4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d023      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a19      	ldr	r2, [pc, #100]	; (8006ec8 <TIM_Base_SetConfig+0x1b8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d01f      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <TIM_Base_SetConfig+0x1d4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d01b      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1d      	ldr	r2, [pc, #116]	; (8006ee8 <TIM_Base_SetConfig+0x1d8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d017      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1c      	ldr	r2, [pc, #112]	; (8006eec <TIM_Base_SetConfig+0x1dc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a1b      	ldr	r2, [pc, #108]	; (8006ef0 <TIM_Base_SetConfig+0x1e0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00f      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <TIM_Base_SetConfig+0x1e4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00b      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <TIM_Base_SetConfig+0x1e8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d007      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a18      	ldr	r2, [pc, #96]	; (8006efc <TIM_Base_SetConfig+0x1ec>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_Base_SetConfig+0x198>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <TIM_Base_SetConfig+0x1f0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d103      	bne.n	8006eb0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	615a      	str	r2, [r3, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	50012c00 	.word	0x50012c00
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	50000400 	.word	0x50000400
 8006ed4:	40000800 	.word	0x40000800
 8006ed8:	50000800 	.word	0x50000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	50000c00 	.word	0x50000c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	50013400 	.word	0x50013400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	50014000 	.word	0x50014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	50014400 	.word	0x50014400
 8006efc:	40014800 	.word	0x40014800
 8006f00:	50014800 	.word	0x50014800

08006f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e042      	b.n	8006f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fa fc29 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2224      	movs	r2, #36	; 0x24
 8006f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f8ba 	bl	80070c0 <UART_SetConfig>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e022      	b.n	8006f9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa46 	bl	80073f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 facd 	bl	8007534 <UART_CheckIdleState>
 8006f9a:	4603      	mov	r3, r0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d17b      	bne.n	80070b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_Transmit+0x26>
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e074      	b.n	80070b8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2221      	movs	r2, #33	; 0x21
 8006fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fde:	f7fa fdfd 	bl	8001bdc <HAL_GetTick>
 8006fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d108      	bne.n	8007010 <HAL_UART_Transmit+0x6c>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e003      	b.n	8007018 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007018:	e030      	b.n	800707c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2200      	movs	r2, #0
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 fb2f 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e03d      	b.n	80070b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3302      	adds	r3, #2
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e007      	b.n	800706a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1c8      	bne.n	800701a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	2140      	movs	r1, #64	; 0x40
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 faf8 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e006      	b.n	80070b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070c4:	b094      	sub	sp, #80	; 0x50
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4b9b      	ldr	r3, [pc, #620]	; (8007344 <UART_SetConfig+0x284>)
 80070d6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4994      	ldr	r1, [pc, #592]	; (8007348 <UART_SetConfig+0x288>)
 80070f8:	4019      	ands	r1, r3
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007100:	430b      	orrs	r3, r1
 8007102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	68d9      	ldr	r1, [r3, #12]
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	ea40 0301 	orr.w	r3, r0, r1
 800711a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b87      	ldr	r3, [pc, #540]	; (8007344 <UART_SetConfig+0x284>)
 8007128:	429a      	cmp	r2, r3
 800712a:	d009      	beq.n	8007140 <UART_SetConfig+0x80>
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b86      	ldr	r3, [pc, #536]	; (800734c <UART_SetConfig+0x28c>)
 8007132:	429a      	cmp	r2, r3
 8007134:	d004      	beq.n	8007140 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713c:	4313      	orrs	r3, r2
 800713e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800714a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007154:	430b      	orrs	r3, r1
 8007156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	f023 000f 	bic.w	r0, r3, #15
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	ea40 0301 	orr.w	r3, r0, r1
 800716e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b76      	ldr	r3, [pc, #472]	; (8007350 <UART_SetConfig+0x290>)
 8007176:	429a      	cmp	r2, r3
 8007178:	d102      	bne.n	8007180 <UART_SetConfig+0xc0>
 800717a:	2301      	movs	r3, #1
 800717c:	64bb      	str	r3, [r7, #72]	; 0x48
 800717e:	e021      	b.n	80071c4 <UART_SetConfig+0x104>
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4b73      	ldr	r3, [pc, #460]	; (8007354 <UART_SetConfig+0x294>)
 8007186:	429a      	cmp	r2, r3
 8007188:	d102      	bne.n	8007190 <UART_SetConfig+0xd0>
 800718a:	2304      	movs	r3, #4
 800718c:	64bb      	str	r3, [r7, #72]	; 0x48
 800718e:	e019      	b.n	80071c4 <UART_SetConfig+0x104>
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b70      	ldr	r3, [pc, #448]	; (8007358 <UART_SetConfig+0x298>)
 8007196:	429a      	cmp	r2, r3
 8007198:	d102      	bne.n	80071a0 <UART_SetConfig+0xe0>
 800719a:	2308      	movs	r3, #8
 800719c:	64bb      	str	r3, [r7, #72]	; 0x48
 800719e:	e011      	b.n	80071c4 <UART_SetConfig+0x104>
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4b6d      	ldr	r3, [pc, #436]	; (800735c <UART_SetConfig+0x29c>)
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d102      	bne.n	80071b0 <UART_SetConfig+0xf0>
 80071aa:	2310      	movs	r3, #16
 80071ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ae:	e009      	b.n	80071c4 <UART_SetConfig+0x104>
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	4b63      	ldr	r3, [pc, #396]	; (8007344 <UART_SetConfig+0x284>)
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d102      	bne.n	80071c0 <UART_SetConfig+0x100>
 80071ba:	2320      	movs	r3, #32
 80071bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071be:	e001      	b.n	80071c4 <UART_SetConfig+0x104>
 80071c0:	2300      	movs	r3, #0
 80071c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b5e      	ldr	r3, [pc, #376]	; (8007344 <UART_SetConfig+0x284>)
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d004      	beq.n	80071d8 <UART_SetConfig+0x118>
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b5e      	ldr	r3, [pc, #376]	; (800734c <UART_SetConfig+0x28c>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d172      	bne.n	80072be <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071da:	2200      	movs	r2, #0
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	627a      	str	r2, [r7, #36]	; 0x24
 80071e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80071e4:	f7fd fdcc 	bl	8004d80 <HAL_RCCEx_GetPeriphCLKFreq>
 80071e8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80e7 	beq.w	80073c0 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	4a5a      	ldr	r2, [pc, #360]	; (8007360 <UART_SetConfig+0x2a0>)
 80071f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007200:	fbb3 f3f2 	udiv	r3, r3, r2
 8007204:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007212:	429a      	cmp	r2, r3
 8007214:	d305      	bcc.n	8007222 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800721c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800721e:	429a      	cmp	r2, r3
 8007220:	d903      	bls.n	800722a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007228:	e048      	b.n	80072bc <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800722a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722c:	2200      	movs	r2, #0
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	61fa      	str	r2, [r7, #28]
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	4a4a      	ldr	r2, [pc, #296]	; (8007360 <UART_SetConfig+0x2a0>)
 8007238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723c:	b29b      	uxth	r3, r3
 800723e:	2200      	movs	r2, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	617a      	str	r2, [r7, #20]
 8007244:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800724c:	f7f9 f814 	bl	8000278 <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4610      	mov	r0, r2
 8007256:	4619      	mov	r1, r3
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	020b      	lsls	r3, r1, #8
 8007262:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007266:	0202      	lsls	r2, r0, #8
 8007268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800726a:	6849      	ldr	r1, [r1, #4]
 800726c:	0849      	lsrs	r1, r1, #1
 800726e:	2000      	movs	r0, #0
 8007270:	460c      	mov	r4, r1
 8007272:	4605      	mov	r5, r0
 8007274:	eb12 0804 	adds.w	r8, r2, r4
 8007278:	eb43 0905 	adc.w	r9, r3, r5
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	60fa      	str	r2, [r7, #12]
 8007286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800728a:	4640      	mov	r0, r8
 800728c:	4649      	mov	r1, r9
 800728e:	f7f8 fff3 	bl	8000278 <__aeabi_uldivmod>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4613      	mov	r3, r2
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800729a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a0:	d308      	bcc.n	80072b4 <UART_SetConfig+0x1f4>
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a8:	d204      	bcs.n	80072b4 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072b0:	60da      	str	r2, [r3, #12]
 80072b2:	e003      	b.n	80072bc <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80072ba:	e081      	b.n	80073c0 <UART_SetConfig+0x300>
 80072bc:	e080      	b.n	80073c0 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c6:	d14d      	bne.n	8007364 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ca:	2200      	movs	r2, #0
 80072cc:	603b      	str	r3, [r7, #0]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072d4:	f7fd fd54 	bl	8004d80 <HAL_RCCEx_GetPeriphCLKFreq>
 80072d8:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d06f      	beq.n	80073c0 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <UART_SetConfig+0x2a0>)
 80072e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f2:	005a      	lsls	r2, r3, #1
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	085b      	lsrs	r3, r3, #1
 80072fa:	441a      	add	r2, r3
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	fbb2 f3f3 	udiv	r3, r2, r3
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	2b0f      	cmp	r3, #15
 800730a:	d916      	bls.n	800733a <UART_SetConfig+0x27a>
 800730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007312:	d212      	bcs.n	800733a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007316:	b29b      	uxth	r3, r3
 8007318:	f023 030f 	bic.w	r3, r3, #15
 800731c:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	b29b      	uxth	r3, r3
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	b29a      	uxth	r2, r3
 800732a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800732c:	4313      	orrs	r3, r2
 800732e:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007336:	60da      	str	r2, [r3, #12]
 8007338:	e042      	b.n	80073c0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007340:	e03e      	b.n	80073c0 <UART_SetConfig+0x300>
 8007342:	bf00      	nop
 8007344:	46002400 	.word	0x46002400
 8007348:	cfff69f3 	.word	0xcfff69f3
 800734c:	56002400 	.word	0x56002400
 8007350:	40013800 	.word	0x40013800
 8007354:	40004800 	.word	0x40004800
 8007358:	40004c00 	.word	0x40004c00
 800735c:	40005000 	.word	0x40005000
 8007360:	080085fc 	.word	0x080085fc
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007366:	2200      	movs	r2, #0
 8007368:	469a      	mov	sl, r3
 800736a:	4693      	mov	fp, r2
 800736c:	4650      	mov	r0, sl
 800736e:	4659      	mov	r1, fp
 8007370:	f7fd fd06 	bl	8004d80 <HAL_RCCEx_GetPeriphCLKFreq>
 8007374:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d021      	beq.n	80073c0 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	4a1a      	ldr	r2, [pc, #104]	; (80073ec <UART_SetConfig+0x32c>)
 8007382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007386:	461a      	mov	r2, r3
 8007388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738a:	fbb3 f2f2 	udiv	r2, r3, r2
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	441a      	add	r2, r3
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d909      	bls.n	80073ba <UART_SetConfig+0x2fa>
 80073a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ac:	d205      	bcs.n	80073ba <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60da      	str	r2, [r3, #12]
 80073b8:	e002      	b.n	80073c0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2201      	movs	r2, #1
 80073c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	2201      	movs	r2, #1
 80073cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	2200      	movs	r2, #0
 80073d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2200      	movs	r2, #0
 80073da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3750      	adds	r7, #80	; 0x50
 80073e4:	46bd      	mov	sp, r7
 80073e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ea:	bf00      	nop
 80073ec:	080085fc 	.word	0x080085fc

080073f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ee:	d10a      	bne.n	8007506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b098      	sub	sp, #96	; 0x60
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007544:	f7fa fb4a 	bl	8001bdc <HAL_GetTick>
 8007548:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d12f      	bne.n	80075b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007560:	2200      	movs	r2, #0
 8007562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f88e 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d022      	beq.n	80075b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007586:	653b      	str	r3, [r7, #80]	; 0x50
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007590:	647b      	str	r3, [r7, #68]	; 0x44
 8007592:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800759e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e6      	bne.n	8007572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e063      	b.n	8007680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d149      	bne.n	800765a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ce:	2200      	movs	r2, #0
 80075d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f857 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d03c      	beq.n	800765a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	623b      	str	r3, [r7, #32]
   return(result);
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007600:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e6      	bne.n	80075e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	60fb      	str	r3, [r7, #12]
   return(result);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	64bb      	str	r3, [r7, #72]	; 0x48
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007632:	61fa      	str	r2, [r7, #28]
 8007634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	69b9      	ldr	r1, [r7, #24]
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	617b      	str	r3, [r7, #20]
   return(result);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2220      	movs	r2, #32
 800764a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e012      	b.n	8007680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3758      	adds	r7, #88	; 0x58
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007698:	e049      	b.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a0:	d045      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a2:	f7fa fa9b 	bl	8001bdc <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d302      	bcc.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e048      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d031      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d110      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2208      	movs	r2, #8
 80076de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f838 	bl	8007756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2208      	movs	r2, #8
 80076ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e029      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007708:	d111      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f81e 	bl	8007756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e00f      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d0a6      	beq.n	800769a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007756:	b480      	push	{r7}
 8007758:	b095      	sub	sp, #84	; 0x54
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777c:	643b      	str	r3, [r7, #64]	; 0x40
 800777e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e3      	bne.n	8007790 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d118      	bne.n	8007802 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f023 0310 	bic.w	r3, r3, #16
 80077e4:	647b      	str	r3, [r7, #68]	; 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	613b      	str	r3, [r7, #16]
   return(result);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e6      	bne.n	80077d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007816:	bf00      	nop
 8007818:	3754      	adds	r7, #84	; 0x54
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_UARTEx_DisableFifoMode+0x16>
 8007834:	2302      	movs	r3, #2
 8007836:	e027      	b.n	8007888 <HAL_UARTEx_DisableFifoMode+0x66>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2224      	movs	r2, #36	; 0x24
 8007844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007866:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e02d      	b.n	8007908 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2224      	movs	r2, #36	; 0x24
 80078b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f84f 	bl	800798c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007924:	2302      	movs	r3, #2
 8007926:	e02d      	b.n	8007984 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2224      	movs	r2, #36	; 0x24
 8007934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f811 	bl	800798c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007998:	2b00      	cmp	r3, #0
 800799a:	d108      	bne.n	80079ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079ac:	e031      	b.n	8007a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ae:	2308      	movs	r3, #8
 80079b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079b2:	2308      	movs	r3, #8
 80079b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	0e5b      	lsrs	r3, r3, #25
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	0f5b      	lsrs	r3, r3, #29
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	7b3a      	ldrb	r2, [r7, #12]
 80079da:	4911      	ldr	r1, [pc, #68]	; (8007a20 <UARTEx_SetNbDataToProcess+0x94>)
 80079dc:	5c8a      	ldrb	r2, [r1, r2]
 80079de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079e2:	7b3a      	ldrb	r2, [r7, #12]
 80079e4:	490f      	ldr	r1, [pc, #60]	; (8007a24 <UARTEx_SetNbDataToProcess+0x98>)
 80079e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	7b7a      	ldrb	r2, [r7, #13]
 80079f8:	4909      	ldr	r1, [pc, #36]	; (8007a20 <UARTEx_SetNbDataToProcess+0x94>)
 80079fa:	5c8a      	ldrb	r2, [r1, r2]
 80079fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a00:	7b7a      	ldrb	r2, [r7, #13]
 8007a02:	4908      	ldr	r1, [pc, #32]	; (8007a24 <UARTEx_SetNbDataToProcess+0x98>)
 8007a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	08008614 	.word	0x08008614
 8007a24:	0800861c 	.word	0x0800861c

08007a28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	f043 0201 	orr.w	r2, r3, #1
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007a56:	b084      	sub	sp, #16
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	f107 001c 	add.w	r0, r7, #28
 8007a64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e008      	b.n	8007a84 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ffd8 	bl	8007a28 <USB_CoreReset>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a8e:	b004      	add	sp, #16
 8007a90:	4770      	bx	lr

08007a92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a9a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	401a      	ands	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8007ada:	e00b      	b.n	8007af4 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d106      	bne.n	8007af0 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
 8007aee:	e001      	b.n	8007af4 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e000      	b.n	8007af6 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007b02:	b084      	sub	sp, #16
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	f107 001c 	add.w	r0, r7, #28
 8007b10:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f023 0201 	bic.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8007b26:	2100      	movs	r1, #0
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff ffc7 	bl	8007abc <USB_SetCurrentMode>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b44:	b004      	add	sp, #16
 8007b46:	4770      	bx	lr

08007b48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <__errno>:
 8007b6c:	4b01      	ldr	r3, [pc, #4]	; (8007b74 <__errno+0x8>)
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	2000000c 	.word	0x2000000c

08007b78 <__libc_init_array>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	4d0d      	ldr	r5, [pc, #52]	; (8007bb0 <__libc_init_array+0x38>)
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	4c0d      	ldr	r4, [pc, #52]	; (8007bb4 <__libc_init_array+0x3c>)
 8007b80:	1b64      	subs	r4, r4, r5
 8007b82:	10a4      	asrs	r4, r4, #2
 8007b84:	42a6      	cmp	r6, r4
 8007b86:	d109      	bne.n	8007b9c <__libc_init_array+0x24>
 8007b88:	4d0b      	ldr	r5, [pc, #44]	; (8007bb8 <__libc_init_array+0x40>)
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	4c0b      	ldr	r4, [pc, #44]	; (8007bbc <__libc_init_array+0x44>)
 8007b8e:	f000 fc9d 	bl	80084cc <_init>
 8007b92:	1b64      	subs	r4, r4, r5
 8007b94:	10a4      	asrs	r4, r4, #2
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	d105      	bne.n	8007ba6 <__libc_init_array+0x2e>
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	4798      	blx	r3
 8007ba4:	e7ee      	b.n	8007b84 <__libc_init_array+0xc>
 8007ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007baa:	3601      	adds	r6, #1
 8007bac:	4798      	blx	r3
 8007bae:	e7f2      	b.n	8007b96 <__libc_init_array+0x1e>
 8007bb0:	08008660 	.word	0x08008660
 8007bb4:	08008660 	.word	0x08008660
 8007bb8:	08008660 	.word	0x08008660
 8007bbc:	08008664 	.word	0x08008664

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <siprintf>:
 8007bd0:	b40e      	push	{r1, r2, r3}
 8007bd2:	b500      	push	{lr}
 8007bd4:	b09c      	sub	sp, #112	; 0x70
 8007bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bda:	ab1d      	add	r3, sp, #116	; 0x74
 8007bdc:	9002      	str	r0, [sp, #8]
 8007bde:	9006      	str	r0, [sp, #24]
 8007be0:	9107      	str	r1, [sp, #28]
 8007be2:	9104      	str	r1, [sp, #16]
 8007be4:	4808      	ldr	r0, [pc, #32]	; (8007c08 <siprintf+0x38>)
 8007be6:	4909      	ldr	r1, [pc, #36]	; (8007c0c <siprintf+0x3c>)
 8007be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bec:	9105      	str	r1, [sp, #20]
 8007bee:	a902      	add	r1, sp, #8
 8007bf0:	6800      	ldr	r0, [r0, #0]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	f000 f868 	bl	8007cc8 <_svfiprintf_r>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	b01c      	add	sp, #112	; 0x70
 8007c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c04:	b003      	add	sp, #12
 8007c06:	4770      	bx	lr
 8007c08:	2000000c 	.word	0x2000000c
 8007c0c:	ffff0208 	.word	0xffff0208

08007c10 <__ssputs_r>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	688e      	ldr	r6, [r1, #8]
 8007c16:	4682      	mov	sl, r0
 8007c18:	460c      	mov	r4, r1
 8007c1a:	4690      	mov	r8, r2
 8007c1c:	429e      	cmp	r6, r3
 8007c1e:	461f      	mov	r7, r3
 8007c20:	d838      	bhi.n	8007c94 <__ssputs_r+0x84>
 8007c22:	898a      	ldrh	r2, [r1, #12]
 8007c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c28:	d032      	beq.n	8007c90 <__ssputs_r+0x80>
 8007c2a:	6825      	ldr	r5, [r4, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	6909      	ldr	r1, [r1, #16]
 8007c30:	eba5 0901 	sub.w	r9, r5, r1
 8007c34:	6965      	ldr	r5, [r4, #20]
 8007c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c3a:	444b      	add	r3, r9
 8007c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c40:	106d      	asrs	r5, r5, #1
 8007c42:	429d      	cmp	r5, r3
 8007c44:	bf38      	it	cc
 8007c46:	461d      	movcc	r5, r3
 8007c48:	0553      	lsls	r3, r2, #21
 8007c4a:	d531      	bpl.n	8007cb0 <__ssputs_r+0xa0>
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f000 fb73 	bl	8008338 <_malloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	b950      	cbnz	r0, 8007c6c <__ssputs_r+0x5c>
 8007c56:	230c      	movs	r3, #12
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c5c:	f8ca 3000 	str.w	r3, [sl]
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	464a      	mov	r2, r9
 8007c6e:	6921      	ldr	r1, [r4, #16]
 8007c70:	f000 face 	bl	8008210 <memcpy>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	6126      	str	r6, [r4, #16]
 8007c82:	444e      	add	r6, r9
 8007c84:	6165      	str	r5, [r4, #20]
 8007c86:	eba5 0509 	sub.w	r5, r5, r9
 8007c8a:	6026      	str	r6, [r4, #0]
 8007c8c:	463e      	mov	r6, r7
 8007c8e:	60a5      	str	r5, [r4, #8]
 8007c90:	42be      	cmp	r6, r7
 8007c92:	d900      	bls.n	8007c96 <__ssputs_r+0x86>
 8007c94:	463e      	mov	r6, r7
 8007c96:	4632      	mov	r2, r6
 8007c98:	4641      	mov	r1, r8
 8007c9a:	6820      	ldr	r0, [r4, #0]
 8007c9c:	f000 fac5 	bl	800822a <memmove>
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	1b9b      	subs	r3, r3, r6
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	4433      	add	r3, r6
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	e7db      	b.n	8007c68 <__ssputs_r+0x58>
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	f000 fbb5 	bl	8008420 <_realloc_r>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1e1      	bne.n	8007c80 <__ssputs_r+0x70>
 8007cbc:	6921      	ldr	r1, [r4, #16]
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	f000 face 	bl	8008260 <_free_r>
 8007cc4:	e7c7      	b.n	8007c56 <__ssputs_r+0x46>
	...

08007cc8 <_svfiprintf_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	4698      	mov	r8, r3
 8007cce:	898b      	ldrh	r3, [r1, #12]
 8007cd0:	b09d      	sub	sp, #116	; 0x74
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	061b      	lsls	r3, r3, #24
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	d50e      	bpl.n	8007cfa <_svfiprintf_r+0x32>
 8007cdc:	690b      	ldr	r3, [r1, #16]
 8007cde:	b963      	cbnz	r3, 8007cfa <_svfiprintf_r+0x32>
 8007ce0:	2140      	movs	r1, #64	; 0x40
 8007ce2:	f000 fb29 	bl	8008338 <_malloc_r>
 8007ce6:	6028      	str	r0, [r5, #0]
 8007ce8:	6128      	str	r0, [r5, #16]
 8007cea:	b920      	cbnz	r0, 8007cf6 <_svfiprintf_r+0x2e>
 8007cec:	230c      	movs	r3, #12
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf4:	e0d1      	b.n	8007e9a <_svfiprintf_r+0x1d2>
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	616b      	str	r3, [r5, #20]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d00:	f04f 0901 	mov.w	r9, #1
 8007d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007eb4 <_svfiprintf_r+0x1ec>
 8007d08:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0a:	2320      	movs	r3, #32
 8007d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d10:	2330      	movs	r3, #48	; 0x30
 8007d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d16:	4623      	mov	r3, r4
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1e:	b10a      	cbz	r2, 8007d24 <_svfiprintf_r+0x5c>
 8007d20:	2a25      	cmp	r2, #37	; 0x25
 8007d22:	d1f9      	bne.n	8007d18 <_svfiprintf_r+0x50>
 8007d24:	ebba 0b04 	subs.w	fp, sl, r4
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x7a>
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ff6d 	bl	8007c10 <__ssputs_r>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f000 80aa 	beq.w	8007e90 <_svfiprintf_r+0x1c8>
 8007d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3e:	445a      	add	r2, fp
 8007d40:	9209      	str	r2, [sp, #36]	; 0x24
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80a2 	beq.w	8007e90 <_svfiprintf_r+0x1c8>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d52:	f10a 0a01 	add.w	sl, sl, #1
 8007d56:	9304      	str	r3, [sp, #16]
 8007d58:	9307      	str	r3, [sp, #28]
 8007d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d64:	4654      	mov	r4, sl
 8007d66:	2205      	movs	r2, #5
 8007d68:	4852      	ldr	r0, [pc, #328]	; (8007eb4 <_svfiprintf_r+0x1ec>)
 8007d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6e:	f000 fa41 	bl	80081f4 <memchr>
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	b9d8      	cbnz	r0, 8007dae <_svfiprintf_r+0xe6>
 8007d76:	06d0      	lsls	r0, r2, #27
 8007d78:	bf44      	itt	mi
 8007d7a:	2320      	movmi	r3, #32
 8007d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d80:	0711      	lsls	r1, r2, #28
 8007d82:	bf44      	itt	mi
 8007d84:	232b      	movmi	r3, #43	; 0x2b
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d90:	d015      	beq.n	8007dbe <_svfiprintf_r+0xf6>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	4654      	mov	r4, sl
 8007d96:	2000      	movs	r0, #0
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da2:	3b30      	subs	r3, #48	; 0x30
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d94e      	bls.n	8007e46 <_svfiprintf_r+0x17e>
 8007da8:	b1b0      	cbz	r0, 8007dd8 <_svfiprintf_r+0x110>
 8007daa:	9207      	str	r2, [sp, #28]
 8007dac:	e014      	b.n	8007dd8 <_svfiprintf_r+0x110>
 8007dae:	eba0 0308 	sub.w	r3, r0, r8
 8007db2:	46a2      	mov	sl, r4
 8007db4:	fa09 f303 	lsl.w	r3, r9, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	e7d2      	b.n	8007d64 <_svfiprintf_r+0x9c>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	9103      	str	r1, [sp, #12]
 8007dc8:	bfbb      	ittet	lt
 8007dca:	425b      	neglt	r3, r3
 8007dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd0:	9307      	strge	r3, [sp, #28]
 8007dd2:	9307      	strlt	r3, [sp, #28]
 8007dd4:	bfb8      	it	lt
 8007dd6:	9204      	strlt	r2, [sp, #16]
 8007dd8:	7823      	ldrb	r3, [r4, #0]
 8007dda:	2b2e      	cmp	r3, #46	; 0x2e
 8007ddc:	d10c      	bne.n	8007df8 <_svfiprintf_r+0x130>
 8007dde:	7863      	ldrb	r3, [r4, #1]
 8007de0:	2b2a      	cmp	r3, #42	; 0x2a
 8007de2:	d135      	bne.n	8007e50 <_svfiprintf_r+0x188>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	3402      	adds	r4, #2
 8007de8:	1d1a      	adds	r2, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	9203      	str	r2, [sp, #12]
 8007df0:	bfb8      	it	lt
 8007df2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ec4 <_svfiprintf_r+0x1fc>
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	7821      	ldrb	r1, [r4, #0]
 8007e00:	4650      	mov	r0, sl
 8007e02:	f000 f9f7 	bl	80081f4 <memchr>
 8007e06:	b140      	cbz	r0, 8007e1a <_svfiprintf_r+0x152>
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	eba0 000a 	sub.w	r0, r0, sl
 8007e0e:	3401      	adds	r4, #1
 8007e10:	fa03 f000 	lsl.w	r0, r3, r0
 8007e14:	9b04      	ldr	r3, [sp, #16]
 8007e16:	4303      	orrs	r3, r0
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1e:	2206      	movs	r2, #6
 8007e20:	4825      	ldr	r0, [pc, #148]	; (8007eb8 <_svfiprintf_r+0x1f0>)
 8007e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e26:	f000 f9e5 	bl	80081f4 <memchr>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d038      	beq.n	8007ea0 <_svfiprintf_r+0x1d8>
 8007e2e:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <_svfiprintf_r+0x1f4>)
 8007e30:	bb1b      	cbnz	r3, 8007e7a <_svfiprintf_r+0x1b2>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	3307      	adds	r3, #7
 8007e36:	f023 0307 	bic.w	r3, r3, #7
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e40:	4433      	add	r3, r6
 8007e42:	9309      	str	r3, [sp, #36]	; 0x24
 8007e44:	e767      	b.n	8007d16 <_svfiprintf_r+0x4e>
 8007e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	e7a5      	b.n	8007d9c <_svfiprintf_r+0xd4>
 8007e50:	2300      	movs	r3, #0
 8007e52:	3401      	adds	r4, #1
 8007e54:	f04f 0c0a 	mov.w	ip, #10
 8007e58:	4619      	mov	r1, r3
 8007e5a:	9305      	str	r3, [sp, #20]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e62:	3a30      	subs	r2, #48	; 0x30
 8007e64:	2a09      	cmp	r2, #9
 8007e66:	d903      	bls.n	8007e70 <_svfiprintf_r+0x1a8>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0c5      	beq.n	8007df8 <_svfiprintf_r+0x130>
 8007e6c:	9105      	str	r1, [sp, #20]
 8007e6e:	e7c3      	b.n	8007df8 <_svfiprintf_r+0x130>
 8007e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e74:	4604      	mov	r4, r0
 8007e76:	2301      	movs	r3, #1
 8007e78:	e7f0      	b.n	8007e5c <_svfiprintf_r+0x194>
 8007e7a:	ab03      	add	r3, sp, #12
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	a904      	add	r1, sp, #16
 8007e80:	4638      	mov	r0, r7
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <_svfiprintf_r+0x1f8>)
 8007e86:	e000      	b.n	8007e8a <_svfiprintf_r+0x1c2>
 8007e88:	bf00      	nop
 8007e8a:	1c42      	adds	r2, r0, #1
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	d1d6      	bne.n	8007e3e <_svfiprintf_r+0x176>
 8007e90:	89ab      	ldrh	r3, [r5, #12]
 8007e92:	065b      	lsls	r3, r3, #25
 8007e94:	f53f af2c 	bmi.w	8007cf0 <_svfiprintf_r+0x28>
 8007e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e9a:	b01d      	add	sp, #116	; 0x74
 8007e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea0:	ab03      	add	r3, sp, #12
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	a904      	add	r1, sp, #16
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <_svfiprintf_r+0x1f8>)
 8007eac:	f000 f87c 	bl	8007fa8 <_printf_i>
 8007eb0:	e7eb      	b.n	8007e8a <_svfiprintf_r+0x1c2>
 8007eb2:	bf00      	nop
 8007eb4:	08008624 	.word	0x08008624
 8007eb8:	0800862e 	.word	0x0800862e
 8007ebc:	00000000 	.word	0x00000000
 8007ec0:	08007c11 	.word	0x08007c11
 8007ec4:	0800862a 	.word	0x0800862a

08007ec8 <_printf_common>:
 8007ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	4616      	mov	r6, r2
 8007ece:	4699      	mov	r9, r3
 8007ed0:	688a      	ldr	r2, [r1, #8]
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	690b      	ldr	r3, [r1, #16]
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	bfb8      	it	lt
 8007ee0:	4613      	movlt	r3, r2
 8007ee2:	6033      	str	r3, [r6, #0]
 8007ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ee8:	b10a      	cbz	r2, 8007eee <_printf_common+0x26>
 8007eea:	3301      	adds	r3, #1
 8007eec:	6033      	str	r3, [r6, #0]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	0699      	lsls	r1, r3, #26
 8007ef2:	bf42      	ittt	mi
 8007ef4:	6833      	ldrmi	r3, [r6, #0]
 8007ef6:	3302      	addmi	r3, #2
 8007ef8:	6033      	strmi	r3, [r6, #0]
 8007efa:	6825      	ldr	r5, [r4, #0]
 8007efc:	f015 0506 	ands.w	r5, r5, #6
 8007f00:	d106      	bne.n	8007f10 <_printf_common+0x48>
 8007f02:	f104 0a19 	add.w	sl, r4, #25
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	6832      	ldr	r2, [r6, #0]
 8007f0a:	1a9b      	subs	r3, r3, r2
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dc29      	bgt.n	8007f64 <_printf_common+0x9c>
 8007f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f14:	1e13      	subs	r3, r2, #0
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	bf18      	it	ne
 8007f1a:	2301      	movne	r3, #1
 8007f1c:	0692      	lsls	r2, r2, #26
 8007f1e:	d42e      	bmi.n	8007f7e <_printf_common+0xb6>
 8007f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f24:	4649      	mov	r1, r9
 8007f26:	4638      	mov	r0, r7
 8007f28:	47c0      	blx	r8
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d021      	beq.n	8007f72 <_printf_common+0xaa>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	341a      	adds	r4, #26
 8007f32:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007f36:	f003 0306 	and.w	r3, r3, #6
 8007f3a:	6832      	ldr	r2, [r6, #0]
 8007f3c:	2600      	movs	r6, #0
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f44:	bf08      	it	eq
 8007f46:	1aad      	subeq	r5, r5, r2
 8007f48:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007f4c:	bf14      	ite	ne
 8007f4e:	2500      	movne	r5, #0
 8007f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f54:	4293      	cmp	r3, r2
 8007f56:	bfc4      	itt	gt
 8007f58:	1a9b      	subgt	r3, r3, r2
 8007f5a:	18ed      	addgt	r5, r5, r3
 8007f5c:	42b5      	cmp	r5, r6
 8007f5e:	d11a      	bne.n	8007f96 <_printf_common+0xce>
 8007f60:	2000      	movs	r0, #0
 8007f62:	e008      	b.n	8007f76 <_printf_common+0xae>
 8007f64:	2301      	movs	r3, #1
 8007f66:	4652      	mov	r2, sl
 8007f68:	4649      	mov	r1, r9
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	47c0      	blx	r8
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d103      	bne.n	8007f7a <_printf_common+0xb2>
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7a:	3501      	adds	r5, #1
 8007f7c:	e7c3      	b.n	8007f06 <_printf_common+0x3e>
 8007f7e:	18e1      	adds	r1, r4, r3
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	2030      	movs	r0, #48	; 0x30
 8007f84:	3302      	adds	r3, #2
 8007f86:	4422      	add	r2, r4
 8007f88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f94:	e7c4      	b.n	8007f20 <_printf_common+0x58>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4622      	mov	r2, r4
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	47c0      	blx	r8
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d0e6      	beq.n	8007f72 <_printf_common+0xaa>
 8007fa4:	3601      	adds	r6, #1
 8007fa6:	e7d9      	b.n	8007f5c <_printf_common+0x94>

08007fa8 <_printf_i>:
 8007fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fac:	7e0f      	ldrb	r7, [r1, #24]
 8007fae:	4691      	mov	r9, r2
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	2f78      	cmp	r7, #120	; 0x78
 8007fb6:	469a      	mov	sl, r3
 8007fb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fbe:	d807      	bhi.n	8007fd0 <_printf_i+0x28>
 8007fc0:	2f62      	cmp	r7, #98	; 0x62
 8007fc2:	d80a      	bhi.n	8007fda <_printf_i+0x32>
 8007fc4:	2f00      	cmp	r7, #0
 8007fc6:	f000 80d8 	beq.w	800817a <_printf_i+0x1d2>
 8007fca:	2f58      	cmp	r7, #88	; 0x58
 8007fcc:	f000 80a3 	beq.w	8008116 <_printf_i+0x16e>
 8007fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fd8:	e03a      	b.n	8008050 <_printf_i+0xa8>
 8007fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fde:	2b15      	cmp	r3, #21
 8007fe0:	d8f6      	bhi.n	8007fd0 <_printf_i+0x28>
 8007fe2:	a101      	add	r1, pc, #4	; (adr r1, 8007fe8 <_printf_i+0x40>)
 8007fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fe8:	08008041 	.word	0x08008041
 8007fec:	08008055 	.word	0x08008055
 8007ff0:	08007fd1 	.word	0x08007fd1
 8007ff4:	08007fd1 	.word	0x08007fd1
 8007ff8:	08007fd1 	.word	0x08007fd1
 8007ffc:	08007fd1 	.word	0x08007fd1
 8008000:	08008055 	.word	0x08008055
 8008004:	08007fd1 	.word	0x08007fd1
 8008008:	08007fd1 	.word	0x08007fd1
 800800c:	08007fd1 	.word	0x08007fd1
 8008010:	08007fd1 	.word	0x08007fd1
 8008014:	08008161 	.word	0x08008161
 8008018:	08008085 	.word	0x08008085
 800801c:	08008143 	.word	0x08008143
 8008020:	08007fd1 	.word	0x08007fd1
 8008024:	08007fd1 	.word	0x08007fd1
 8008028:	08008183 	.word	0x08008183
 800802c:	08007fd1 	.word	0x08007fd1
 8008030:	08008085 	.word	0x08008085
 8008034:	08007fd1 	.word	0x08007fd1
 8008038:	08007fd1 	.word	0x08007fd1
 800803c:	0800814b 	.word	0x0800814b
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	1d1a      	adds	r2, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	602a      	str	r2, [r5, #0]
 8008048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800804c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008050:	2301      	movs	r3, #1
 8008052:	e0a3      	b.n	800819c <_printf_i+0x1f4>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	6829      	ldr	r1, [r5, #0]
 8008058:	0606      	lsls	r6, r0, #24
 800805a:	f101 0304 	add.w	r3, r1, #4
 800805e:	d50a      	bpl.n	8008076 <_printf_i+0xce>
 8008060:	680e      	ldr	r6, [r1, #0]
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	2e00      	cmp	r6, #0
 8008066:	da03      	bge.n	8008070 <_printf_i+0xc8>
 8008068:	232d      	movs	r3, #45	; 0x2d
 800806a:	4276      	negs	r6, r6
 800806c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008070:	485e      	ldr	r0, [pc, #376]	; (80081ec <_printf_i+0x244>)
 8008072:	230a      	movs	r3, #10
 8008074:	e019      	b.n	80080aa <_printf_i+0x102>
 8008076:	680e      	ldr	r6, [r1, #0]
 8008078:	f010 0f40 	tst.w	r0, #64	; 0x40
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	bf18      	it	ne
 8008080:	b236      	sxthne	r6, r6
 8008082:	e7ef      	b.n	8008064 <_printf_i+0xbc>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	1d19      	adds	r1, r3, #4
 800808a:	6029      	str	r1, [r5, #0]
 800808c:	0601      	lsls	r1, r0, #24
 800808e:	d501      	bpl.n	8008094 <_printf_i+0xec>
 8008090:	681e      	ldr	r6, [r3, #0]
 8008092:	e002      	b.n	800809a <_printf_i+0xf2>
 8008094:	0646      	lsls	r6, r0, #25
 8008096:	d5fb      	bpl.n	8008090 <_printf_i+0xe8>
 8008098:	881e      	ldrh	r6, [r3, #0]
 800809a:	2f6f      	cmp	r7, #111	; 0x6f
 800809c:	4853      	ldr	r0, [pc, #332]	; (80081ec <_printf_i+0x244>)
 800809e:	bf0c      	ite	eq
 80080a0:	2308      	moveq	r3, #8
 80080a2:	230a      	movne	r3, #10
 80080a4:	2100      	movs	r1, #0
 80080a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080aa:	6865      	ldr	r5, [r4, #4]
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	60a5      	str	r5, [r4, #8]
 80080b0:	bfa2      	ittt	ge
 80080b2:	6821      	ldrge	r1, [r4, #0]
 80080b4:	f021 0104 	bicge.w	r1, r1, #4
 80080b8:	6021      	strge	r1, [r4, #0]
 80080ba:	b90e      	cbnz	r6, 80080c0 <_printf_i+0x118>
 80080bc:	2d00      	cmp	r5, #0
 80080be:	d04d      	beq.n	800815c <_printf_i+0x1b4>
 80080c0:	4615      	mov	r5, r2
 80080c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80080c6:	fb03 6711 	mls	r7, r3, r1, r6
 80080ca:	5dc7      	ldrb	r7, [r0, r7]
 80080cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080d0:	4637      	mov	r7, r6
 80080d2:	460e      	mov	r6, r1
 80080d4:	42bb      	cmp	r3, r7
 80080d6:	d9f4      	bls.n	80080c2 <_printf_i+0x11a>
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d10b      	bne.n	80080f4 <_printf_i+0x14c>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	07de      	lsls	r6, r3, #31
 80080e0:	d508      	bpl.n	80080f4 <_printf_i+0x14c>
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	6861      	ldr	r1, [r4, #4]
 80080e6:	4299      	cmp	r1, r3
 80080e8:	bfde      	ittt	le
 80080ea:	2330      	movle	r3, #48	; 0x30
 80080ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080f4:	1b52      	subs	r2, r2, r5
 80080f6:	6122      	str	r2, [r4, #16]
 80080f8:	464b      	mov	r3, r9
 80080fa:	aa03      	add	r2, sp, #12
 80080fc:	4621      	mov	r1, r4
 80080fe:	4640      	mov	r0, r8
 8008100:	f8cd a000 	str.w	sl, [sp]
 8008104:	f7ff fee0 	bl	8007ec8 <_printf_common>
 8008108:	3001      	adds	r0, #1
 800810a:	d14c      	bne.n	80081a6 <_printf_i+0x1fe>
 800810c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008110:	b004      	add	sp, #16
 8008112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008116:	4835      	ldr	r0, [pc, #212]	; (80081ec <_printf_i+0x244>)
 8008118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800811c:	6829      	ldr	r1, [r5, #0]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f851 6b04 	ldr.w	r6, [r1], #4
 8008124:	6029      	str	r1, [r5, #0]
 8008126:	061d      	lsls	r5, r3, #24
 8008128:	d514      	bpl.n	8008154 <_printf_i+0x1ac>
 800812a:	07df      	lsls	r7, r3, #31
 800812c:	bf44      	itt	mi
 800812e:	f043 0320 	orrmi.w	r3, r3, #32
 8008132:	6023      	strmi	r3, [r4, #0]
 8008134:	b91e      	cbnz	r6, 800813e <_printf_i+0x196>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f023 0320 	bic.w	r3, r3, #32
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	2310      	movs	r3, #16
 8008140:	e7b0      	b.n	80080a4 <_printf_i+0xfc>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	f043 0320 	orr.w	r3, r3, #32
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	2378      	movs	r3, #120	; 0x78
 800814c:	4828      	ldr	r0, [pc, #160]	; (80081f0 <_printf_i+0x248>)
 800814e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008152:	e7e3      	b.n	800811c <_printf_i+0x174>
 8008154:	0659      	lsls	r1, r3, #25
 8008156:	bf48      	it	mi
 8008158:	b2b6      	uxthmi	r6, r6
 800815a:	e7e6      	b.n	800812a <_printf_i+0x182>
 800815c:	4615      	mov	r5, r2
 800815e:	e7bb      	b.n	80080d8 <_printf_i+0x130>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	6826      	ldr	r6, [r4, #0]
 8008164:	1d18      	adds	r0, r3, #4
 8008166:	6961      	ldr	r1, [r4, #20]
 8008168:	6028      	str	r0, [r5, #0]
 800816a:	0635      	lsls	r5, r6, #24
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	d501      	bpl.n	8008174 <_printf_i+0x1cc>
 8008170:	6019      	str	r1, [r3, #0]
 8008172:	e002      	b.n	800817a <_printf_i+0x1d2>
 8008174:	0670      	lsls	r0, r6, #25
 8008176:	d5fb      	bpl.n	8008170 <_printf_i+0x1c8>
 8008178:	8019      	strh	r1, [r3, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	4615      	mov	r5, r2
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	e7ba      	b.n	80080f8 <_printf_i+0x150>
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	2100      	movs	r1, #0
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	602a      	str	r2, [r5, #0]
 800818a:	681d      	ldr	r5, [r3, #0]
 800818c:	6862      	ldr	r2, [r4, #4]
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f830 	bl	80081f4 <memchr>
 8008194:	b108      	cbz	r0, 800819a <_printf_i+0x1f2>
 8008196:	1b40      	subs	r0, r0, r5
 8008198:	6060      	str	r0, [r4, #4]
 800819a:	6863      	ldr	r3, [r4, #4]
 800819c:	6123      	str	r3, [r4, #16]
 800819e:	2300      	movs	r3, #0
 80081a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a4:	e7a8      	b.n	80080f8 <_printf_i+0x150>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	462a      	mov	r2, r5
 80081aa:	4649      	mov	r1, r9
 80081ac:	4640      	mov	r0, r8
 80081ae:	47d0      	blx	sl
 80081b0:	3001      	adds	r0, #1
 80081b2:	d0ab      	beq.n	800810c <_printf_i+0x164>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	079b      	lsls	r3, r3, #30
 80081b8:	d413      	bmi.n	80081e2 <_printf_i+0x23a>
 80081ba:	68e0      	ldr	r0, [r4, #12]
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	4298      	cmp	r0, r3
 80081c0:	bfb8      	it	lt
 80081c2:	4618      	movlt	r0, r3
 80081c4:	e7a4      	b.n	8008110 <_printf_i+0x168>
 80081c6:	2301      	movs	r3, #1
 80081c8:	4632      	mov	r2, r6
 80081ca:	4649      	mov	r1, r9
 80081cc:	4640      	mov	r0, r8
 80081ce:	47d0      	blx	sl
 80081d0:	3001      	adds	r0, #1
 80081d2:	d09b      	beq.n	800810c <_printf_i+0x164>
 80081d4:	3501      	adds	r5, #1
 80081d6:	68e3      	ldr	r3, [r4, #12]
 80081d8:	9903      	ldr	r1, [sp, #12]
 80081da:	1a5b      	subs	r3, r3, r1
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dcf2      	bgt.n	80081c6 <_printf_i+0x21e>
 80081e0:	e7eb      	b.n	80081ba <_printf_i+0x212>
 80081e2:	2500      	movs	r5, #0
 80081e4:	f104 0619 	add.w	r6, r4, #25
 80081e8:	e7f5      	b.n	80081d6 <_printf_i+0x22e>
 80081ea:	bf00      	nop
 80081ec:	08008635 	.word	0x08008635
 80081f0:	08008646 	.word	0x08008646

080081f4 <memchr>:
 80081f4:	b2c9      	uxtb	r1, r1
 80081f6:	4402      	add	r2, r0
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4290      	cmp	r0, r2
 80081fc:	4603      	mov	r3, r0
 80081fe:	d101      	bne.n	8008204 <memchr+0x10>
 8008200:	2300      	movs	r3, #0
 8008202:	e003      	b.n	800820c <memchr+0x18>
 8008204:	781c      	ldrb	r4, [r3, #0]
 8008206:	3001      	adds	r0, #1
 8008208:	428c      	cmp	r4, r1
 800820a:	d1f6      	bne.n	80081fa <memchr+0x6>
 800820c:	4618      	mov	r0, r3
 800820e:	bd10      	pop	{r4, pc}

08008210 <memcpy>:
 8008210:	440a      	add	r2, r1
 8008212:	1e43      	subs	r3, r0, #1
 8008214:	4291      	cmp	r1, r2
 8008216:	d100      	bne.n	800821a <memcpy+0xa>
 8008218:	4770      	bx	lr
 800821a:	b510      	push	{r4, lr}
 800821c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008220:	4291      	cmp	r1, r2
 8008222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008226:	d1f9      	bne.n	800821c <memcpy+0xc>
 8008228:	bd10      	pop	{r4, pc}

0800822a <memmove>:
 800822a:	4288      	cmp	r0, r1
 800822c:	b510      	push	{r4, lr}
 800822e:	eb01 0402 	add.w	r4, r1, r2
 8008232:	d902      	bls.n	800823a <memmove+0x10>
 8008234:	4284      	cmp	r4, r0
 8008236:	4623      	mov	r3, r4
 8008238:	d807      	bhi.n	800824a <memmove+0x20>
 800823a:	1e43      	subs	r3, r0, #1
 800823c:	42a1      	cmp	r1, r4
 800823e:	d008      	beq.n	8008252 <memmove+0x28>
 8008240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008244:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008248:	e7f8      	b.n	800823c <memmove+0x12>
 800824a:	4402      	add	r2, r0
 800824c:	4601      	mov	r1, r0
 800824e:	428a      	cmp	r2, r1
 8008250:	d100      	bne.n	8008254 <memmove+0x2a>
 8008252:	bd10      	pop	{r4, pc}
 8008254:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008258:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800825c:	e7f7      	b.n	800824e <memmove+0x24>
	...

08008260 <_free_r>:
 8008260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008262:	2900      	cmp	r1, #0
 8008264:	d043      	beq.n	80082ee <_free_r+0x8e>
 8008266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826a:	1f0c      	subs	r4, r1, #4
 800826c:	9001      	str	r0, [sp, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	18e4      	addlt	r4, r4, r3
 8008274:	f000 f914 	bl	80084a0 <__malloc_lock>
 8008278:	4a1e      	ldr	r2, [pc, #120]	; (80082f4 <_free_r+0x94>)
 800827a:	9801      	ldr	r0, [sp, #4]
 800827c:	6813      	ldr	r3, [r2, #0]
 800827e:	b933      	cbnz	r3, 800828e <_free_r+0x2e>
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6014      	str	r4, [r2, #0]
 8008284:	b003      	add	sp, #12
 8008286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800828a:	f000 b90f 	b.w	80084ac <__malloc_unlock>
 800828e:	42a3      	cmp	r3, r4
 8008290:	d908      	bls.n	80082a4 <_free_r+0x44>
 8008292:	6825      	ldr	r5, [r4, #0]
 8008294:	1961      	adds	r1, r4, r5
 8008296:	428b      	cmp	r3, r1
 8008298:	bf01      	itttt	eq
 800829a:	6819      	ldreq	r1, [r3, #0]
 800829c:	685b      	ldreq	r3, [r3, #4]
 800829e:	1949      	addeq	r1, r1, r5
 80082a0:	6021      	streq	r1, [r4, #0]
 80082a2:	e7ed      	b.n	8008280 <_free_r+0x20>
 80082a4:	461a      	mov	r2, r3
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	b10b      	cbz	r3, 80082ae <_free_r+0x4e>
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	d9fa      	bls.n	80082a4 <_free_r+0x44>
 80082ae:	6811      	ldr	r1, [r2, #0]
 80082b0:	1855      	adds	r5, r2, r1
 80082b2:	42a5      	cmp	r5, r4
 80082b4:	d10b      	bne.n	80082ce <_free_r+0x6e>
 80082b6:	6824      	ldr	r4, [r4, #0]
 80082b8:	4421      	add	r1, r4
 80082ba:	1854      	adds	r4, r2, r1
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	42a3      	cmp	r3, r4
 80082c0:	d1e0      	bne.n	8008284 <_free_r+0x24>
 80082c2:	681c      	ldr	r4, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4421      	add	r1, r4
 80082c8:	6053      	str	r3, [r2, #4]
 80082ca:	6011      	str	r1, [r2, #0]
 80082cc:	e7da      	b.n	8008284 <_free_r+0x24>
 80082ce:	d902      	bls.n	80082d6 <_free_r+0x76>
 80082d0:	230c      	movs	r3, #12
 80082d2:	6003      	str	r3, [r0, #0]
 80082d4:	e7d6      	b.n	8008284 <_free_r+0x24>
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	1961      	adds	r1, r4, r5
 80082da:	428b      	cmp	r3, r1
 80082dc:	bf02      	ittt	eq
 80082de:	6819      	ldreq	r1, [r3, #0]
 80082e0:	685b      	ldreq	r3, [r3, #4]
 80082e2:	1949      	addeq	r1, r1, r5
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	bf08      	it	eq
 80082e8:	6021      	streq	r1, [r4, #0]
 80082ea:	6054      	str	r4, [r2, #4]
 80082ec:	e7ca      	b.n	8008284 <_free_r+0x24>
 80082ee:	b003      	add	sp, #12
 80082f0:	bd30      	pop	{r4, r5, pc}
 80082f2:	bf00      	nop
 80082f4:	200005d8 	.word	0x200005d8

080082f8 <sbrk_aligned>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4e0e      	ldr	r6, [pc, #56]	; (8008334 <sbrk_aligned+0x3c>)
 80082fc:	460c      	mov	r4, r1
 80082fe:	4605      	mov	r5, r0
 8008300:	6831      	ldr	r1, [r6, #0]
 8008302:	b911      	cbnz	r1, 800830a <sbrk_aligned+0x12>
 8008304:	f000 f8bc 	bl	8008480 <_sbrk_r>
 8008308:	6030      	str	r0, [r6, #0]
 800830a:	4621      	mov	r1, r4
 800830c:	4628      	mov	r0, r5
 800830e:	f000 f8b7 	bl	8008480 <_sbrk_r>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	d00a      	beq.n	800832c <sbrk_aligned+0x34>
 8008316:	1cc4      	adds	r4, r0, #3
 8008318:	f024 0403 	bic.w	r4, r4, #3
 800831c:	42a0      	cmp	r0, r4
 800831e:	d007      	beq.n	8008330 <sbrk_aligned+0x38>
 8008320:	1a21      	subs	r1, r4, r0
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f8ac 	bl	8008480 <_sbrk_r>
 8008328:	3001      	adds	r0, #1
 800832a:	d101      	bne.n	8008330 <sbrk_aligned+0x38>
 800832c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008330:	4620      	mov	r0, r4
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	200005dc 	.word	0x200005dc

08008338 <_malloc_r>:
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	1ccd      	adds	r5, r1, #3
 800833e:	4607      	mov	r7, r0
 8008340:	f025 0503 	bic.w	r5, r5, #3
 8008344:	3508      	adds	r5, #8
 8008346:	2d0c      	cmp	r5, #12
 8008348:	bf38      	it	cc
 800834a:	250c      	movcc	r5, #12
 800834c:	2d00      	cmp	r5, #0
 800834e:	db01      	blt.n	8008354 <_malloc_r+0x1c>
 8008350:	42a9      	cmp	r1, r5
 8008352:	d905      	bls.n	8008360 <_malloc_r+0x28>
 8008354:	230c      	movs	r3, #12
 8008356:	2600      	movs	r6, #0
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	4630      	mov	r0, r6
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	4e2e      	ldr	r6, [pc, #184]	; (800841c <_malloc_r+0xe4>)
 8008362:	f000 f89d 	bl	80084a0 <__malloc_lock>
 8008366:	6833      	ldr	r3, [r6, #0]
 8008368:	461c      	mov	r4, r3
 800836a:	bb34      	cbnz	r4, 80083ba <_malloc_r+0x82>
 800836c:	4629      	mov	r1, r5
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff ffc2 	bl	80082f8 <sbrk_aligned>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	4604      	mov	r4, r0
 8008378:	d14d      	bne.n	8008416 <_malloc_r+0xde>
 800837a:	6834      	ldr	r4, [r6, #0]
 800837c:	4626      	mov	r6, r4
 800837e:	2e00      	cmp	r6, #0
 8008380:	d140      	bne.n	8008404 <_malloc_r+0xcc>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	4631      	mov	r1, r6
 8008386:	4638      	mov	r0, r7
 8008388:	eb04 0803 	add.w	r8, r4, r3
 800838c:	f000 f878 	bl	8008480 <_sbrk_r>
 8008390:	4580      	cmp	r8, r0
 8008392:	d13a      	bne.n	800840a <_malloc_r+0xd2>
 8008394:	6821      	ldr	r1, [r4, #0]
 8008396:	3503      	adds	r5, #3
 8008398:	4638      	mov	r0, r7
 800839a:	1a6d      	subs	r5, r5, r1
 800839c:	f025 0503 	bic.w	r5, r5, #3
 80083a0:	3508      	adds	r5, #8
 80083a2:	2d0c      	cmp	r5, #12
 80083a4:	bf38      	it	cc
 80083a6:	250c      	movcc	r5, #12
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7ff ffa5 	bl	80082f8 <sbrk_aligned>
 80083ae:	3001      	adds	r0, #1
 80083b0:	d02b      	beq.n	800840a <_malloc_r+0xd2>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	442b      	add	r3, r5
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	e00e      	b.n	80083d8 <_malloc_r+0xa0>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	1b52      	subs	r2, r2, r5
 80083be:	d41e      	bmi.n	80083fe <_malloc_r+0xc6>
 80083c0:	2a0b      	cmp	r2, #11
 80083c2:	d916      	bls.n	80083f2 <_malloc_r+0xba>
 80083c4:	1961      	adds	r1, r4, r5
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	6025      	str	r5, [r4, #0]
 80083ca:	bf18      	it	ne
 80083cc:	6059      	strne	r1, [r3, #4]
 80083ce:	6863      	ldr	r3, [r4, #4]
 80083d0:	bf08      	it	eq
 80083d2:	6031      	streq	r1, [r6, #0]
 80083d4:	5162      	str	r2, [r4, r5]
 80083d6:	604b      	str	r3, [r1, #4]
 80083d8:	f104 060b 	add.w	r6, r4, #11
 80083dc:	4638      	mov	r0, r7
 80083de:	f000 f865 	bl	80084ac <__malloc_unlock>
 80083e2:	1d23      	adds	r3, r4, #4
 80083e4:	f026 0607 	bic.w	r6, r6, #7
 80083e8:	1af2      	subs	r2, r6, r3
 80083ea:	d0b6      	beq.n	800835a <_malloc_r+0x22>
 80083ec:	1b9b      	subs	r3, r3, r6
 80083ee:	50a3      	str	r3, [r4, r2]
 80083f0:	e7b3      	b.n	800835a <_malloc_r+0x22>
 80083f2:	6862      	ldr	r2, [r4, #4]
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	bf0c      	ite	eq
 80083f8:	6032      	streq	r2, [r6, #0]
 80083fa:	605a      	strne	r2, [r3, #4]
 80083fc:	e7ec      	b.n	80083d8 <_malloc_r+0xa0>
 80083fe:	4623      	mov	r3, r4
 8008400:	6864      	ldr	r4, [r4, #4]
 8008402:	e7b2      	b.n	800836a <_malloc_r+0x32>
 8008404:	4634      	mov	r4, r6
 8008406:	6876      	ldr	r6, [r6, #4]
 8008408:	e7b9      	b.n	800837e <_malloc_r+0x46>
 800840a:	230c      	movs	r3, #12
 800840c:	4638      	mov	r0, r7
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	f000 f84c 	bl	80084ac <__malloc_unlock>
 8008414:	e7a1      	b.n	800835a <_malloc_r+0x22>
 8008416:	6025      	str	r5, [r4, #0]
 8008418:	e7de      	b.n	80083d8 <_malloc_r+0xa0>
 800841a:	bf00      	nop
 800841c:	200005d8 	.word	0x200005d8

08008420 <_realloc_r>:
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	4680      	mov	r8, r0
 8008426:	4614      	mov	r4, r2
 8008428:	460e      	mov	r6, r1
 800842a:	b921      	cbnz	r1, 8008436 <_realloc_r+0x16>
 800842c:	4611      	mov	r1, r2
 800842e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008432:	f7ff bf81 	b.w	8008338 <_malloc_r>
 8008436:	b92a      	cbnz	r2, 8008444 <_realloc_r+0x24>
 8008438:	4625      	mov	r5, r4
 800843a:	f7ff ff11 	bl	8008260 <_free_r>
 800843e:	4628      	mov	r0, r5
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	f000 f838 	bl	80084b8 <_malloc_usable_size_r>
 8008448:	4284      	cmp	r4, r0
 800844a:	4607      	mov	r7, r0
 800844c:	d802      	bhi.n	8008454 <_realloc_r+0x34>
 800844e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008452:	d812      	bhi.n	800847a <_realloc_r+0x5a>
 8008454:	4621      	mov	r1, r4
 8008456:	4640      	mov	r0, r8
 8008458:	f7ff ff6e 	bl	8008338 <_malloc_r>
 800845c:	4605      	mov	r5, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	d0ed      	beq.n	800843e <_realloc_r+0x1e>
 8008462:	42bc      	cmp	r4, r7
 8008464:	4622      	mov	r2, r4
 8008466:	4631      	mov	r1, r6
 8008468:	bf28      	it	cs
 800846a:	463a      	movcs	r2, r7
 800846c:	f7ff fed0 	bl	8008210 <memcpy>
 8008470:	4631      	mov	r1, r6
 8008472:	4640      	mov	r0, r8
 8008474:	f7ff fef4 	bl	8008260 <_free_r>
 8008478:	e7e1      	b.n	800843e <_realloc_r+0x1e>
 800847a:	4635      	mov	r5, r6
 800847c:	e7df      	b.n	800843e <_realloc_r+0x1e>
	...

08008480 <_sbrk_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	2300      	movs	r3, #0
 8008484:	4d05      	ldr	r5, [pc, #20]	; (800849c <_sbrk_r+0x1c>)
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 fa96 	bl	80019bc <_sbrk>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_sbrk_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_sbrk_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	200005e0 	.word	0x200005e0

080084a0 <__malloc_lock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__malloc_lock+0x8>)
 80084a2:	f000 b811 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 80084a6:	bf00      	nop
 80084a8:	200005e4 	.word	0x200005e4

080084ac <__malloc_unlock>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__malloc_unlock+0x8>)
 80084ae:	f000 b80c 	b.w	80084ca <__retarget_lock_release_recursive>
 80084b2:	bf00      	nop
 80084b4:	200005e4 	.word	0x200005e4

080084b8 <_malloc_usable_size_r>:
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f18      	subs	r0, r3, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfbc      	itt	lt
 80084c2:	580b      	ldrlt	r3, [r1, r0]
 80084c4:	18c0      	addlt	r0, r0, r3
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_acquire_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_release_recursive>:
 80084ca:	4770      	bx	lr

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
