
SD-Card-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009544  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800977c  0800977c  0000a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009950  08009950  0000a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009958  08009958  0000a958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800995c  0800995c  0000a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  08009960  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d4  20000010  0800996d  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000e4  0800996d  0000b0e4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b00d  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f2fd  00000000  00000000  0000b043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000231b  00000000  00000000  0001a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000eb8  00000000  00000000  0001c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b23  00000000  00000000  0001d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002d6b2  00000000  00000000  0001e03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010f7e  00000000  00000000  0004b6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00119b02  00000000  00000000  0005c66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017616d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c1c  00000000  00000000  001761b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009b  00000000  00000000  00179dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	08009764 	.word	0x08009764

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	08009764 	.word	0x08009764

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800028e:	2300      	movs	r3, #0
 8000290:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8000292:	f000 f86b 	bl	800036c <BSP_SD_IsDetected>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	d001      	beq.n	80002a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800029c:	2302      	movs	r3, #2
 800029e:	e005      	b.n	80002ac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80002a0:	4804      	ldr	r0, [pc, #16]	@ (80002b4 <BSP_SD_Init+0x2c>)
 80002a2:	f004 fef1 	bl	8005088 <HAL_SD_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
    //{
    //  sd_state = MSD_ERROR;
    //}
  }

  return sd_state;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000002c 	.word	0x2000002c

080002b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint8_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80002c6:	2300      	movs	r3, #0
 80002c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	68f9      	ldr	r1, [r7, #12]
 80002d4:	4806      	ldr	r0, [pc, #24]	@ (80002f0 <BSP_SD_ReadBlocks+0x38>)
 80002d6:	f004 fff7 	bl	80052c8 <HAL_SD_ReadBlocks>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80002e0:	2301      	movs	r3, #1
 80002e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint8_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af02      	add	r7, sp, #8
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
 8000300:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000302:	2300      	movs	r3, #0
 8000304:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	68f9      	ldr	r1, [r7, #12]
 8000310:	4806      	ldr	r0, [pc, #24]	@ (800032c <BSP_SD_WriteBlocks+0x38>)
 8000312:	f005 f963 	bl	80055dc <HAL_SD_WriteBlocks>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800031c:	2301      	movs	r3, #1
 800031e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8000320:	7dfb      	ldrb	r3, [r7, #23]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000002c 	.word	0x2000002c

08000330 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000334:	4805      	ldr	r0, [pc, #20]	@ (800034c <BSP_SD_GetCardState+0x1c>)
 8000336:	f005 fe7f 	bl	8006038 <HAL_SD_GetCardState>
 800033a:	4603      	mov	r3, r0
 800033c:	2b04      	cmp	r3, #4
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
}
 8000346:	4618      	mov	r0, r3
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c

08000350 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <BSP_SD_GetCardInfo+0x18>)
 800035c:	f005 fd2e 	bl	8005dbc <HAL_SD_GetCardInfo>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	2000002c 	.word	0x2000002c

0800036c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000372:	2301      	movs	r3, #1
 8000374:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	b2db      	uxtb	r3, r3
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	f5ad 6dd0 	sub.w	sp, sp, #1664	@ 0x680
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 fb5a 	bl	8000a48 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000394:	4b39      	ldr	r3, [pc, #228]	@ (800047c <main+0xf4>)
 8000396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800039a:	4a38      	ldr	r2, [pc, #224]	@ (800047c <main+0xf4>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80003a4:	4b35      	ldr	r3, [pc, #212]	@ (800047c <main+0xf4>)
 80003a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80003aa:	f003 0204 	and.w	r2, r3, #4
 80003ae:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80003b2:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80003bc:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 80003c0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f867 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f8d5 	bl	8000574 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80003ca:	f000 f8b1 	bl	8000530 <MX_SDMMC1_SD_Init>

	UINT bytesWritten;


  // Link driver
  if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80003ce:	492c      	ldr	r1, [pc, #176]	@ (8000480 <main+0xf8>)
 80003d0:	482c      	ldr	r0, [pc, #176]	@ (8000484 <main+0xfc>)
 80003d2:	f009 f98b 	bl	80096ec <FATFS_LinkDriver>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14c      	bne.n	8000476 <main+0xee>
  {
		char label[12];
		DWORD serialNumber;
		fileResult = f_mount(&SDFatFs, SDPath, 1);
 80003dc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80003e0:	2201      	movs	r2, #1
 80003e2:	4927      	ldr	r1, [pc, #156]	@ (8000480 <main+0xf8>)
 80003e4:	4618      	mov	r0, r3
 80003e6:	f008 fd13 	bl	8008e10 <f_mount>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f887 367f 	strb.w	r3, [r7, #1663]	@ 0x67f
		if (fileResult != FR_OK)
 80003f0:	f897 367f 	ldrb.w	r3, [r7, #1663]	@ 0x67f
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <main+0x74>
		{
			Error_Handler();
 80003f8:	f000 f8e6 	bl	80005c8 <Error_Handler>
		}

		FIL file;
		fileResult = f_open(&file, "0:hello69.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	220a      	movs	r2, #10
 8000400:	4921      	ldr	r1, [pc, #132]	@ (8000488 <main+0x100>)
 8000402:	4618      	mov	r0, r3
 8000404:	f008 fd4a 	bl	8008e9c <f_open>
 8000408:	4603      	mov	r3, r0
 800040a:	f887 367f 	strb.w	r3, [r7, #1663]	@ 0x67f
		if (fileResult != FR_OK)
 800040e:	f897 367f 	ldrb.w	r3, [r7, #1663]	@ 0x67f
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <main+0x92>
		{
			Error_Handler();
 8000416:	f000 f8d7 	bl	80005c8 <Error_Handler>
		}

		const char* fileContents = "NO FUCKING WAY\n";
 800041a:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <main+0x104>)
 800041c:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
		fileResult = f_write(&file, fileContents, strlen(fileContents), &bytesWritten);
 8000420:	f8d7 0678 	ldr.w	r0, [r7, #1656]	@ 0x678
 8000424:	f7ff ff28 	bl	8000278 <strlen>
 8000428:	4602      	mov	r2, r0
 800042a:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800042e:	1d38      	adds	r0, r7, #4
 8000430:	f8d7 1678 	ldr.w	r1, [r7, #1656]	@ 0x678
 8000434:	f008 feee 	bl	8009214 <f_write>
 8000438:	4603      	mov	r3, r0
 800043a:	f887 367f 	strb.w	r3, [r7, #1663]	@ 0x67f
		if (fileResult != FR_OK || bytesWritten != strlen(fileContents))
 800043e:	f897 367f 	ldrb.w	r3, [r7, #1663]	@ 0x67f
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10b      	bne.n	800045e <main+0xd6>
 8000446:	f8d7 0678 	ldr.w	r0, [r7, #1656]	@ 0x678
 800044a:	f7ff ff15 	bl	8000278 <strlen>
 800044e:	4602      	mov	r2, r0
 8000450:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8000454:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	429a      	cmp	r2, r3
 800045c:	d001      	beq.n	8000462 <main+0xda>
		{
			Error_Handler();
 800045e:	f000 f8b3 	bl	80005c8 <Error_Handler>
		}

		f_close(&file);
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f009 f8cb 	bl	8009600 <f_close>
		f_mount(NULL, "", 1);
 800046a:	2201      	movs	r2, #1
 800046c:	4908      	ldr	r1, [pc, #32]	@ (8000490 <main+0x108>)
 800046e:	2000      	movs	r0, #0
 8000470:	f008 fcce 	bl	8008e10 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	e7fd      	b.n	8000476 <main+0xee>
 800047a:	bf00      	nop
 800047c:	46020c00 	.word	0x46020c00
 8000480:	200000a8 	.word	0x200000a8
 8000484:	080097e4 	.word	0x080097e4
 8000488:	0800977c 	.word	0x0800977c
 800048c:	0800978c 	.word	0x0800978c
 8000490:	0800979c 	.word	0x0800979c

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09e      	sub	sp, #120	@ 0x78
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	2260      	movs	r2, #96	@ 0x60
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f009 f931 	bl	800970a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80004b8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80004bc:	f000 feee 	bl	800129c <HAL_PWREx_ControlVoltageScaling>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x36>
  {
    Error_Handler();
 80004c6:	f000 f87f 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80004ca:	2330      	movs	r3, #48	@ 0x30
 80004cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d4:	2301      	movs	r3, #1
 80004d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004d8:	2310      	movs	r3, #16
 80004da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80004dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0318 	add.w	r3, r7, #24
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 ff62 	bl	80013b4 <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f6:	f000 f867 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	231f      	movs	r3, #31
 80004fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000512:	463b      	mov	r3, r7
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fe28 	bl	800216c <HAL_RCC_ClockConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000522:	f000 f851 	bl	80005c8 <Error_Handler>
  }
}
 8000526:	bf00      	nop
 8000528:	3778      	adds	r7, #120	@ 0x78
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000536:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <MX_SDMMC1_SD_Init+0x40>)
 8000538:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 59;
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000554:	223b      	movs	r2, #59	@ 0x3b
 8000556:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_SDMMC1_SD_Init+0x3c>)
 800055a:	f004 fd95 	bl	8005088 <HAL_SD_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000564:	f000 f830 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000002c 	.word	0x2000002c
 8000570:	420c8000 	.word	0x420c8000

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <MX_GPIO_Init+0x50>)
 800057c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000580:	4a10      	ldr	r2, [pc, #64]	@ (80005c4 <MX_GPIO_Init+0x50>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <MX_GPIO_Init+0x50>)
 800058c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_GPIO_Init+0x50>)
 800059a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800059e:	4a09      	ldr	r2, [pc, #36]	@ (80005c4 <MX_GPIO_Init+0x50>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_GPIO_Init+0x50>)
 80005aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <Error_Handler+0x8>

080005d4 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <SD_CheckStatus+0x38>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80005e4:	f7ff fea4 	bl	8000330 <BSP_SD_GetCardState>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d107      	bne.n	80005fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <SD_CheckStatus+0x38>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f023 0301 	bic.w	r3, r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b04      	ldr	r3, [pc, #16]	@ (800060c <SD_CheckStatus+0x38>)
 80005fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80005fe:	4b03      	ldr	r3, [pc, #12]	@ (800060c <SD_CheckStatus+0x38>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000000 	.word	0x20000000

08000610 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800061a:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <SD_initialize+0x38>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8000620:	f7ff fe32 	bl	8000288 <BSP_SD_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d107      	bne.n	800063a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffd1 	bl	80005d4 <SD_CheckStatus>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <SD_initialize+0x38>)
 8000638:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800063a:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <SD_initialize+0x38>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000000 	.word	0x20000000

0800064c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffbb 	bl	80005d4 <SD_CheckStatus>
 800065e:	4603      	mov	r3, r0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint8_t*)buff,
 800067c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	68b8      	ldr	r0, [r7, #8]
 8000686:	f7ff fe17 	bl	80002b8 <BSP_SD_ReadBlocks>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d107      	bne.n	80006a0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8000690:	bf00      	nop
 8000692:	f7ff fe4d 	bl	8000330 <BSP_SD_GetCardState>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1fa      	bne.n	8000692 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint8_t*)buff,
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	68b8      	ldr	r0, [r7, #8]
 80006c8:	f7ff fe14 	bl	80002f4 <BSP_SD_WriteBlocks>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d107      	bne.n	80006e2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80006d2:	bf00      	nop
 80006d4:	f7ff fe2c 	bl	8000330 <BSP_SD_GetCardState>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1fa      	bne.n	80006d4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	603a      	str	r2, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	460b      	mov	r3, r1
 80006fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000702:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <SD_ioctl+0xac>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SD_ioctl+0x28>
 8000710:	2303      	movs	r3, #3
 8000712:	e03c      	b.n	800078e <SD_ioctl+0xa2>

  switch (cmd)
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b03      	cmp	r3, #3
 8000718:	d834      	bhi.n	8000784 <SD_ioctl+0x98>
 800071a:	a201      	add	r2, pc, #4	@ (adr r2, 8000720 <SD_ioctl+0x34>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000731 	.word	0x08000731
 8000724:	08000739 	.word	0x08000739
 8000728:	08000751 	.word	0x08000751
 800072c:	0800076b 	.word	0x0800076b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8000730:	2300      	movs	r3, #0
 8000732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000736:	e028      	b.n	800078a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe07 	bl	8000350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8000742:	6a3a      	ldr	r2, [r7, #32]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800074e:	e01c      	b.n	800078a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fdfb 	bl	8000350 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800075a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075c:	b29a      	uxth	r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000768:	e00f      	b.n	800078a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fdee 	bl	8000350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	0a5a      	lsrs	r2, r3, #9
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 800077c:	2300      	movs	r3, #0
 800077e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000782:	e002      	b.n	800078a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8000784:	2304      	movs	r3, #4
 8000786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800078a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800078e:	4618      	mov	r0, r3
 8000790:	3730      	adds	r7, #48	@ 0x30
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000000 	.word	0x20000000

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_MspInit+0x30>)
 80007a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80007a8:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x30>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x30>)
 80007b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	46020c00 	.word	0x46020c00

080007d0 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0bc      	sub	sp, #240	@ 0xf0
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	22c0      	movs	r2, #192	@ 0xc0
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f008 ff8a 	bl	800970a <memset>
  if(hsd->Instance==SDMMC1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a46      	ldr	r2, [pc, #280]	@ (8000914 <HAL_SD_MspInit+0x144>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	f040 8084 	bne.w	800090a <HAL_SD_MspInit+0x13a>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CLK48;
 8000802:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800080e:	2300      	movs	r3, #0
 8000810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_CLK48;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4618      	mov	r0, r3
 8000820:	f002 f874 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_SD_MspInit+0x5e>
    {
      Error_Handler();
 800082a:	f7ff fecd 	bl	80005c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800082e:	4b3a      	ldr	r3, [pc, #232]	@ (8000918 <HAL_SD_MspInit+0x148>)
 8000830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000834:	4a38      	ldr	r2, [pc, #224]	@ (8000918 <HAL_SD_MspInit+0x148>)
 8000836:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800083a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800083e:	4b36      	ldr	r3, [pc, #216]	@ (8000918 <HAL_SD_MspInit+0x148>)
 8000840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	4b32      	ldr	r3, [pc, #200]	@ (8000918 <HAL_SD_MspInit+0x148>)
 800084e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000852:	4a31      	ldr	r2, [pc, #196]	@ (8000918 <HAL_SD_MspInit+0x148>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800085c:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <HAL_SD_MspInit+0x148>)
 800085e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <HAL_SD_MspInit+0x148>)
 800086c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000870:	4a29      	ldr	r2, [pc, #164]	@ (8000918 <HAL_SD_MspInit+0x148>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800087a:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <HAL_SD_MspInit+0x148>)
 800087c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800088c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008a2:	230c      	movs	r3, #12
 80008a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008ac:	4619      	mov	r1, r3
 80008ae:	481b      	ldr	r0, [pc, #108]	@ (800091c <HAL_SD_MspInit+0x14c>)
 80008b0:	f000 fb1c 	bl	8000eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CK_Pin;
 80008b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2302      	movs	r3, #2
 80008ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008ce:	230c      	movs	r3, #12
 80008d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SDMMC_CK_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008d8:	4619      	mov	r1, r3
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <HAL_SD_MspInit+0x14c>)
 80008dc:	f000 fb06 	bl	8000eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80008e0:	2304      	movs	r3, #4
 80008e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008f8:	230c      	movs	r3, #12
 80008fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	@ (8000920 <HAL_SD_MspInit+0x150>)
 8000906:	f000 faf1 	bl	8000eec <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800090a:	bf00      	nop
 800090c:	37f0      	adds	r7, #240	@ 0xf0
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	420c8000 	.word	0x420c8000
 8000918:	46020c00 	.word	0x46020c00
 800091c:	42020800 	.word	0x42020800
 8000920:	42020c00 	.word	0x42020c00

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <NMI_Handler+0x4>

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <MemManage_Handler+0x4>

0800093c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <UsageFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f90b 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <SystemInit+0x68>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <SystemInit+0x68>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <SystemInit+0x6c>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <SystemInit+0x6c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <SystemInit+0x6c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <SystemInit+0x6c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <SystemInit+0x6c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <SystemInit+0x6c>)
 80009b6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80009ba:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80009be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <SystemInit+0x6c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <SystemInit+0x6c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <SystemInit+0x6c>)
 80009cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <SystemInit+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <SystemInit+0x68>)
 80009da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009de:	609a      	str	r2, [r3, #8]
  #endif
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	46020c00 	.word	0x46020c00

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f8:	f7ff ffc4 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	@ (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	@ (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a22:	f008 fe7b 	bl	800971c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fcaf 	bl	8000388 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000000d 	.word	0x2000000d
  ldr r2, =_sidata
 8000a38:	08009960 	.word	0x08009960
  ldr r2, =_sbss
 8000a3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a40:	200000e4 	.word	0x200000e4

08000a44 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_Init+0x50>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <HAL_Init+0x50>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f96e 	bl	8000d3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a5e:	f001 fd77 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8000a62:	4602      	mov	r2, r0
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <HAL_Init+0x54>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <HAL_Init+0x58>)
 8000a6e:	5ccb      	ldrb	r3, [r1, r3]
 8000a70:	fa22 f303 	lsr.w	r3, r2, r3
 8000a74:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <HAL_Init+0x5c>)
 8000a76:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f000 f9a5 	bl	8000dc8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f812 	bl	8000aa8 <HAL_InitTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e002      	b.n	8000a94 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8e:	f7ff fe85 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	46020c00 	.word	0x46020c00
 8000aa0:	080097f8 	.word	0x080097f8
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ab4:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <HAL_InitTick+0xdc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e05c      	b.n	8000b7a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ac0:	4b31      	ldr	r3, [pc, #196]	@ (8000b88 <HAL_InitTick+0xe0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d10c      	bne.n	8000ae6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000acc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b8c <HAL_InitTick+0xe4>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <HAL_InitTick+0xdc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e037      	b.n	8000b56 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ae6:	f000 f9c7 	bl	8000e78 <HAL_SYSTICK_GetCLKSourceConfig>
 8000aea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d023      	beq.n	8000b3a <HAL_InitTick+0x92>
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d82d      	bhi.n	8000b54 <HAL_InitTick+0xac>
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_InitTick+0x5e>
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d00d      	beq.n	8000b20 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000b04:	e026      	b.n	8000b54 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_InitTick+0xe4>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <HAL_InitTick+0xdc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	60fb      	str	r3, [r7, #12]
        break;
 8000b1e:	e01a      	b.n	8000b56 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_InitTick+0xdc>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	60fb      	str	r3, [r7, #12]
        break;
 8000b38:	e00d      	b.n	8000b56 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0xdc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b50:	60fb      	str	r3, [r7, #12]
        break;
 8000b52:	e000      	b.n	8000b56 <HAL_InitTick+0xae>
        break;
 8000b54:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f914 	bl	8000d84 <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e009      	b.n	8000b7a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b66:	2200      	movs	r2, #0
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b6e:	f000 f8ef 	bl	8000d50 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000b72:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <HAL_InitTick+0xe8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000000c 	.word	0x2000000c
 8000b88:	e000e010 	.word	0xe000e010
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	20000008 	.word	0x20000008

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000000c 	.word	0x2000000c
 8000bb8:	200000ac 	.word	0x200000ac

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000ac 	.word	0x200000ac

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000000c 	.word	0x2000000c

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	@ (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	@ 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff6a 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff81 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb3 	bl	8000cd4 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff82 	bl	8000c80 <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00d      	b.n	8000db6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_SYSTICK_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_SYSTICK_Config+0x40>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_SYSTICK_Config+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <HAL_SYSTICK_Config+0x40>)
 8000dae:	f043 0303 	orr.w	r3, r3, #3
 8000db2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d844      	bhi.n	8000e60 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ddc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000dff 	.word	0x08000dff
 8000de0:	08000e1d 	.word	0x08000e1d
 8000de4:	08000e3f 	.word	0x08000e3f
 8000de8:	08000e61 	.word	0x08000e61
 8000dec:	08000df1 	.word	0x08000df1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6013      	str	r3, [r2, #0]
      break;
 8000dfc:	e031      	b.n	8000e62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e12:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000e1a:	e022      	b.n	8000e62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e22:	f023 0304 	bic.w	r3, r3, #4
 8000e26:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000e3c:	e011      	b.n	8000e62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e44:	f023 0304 	bic.w	r3, r3, #4
 8000e48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000e5e:	e000      	b.n	8000e62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000e60:	bf00      	nop
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010
 8000e74:	46020c00 	.word	0x46020c00

08000e78 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	e021      	b.n	8000ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000e9a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000ea2:	d011      	beq.n	8000ec8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000eaa:	d810      	bhi.n	8000ece <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000eb8:	d003      	beq.n	8000ec2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000eba:	e008      	b.n	8000ece <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
        break;
 8000ec0:	e008      	b.n	8000ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
        break;
 8000ec6:	e005      	b.n	8000ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
        break;
 8000ecc:	e002      	b.n	8000ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
        break;
 8000ed2:	bf00      	nop
    }
  }
  return systick_source;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010
 8000ee8:	46020c00 	.word	0x46020c00

08000eec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000efe:	e1ba      	b.n	8001276 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 81aa 	beq.w	8001270 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a55      	ldr	r2, [pc, #340]	@ (8001074 <HAL_GPIO_Init+0x188>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d15d      	bne.n	8000fe0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f54:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <HAL_GPIO_Init+0x18c>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f5c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f5e:	4a46      	ldr	r2, [pc, #280]	@ (8001078 <HAL_GPIO_Init+0x18c>)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220b      	movs	r2, #11
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69f9      	ldr	r1, [r7, #28]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e067      	b.n	80010b0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x104>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b12      	cmp	r3, #18
 8000fee:	d145      	bne.n	800107c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	4013      	ands	r3, r2
 8001012:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	f003 020f 	and.w	r2, r3, #15
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	4313      	orrs	r3, r2
 800102c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69f9      	ldr	r1, [r7, #28]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	4013      	ands	r3, r2
 8001052:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e01e      	b.n	80010b0 <HAL_GPIO_Init+0x1c4>
 8001072:	bf00      	nop
 8001074:	46020000 	.word	0x46020000
 8001078:	08009850 	.word	0x08009850
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	4013      	ands	r3, r2
 8001092:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d00b      	beq.n	80010d0 <HAL_GPIO_Init+0x1e4>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	2b11      	cmp	r3, #17
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001106:	2201      	movs	r2, #1
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4013      	ands	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4313      	orrs	r3, r2
 800112a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d017      	beq.n	800116a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4013      	ands	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4313      	orrs	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d07c      	beq.n	8001270 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001176:	4a47      	ldr	r2, [pc, #284]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3318      	adds	r3, #24
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	4013      	ands	r3, r2
 8001198:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0a9a      	lsrs	r2, r3, #10
 800119e:	4b3e      	ldr	r3, [pc, #248]	@ (8001298 <HAL_GPIO_Init+0x3ac>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	00d2      	lsls	r2, r2, #3
 80011aa:	4093      	lsls	r3, r2
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011b2:	4938      	ldr	r1, [pc, #224]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3318      	adds	r3, #24
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011c0:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80011e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800120e:	4a21      	ldr	r2, [pc, #132]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 8001216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800121a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	4013      	ands	r3, r2
 8001224:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800123a:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 8001244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001248:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_GPIO_Init+0x3a8>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	f47f ae3d 	bne.w	8000f00 <HAL_GPIO_Init+0x14>
  }
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3724      	adds	r7, #36	@ 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	46022000 	.word	0x46022000
 8001298:	002f7f7f 	.word	0x002f7f7f

0800129c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80012a4:	4b39      	ldr	r3, [pc, #228]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d10b      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012bc:	d905      	bls.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80012be:	4b33      	ldr	r3, [pc, #204]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4a32      	ldr	r2, [pc, #200]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e057      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d4:	d90a      	bls.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	4a2a      	ldr	r2, [pc, #168]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e8:	60d3      	str	r3, [r2, #12]
 80012ea:	e007      	b.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80012f4:	4925      	ldr	r1, [pc, #148]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a24      	ldr	r2, [pc, #144]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	099b      	lsrs	r3, r3, #6
 8001308:	2232      	movs	r2, #50	@ 0x32
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	099b      	lsrs	r3, r3, #6
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800131a:	e002      	b.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3b01      	subs	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x98>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f3      	bne.n	800131c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01b      	beq.n	8001372 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	099b      	lsrs	r3, r3, #6
 8001346:	2232      	movs	r2, #50	@ 0x32
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	099b      	lsrs	r3, r3, #6
 8001354:	3301      	adds	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001358:	e002      	b.n	8001360 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3b01      	subs	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f3      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e000      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	46020800 	.word	0x46020800
 8001390:	20000004 	.word	0x20000004
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800139e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	46020800 	.word	0x46020800

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f000 bec8 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ce:	4b99      	ldr	r3, [pc, #612]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d8:	4b96      	ldr	r3, [pc, #600]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 816c 	beq.w	80016c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80013f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_RCC_OscConfig+0x52>
 80013f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	f040 80de 	bne.w	80015ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	2b01      	cmp	r3, #1
 8001402:	f040 80da 	bne.w	80015ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	f000 bea5 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001418:	4b86      	ldr	r3, [pc, #536]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_RCC_OscConfig+0x7a>
 8001424:	4b83      	ldr	r3, [pc, #524]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800142c:	e005      	b.n	800143a <HAL_RCC_OscConfig+0x86>
 800142e:	4b81      	ldr	r3, [pc, #516]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800143a:	4293      	cmp	r3, r2
 800143c:	d255      	bcs.n	80014ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10a      	bne.n	800145a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f001 f9d9 	bl	8002800 <RCC_SetFlashLatencyFromMSIRange>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	f000 be82 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800145a:	4b76      	ldr	r3, [pc, #472]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4a75      	ldr	r2, [pc, #468]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001464:	6093      	str	r3, [r2, #8]
 8001466:	4b73      	ldr	r3, [pc, #460]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	4970      	ldr	r1, [pc, #448]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001480:	d309      	bcc.n	8001496 <HAL_RCC_OscConfig+0xe2>
 8001482:	4b6c      	ldr	r3, [pc, #432]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f023 021f 	bic.w	r2, r3, #31
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4969      	ldr	r1, [pc, #420]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001490:	4313      	orrs	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
 8001494:	e07e      	b.n	8001594 <HAL_RCC_OscConfig+0x1e0>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	2b00      	cmp	r3, #0
 800149c:	da0a      	bge.n	80014b4 <HAL_RCC_OscConfig+0x100>
 800149e:	4b65      	ldr	r3, [pc, #404]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	4961      	ldr	r1, [pc, #388]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]
 80014b2:	e06f      	b.n	8001594 <HAL_RCC_OscConfig+0x1e0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014bc:	d30a      	bcc.n	80014d4 <HAL_RCC_OscConfig+0x120>
 80014be:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4959      	ldr	r1, [pc, #356]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60cb      	str	r3, [r1, #12]
 80014d2:	e05f      	b.n	8001594 <HAL_RCC_OscConfig+0x1e0>
 80014d4:	4b57      	ldr	r3, [pc, #348]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	03db      	lsls	r3, r3, #15
 80014e2:	4954      	ldr	r1, [pc, #336]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	60cb      	str	r3, [r1, #12]
 80014e8:	e054      	b.n	8001594 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80014ea:	4b52      	ldr	r3, [pc, #328]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4a51      	ldr	r2, [pc, #324]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014f4:	6093      	str	r3, [r2, #8]
 80014f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	494c      	ldr	r1, [pc, #304]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001510:	d309      	bcc.n	8001526 <HAL_RCC_OscConfig+0x172>
 8001512:	4b48      	ldr	r3, [pc, #288]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 021f 	bic.w	r2, r3, #31
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4945      	ldr	r1, [pc, #276]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001520:	4313      	orrs	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e028      	b.n	8001578 <HAL_RCC_OscConfig+0x1c4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	2b00      	cmp	r3, #0
 800152c:	da0a      	bge.n	8001544 <HAL_RCC_OscConfig+0x190>
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	015b      	lsls	r3, r3, #5
 800153c:	493d      	ldr	r1, [pc, #244]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800153e:	4313      	orrs	r3, r2
 8001540:	60cb      	str	r3, [r1, #12]
 8001542:	e019      	b.n	8001578 <HAL_RCC_OscConfig+0x1c4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800154c:	d30a      	bcc.n	8001564 <HAL_RCC_OscConfig+0x1b0>
 800154e:	4b39      	ldr	r3, [pc, #228]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	029b      	lsls	r3, r3, #10
 800155c:	4935      	ldr	r1, [pc, #212]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
 8001562:	e009      	b.n	8001578 <HAL_RCC_OscConfig+0x1c4>
 8001564:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	03db      	lsls	r3, r3, #15
 8001572:	4930      	ldr	r1, [pc, #192]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001574:	4313      	orrs	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10a      	bne.n	8001594 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	4618      	mov	r0, r3
 8001584:	f001 f93c 	bl	8002800 <RCC_SetFlashLatencyFromMSIRange>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	f000 bde5 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001594:	f001 f8de 	bl	8002754 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001598:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <HAL_RCC_OscConfig+0x284>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fa83 	bl	8000aa8 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80015a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 808a 	beq.w	80016c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80015b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015b6:	f000 bdd2 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d066      	beq.n	8001690 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80015ce:	f7ff faf5 	bl	8000bbc <HAL_GetTick>
 80015d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d6:	f7ff faf1 	bl	8000bbc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d902      	bls.n	80015ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f000 bdba 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ef      	beq.n	80015d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001600:	6093      	str	r3, [r2, #8]
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	4909      	ldr	r1, [pc, #36]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800161c:	d30e      	bcc.n	800163c <HAL_RCC_OscConfig+0x288>
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f023 021f 	bic.w	r2, r3, #31
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4902      	ldr	r1, [pc, #8]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800162c:	4313      	orrs	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
 8001630:	e04a      	b.n	80016c8 <HAL_RCC_OscConfig+0x314>
 8001632:	bf00      	nop
 8001634:	46020c00 	.word	0x46020c00
 8001638:	20000008 	.word	0x20000008
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	2b00      	cmp	r3, #0
 8001642:	da0a      	bge.n	800165a <HAL_RCC_OscConfig+0x2a6>
 8001644:	4b98      	ldr	r3, [pc, #608]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	015b      	lsls	r3, r3, #5
 8001652:	4995      	ldr	r1, [pc, #596]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
 8001658:	e036      	b.n	80016c8 <HAL_RCC_OscConfig+0x314>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001662:	d30a      	bcc.n	800167a <HAL_RCC_OscConfig+0x2c6>
 8001664:	4b90      	ldr	r3, [pc, #576]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	029b      	lsls	r3, r3, #10
 8001672:	498d      	ldr	r1, [pc, #564]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
 8001678:	e026      	b.n	80016c8 <HAL_RCC_OscConfig+0x314>
 800167a:	4b8b      	ldr	r3, [pc, #556]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	03db      	lsls	r3, r3, #15
 8001688:	4987      	ldr	r1, [pc, #540]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001690:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a84      	ldr	r2, [pc, #528]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800169c:	f7ff fa8e 	bl	8000bbc <HAL_GetTick>
 80016a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80016a2:	e009      	b.n	80016b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a4:	f7ff fa8a 	bl	8000bbc <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d902      	bls.n	80016b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f000 bd53 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80016b8:	4b7b      	ldr	r3, [pc, #492]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ef      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80016c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 808b 	beq.w	80017ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x334>
 80016dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d17d      	bne.n	80017ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f000 bd34 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x35a>
 8001700:	4b69      	ldr	r3, [pc, #420]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a68      	ldr	r2, [pc, #416]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e041      	b.n	8001792 <HAL_RCC_OscConfig+0x3de>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x38a>
 8001718:	4b63      	ldr	r3, [pc, #396]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a62      	ldr	r2, [pc, #392]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b60      	ldr	r3, [pc, #384]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5f      	ldr	r2, [pc, #380]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b5d      	ldr	r3, [pc, #372]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a5c      	ldr	r2, [pc, #368]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e029      	b.n	8001792 <HAL_RCC_OscConfig+0x3de>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001746:	d112      	bne.n	800176e <HAL_RCC_OscConfig+0x3ba>
 8001748:	4b57      	ldr	r3, [pc, #348]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a56      	ldr	r2, [pc, #344]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b54      	ldr	r3, [pc, #336]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a53      	ldr	r2, [pc, #332]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b51      	ldr	r3, [pc, #324]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a50      	ldr	r2, [pc, #320]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e011      	b.n	8001792 <HAL_RCC_OscConfig+0x3de>
 800176e:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a4d      	ldr	r2, [pc, #308]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a4a      	ldr	r2, [pc, #296]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a47      	ldr	r2, [pc, #284]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d014      	beq.n	80017c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800179a:	f7ff fa0f 	bl	8000bbc <HAL_GetTick>
 800179e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a0:	e009      	b.n	80017b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a2:	f7ff fa0b 	bl	8000bbc <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	@ 0x64
 80017ae:	d902      	bls.n	80017b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f000 bcd4 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0ef      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3ee>
 80017c2:	e013      	b.n	80017ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9fa 	bl	8000bbc <HAL_GetTick>
 80017c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	e009      	b.n	80017e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff f9f6 	bl	8000bbc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d902      	bls.n	80017e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	f000 bcbf 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e0:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ef      	bne.n	80017cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d05f      	beq.n	80018b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x456>
 80017fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d114      	bne.n	800182e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001806:	2b02      	cmp	r3, #2
 8001808:	d111      	bne.n	800182e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f000 bca3 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	4920      	ldr	r1, [pc, #128]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	4313      	orrs	r3, r2
 800182a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800182c:	e044      	b.n	80018b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d024      	beq.n	8001880 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001840:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001842:	f7ff f9bb 	bl	8000bbc <HAL_GetTick>
 8001846:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001848:	e009      	b.n	800185e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff f9b7 	bl	8000bbc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d902      	bls.n	800185e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	f000 bc80 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0ef      	beq.n	800184a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	490b      	ldr	r1, [pc, #44]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	610b      	str	r3, [r1, #16]
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800188c:	f7ff f996 	bl	8000bbc <HAL_GetTick>
 8001890:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff f992 	bl	8000bbc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d904      	bls.n	80018ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	f000 bc5b 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
 80018a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	4baf      	ldr	r3, [pc, #700]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ed      	bne.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80c8 	beq.w	8001a56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018cc:	4ba7      	ldr	r3, [pc, #668]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d111      	bne.n	80018fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4ba4      	ldr	r3, [pc, #656]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e0:	4aa2      	ldr	r2, [pc, #648]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018ea:	4ba0      	ldr	r3, [pc, #640]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80018ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018fe:	4b9c      	ldr	r3, [pc, #624]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d119      	bne.n	800193e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800190a:	4b99      	ldr	r3, [pc, #612]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190e:	4a98      	ldr	r2, [pc, #608]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7ff f951 	bl	8000bbc <HAL_GetTick>
 800191a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff f94d 	bl	8000bbc <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d902      	bls.n	8001932 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	f000 bc16 	b.w	800215e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001932:	4b8f      	ldr	r3, [pc, #572]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0ef      	beq.n	800191e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d05f      	beq.n	8001a06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001946:	4b89      	ldr	r3, [pc, #548]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800194c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	429a      	cmp	r2, r3
 800195a:	d037      	beq.n	80019cc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e3f4      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800197e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001984:	4a79      	ldr	r2, [pc, #484]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001986:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800198a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800198e:	f7ff f915 	bl	8000bbc <HAL_GetTick>
 8001992:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f911 	bl	8000bbc <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e3da      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80019a8:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80019aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80019b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80019b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4969      	ldr	r1, [pc, #420]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80019cc:	4b67      	ldr	r3, [pc, #412]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80019ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019d2:	4a66      	ldr	r2, [pc, #408]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80019d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80019dc:	f7ff f8ee 	bl	8000bbc <HAL_GetTick>
 80019e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff f8ea 	bl	8000bbc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e3b3      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 80019f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ef      	beq.n	80019e4 <HAL_RCC_OscConfig+0x630>
 8001a04:	e01b      	b.n	8001a3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001a06:	4b59      	ldr	r3, [pc, #356]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a0c:	4a57      	ldr	r2, [pc, #348]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001a12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001a16:	f7ff f8d1 	bl	8000bbc <HAL_GetTick>
 8001a1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f8cd 	bl	8000bbc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e396      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a30:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ef      	bne.n	8001a1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a4c:	4a47      	ldr	r2, [pc, #284]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8111 	beq.w	8001c86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6a:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d111      	bne.n	8001a9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a88:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d118      	bne.n	8001ada <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f882 	bl	8000bbc <HAL_GetTick>
 8001ab8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abc:	f7ff f87e 	bl	8000bbc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e347      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ace:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <HAL_RCC_OscConfig+0x7bc>)
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01f      	beq.n	8001b26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d010      	beq.n	8001b14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001af8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b08:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b12:	e018      	b.n	8001b46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b1a:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b24:	e00f      	b.n	8001b46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b6c <HAL_RCC_OscConfig+0x7b8>)
 8001b3e:	f023 0304 	bic.w	r3, r3, #4
 8001b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d057      	beq.n	8001bfe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f835 	bl	8000bbc <HAL_GetTick>
 8001b52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b54:	e00e      	b.n	8001b74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff f831 	bl	8000bbc <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d905      	bls.n	8001b74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e2f8      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
 8001b6c:	46020c00 	.word	0x46020c00
 8001b70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b74:	4b9c      	ldr	r3, [pc, #624]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0e9      	beq.n	8001b56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b8e:	4b96      	ldr	r3, [pc, #600]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b94:	4a94      	ldr	r2, [pc, #592]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f80c 	bl	8000bbc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e2d3      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bb6:	4b8c      	ldr	r3, [pc, #560]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ed      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x7ec>
 8001bc4:	e053      	b.n	8001c6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bc6:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bcc:	4a86      	ldr	r2, [pc, #536]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7fe fff0 	bl	8000bbc <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e2b7      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bee:	4b7e      	ldr	r3, [pc, #504]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ed      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x824>
 8001bfc:	e037      	b.n	8001c6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001bfe:	f7fe ffdd 	bl	8000bbc <HAL_GetTick>
 8001c02:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe ffd9 	bl	8000bbc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e2a0      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c1c:	4b72      	ldr	r3, [pc, #456]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ed      	bne.n	8001c06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01a      	beq.n	8001c6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c38:	4b6b      	ldr	r3, [pc, #428]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe ffb7 	bl	8000bbc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e27e      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c60:	4b61      	ldr	r3, [pc, #388]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ed      	bne.n	8001c4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	4b5c      	ldr	r3, [pc, #368]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d036      	beq.n	8001d00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d019      	beq.n	8001cce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001c9a:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a52      	ldr	r2, [pc, #328]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001ca0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ca6:	f7fe ff89 	bl	8000bbc <HAL_GetTick>
 8001caa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cae:	f7fe ff85 	bl	8000bbc <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e24e      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cc0:	4b49      	ldr	r3, [pc, #292]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x8fa>
 8001ccc:	e018      	b.n	8001d00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001cce:	4b46      	ldr	r3, [pc, #280]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a45      	ldr	r2, [pc, #276]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cd8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cda:	f7fe ff6f 	bl	8000bbc <HAL_GetTick>
 8001cde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7fe ff6b 	bl	8000bbc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e234      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d036      	beq.n	8001d7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001d14:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a33      	ldr	r2, [pc, #204]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d20:	f7fe ff4c 	bl	8000bbc <HAL_GetTick>
 8001d24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001d28:	f7fe ff48 	bl	8000bbc <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e211      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x974>
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a26      	ldr	r2, [pc, #152]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d54:	f7fe ff32 	bl	8000bbc <HAL_GetTick>
 8001d58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001d5c:	f7fe ff2e 	bl	8000bbc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1f7      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d07f      	beq.n	8001e86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d062      	beq.n	8001e54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d98:	6093      	str	r3, [r2, #8]
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	4910      	ldr	r1, [pc, #64]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001db4:	d309      	bcc.n	8001dca <HAL_RCC_OscConfig+0xa16>
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f023 021f 	bic.w	r2, r3, #31
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4909      	ldr	r1, [pc, #36]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
 8001dc8:	e02a      	b.n	8001e20 <HAL_RCC_OscConfig+0xa6c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da0c      	bge.n	8001dec <HAL_RCC_OscConfig+0xa38>
 8001dd2:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	4901      	ldr	r1, [pc, #4]	@ (8001de8 <HAL_RCC_OscConfig+0xa34>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
 8001de6:	e01b      	b.n	8001e20 <HAL_RCC_OscConfig+0xa6c>
 8001de8:	46020c00 	.word	0x46020c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df4:	d30a      	bcc.n	8001e0c <HAL_RCC_OscConfig+0xa58>
 8001df6:	4ba1      	ldr	r3, [pc, #644]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	499d      	ldr	r1, [pc, #628]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60cb      	str	r3, [r1, #12]
 8001e0a:	e009      	b.n	8001e20 <HAL_RCC_OscConfig+0xa6c>
 8001e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	03db      	lsls	r3, r3, #15
 8001e1a:	4998      	ldr	r1, [pc, #608]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001e20:	4b96      	ldr	r3, [pc, #600]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a95      	ldr	r2, [pc, #596]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e2c:	f7fe fec6 	bl	8000bbc <HAL_GetTick>
 8001e30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001e34:	f7fe fec2 	bl	8000bbc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e18b      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001e46:	4b8d      	ldr	r3, [pc, #564]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xa80>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001e54:	4b89      	ldr	r3, [pc, #548]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a88      	ldr	r2, [pc, #544]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e5a:	f023 0310 	bic.w	r3, r3, #16
 8001e5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e60:	f7fe feac 	bl	8000bbc <HAL_GetTick>
 8001e64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001e68:	f7fe fea8 	bl	8000bbc <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e171      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001e7a:	4b80      	ldr	r3, [pc, #512]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8166 	beq.w	800215c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e96:	4b79      	ldr	r3, [pc, #484]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	f000 80f2 	beq.w	8002088 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	f040 80c5 	bne.w	8002038 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b73      	ldr	r3, [pc, #460]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a72      	ldr	r2, [pc, #456]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001eba:	f7fe fe7f 	bl	8000bbc <HAL_GetTick>
 8001ebe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe fe7b 	bl	8000bbc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e144      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ed4:	4b69      	ldr	r3, [pc, #420]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee0:	4b66      	ldr	r3, [pc, #408]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d111      	bne.n	8001f12 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b63      	ldr	r3, [pc, #396]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef4:	4a61      	ldr	r2, [pc, #388]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001efe:	4b5f      	ldr	r3, [pc, #380]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001f12:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_RCC_OscConfig+0xccc>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001f26:	4b56      	ldr	r3, [pc, #344]	@ (8002080 <HAL_RCC_OscConfig+0xccc>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4a55      	ldr	r2, [pc, #340]	@ (8002080 <HAL_RCC_OscConfig+0xccc>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f30:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4b52      	ldr	r3, [pc, #328]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f3a:	f023 0303 	bic.w	r3, r3, #3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f46:	3a01      	subs	r2, #1
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f50:	430a      	orrs	r2, r1
 8001f52:	494a      	ldr	r1, [pc, #296]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f58:	4b48      	ldr	r3, [pc, #288]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f5c:	4b49      	ldr	r3, [pc, #292]	@ (8002084 <HAL_RCC_OscConfig+0xcd0>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f64:	3a01      	subs	r2, #1
 8001f66:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f6e:	3a01      	subs	r2, #1
 8001f70:	0252      	lsls	r2, r2, #9
 8001f72:	b292      	uxth	r2, r2
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	0412      	lsls	r2, r2, #16
 8001f7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001f88:	3a01      	subs	r2, #1
 8001f8a:	0612      	lsls	r2, r2, #24
 8001f8c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001f90:	430a      	orrs	r2, r1
 8001f92:	493a      	ldr	r1, [pc, #232]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f98:	4b38      	ldr	r3, [pc, #224]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	4a37      	ldr	r2, [pc, #220]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001f9e:	f023 0310 	bic.w	r3, r3, #16
 8001fa2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	4a34      	ldr	r2, [pc, #208]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001fae:	4b33      	ldr	r3, [pc, #204]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	4a32      	ldr	r2, [pc, #200]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001fba:	4b30      	ldr	r3, [pc, #192]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	f023 020c 	bic.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	492d      	ldr	r1, [pc, #180]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8001fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_RCC_OscConfig+0xccc>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <HAL_RCC_OscConfig+0xccc>)
 8001fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fde:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001fe0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b24      	ldr	r3, [pc, #144]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fee:	4a23      	ldr	r2, [pc, #140]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002004:	f7fe fdda 	bl	8000bbc <HAL_GetTick>
 8002008:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe fdd6 	bl	8000bbc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e09f      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	4a13      	ldr	r2, [pc, #76]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002034:	6293      	str	r3, [r2, #40]	@ 0x28
 8002036:	e091      	b.n	800215c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b10      	ldr	r3, [pc, #64]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0f      	ldr	r2, [pc, #60]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002044:	f7fe fdba 	bl	8000bbc <HAL_GetTick>
 8002048:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fdb6 	bl	8000bbc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e07f      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 800206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206e:	4a03      	ldr	r2, [pc, #12]	@ (800207c <HAL_RCC_OscConfig+0xcc8>)
 8002070:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002074:	f023 0303 	bic.w	r3, r3, #3
 8002078:	6293      	str	r3, [r2, #40]	@ 0x28
 800207a:	e06f      	b.n	800215c <HAL_RCC_OscConfig+0xda8>
 800207c:	46020c00 	.word	0x46020c00
 8002080:	46020800 	.word	0x46020800
 8002084:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002088:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800208e:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 8002090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002092:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	2b01      	cmp	r3, #1
 800209a:	d039      	beq.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0203 	and.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d132      	bne.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d129      	bne.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d122      	bne.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d11a      	bne.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	0a5b      	lsrs	r3, r3, #9
 80020de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d111      	bne.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	0e1b      	lsrs	r3, r3, #24
 8002102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e024      	b.n	800215e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 8002116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002122:	429a      	cmp	r2, r3
 8002124:	d01a      	beq.n	800215c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	4a0f      	ldr	r2, [pc, #60]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 800212c:	f023 0310 	bic.w	r3, r3, #16
 8002130:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fd43 	bl	8000bbc <HAL_GetTick>
 8002136:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002138:	bf00      	nop
 800213a:	f7fe fd3f 	bl	8000bbc <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002142:	4293      	cmp	r3, r2
 8002144:	d0f9      	beq.n	800213a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_RCC_OscConfig+0xdb4>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3738      	adds	r7, #56	@ 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	46020c00 	.word	0x46020c00

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e1d9      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b9b      	ldr	r3, [pc, #620]	@ (80023f0 <HAL_RCC_ClockConfig+0x284>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b98      	ldr	r3, [pc, #608]	@ (80023f0 <HAL_RCC_ClockConfig+0x284>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	4996      	ldr	r1, [pc, #600]	@ (80023f0 <HAL_RCC_ClockConfig+0x284>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b94      	ldr	r3, [pc, #592]	@ (80023f0 <HAL_RCC_ClockConfig+0x284>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e1c1      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	4b8c      	ldr	r3, [pc, #560]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d908      	bls.n	80021de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80021cc:	4b89      	ldr	r3, [pc, #548]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	4986      	ldr	r1, [pc, #536]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d012      	beq.n	8002210 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	4b81      	ldr	r3, [pc, #516]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d909      	bls.n	8002210 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80021fc:	4b7d      	ldr	r3, [pc, #500]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	497a      	ldr	r1, [pc, #488]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 800220c:	4313      	orrs	r3, r2
 800220e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d010      	beq.n	800223e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b74      	ldr	r3, [pc, #464]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002228:	429a      	cmp	r2, r3
 800222a:	d908      	bls.n	800223e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b71      	ldr	r3, [pc, #452]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	496e      	ldr	r1, [pc, #440]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 800223a:	4313      	orrs	r3, r2
 800223c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d010      	beq.n	800226c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	4b69      	ldr	r3, [pc, #420]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	429a      	cmp	r2, r3
 8002258:	d908      	bls.n	800226c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800225a:	4b66      	ldr	r3, [pc, #408]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f023 020f 	bic.w	r2, r3, #15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4963      	ldr	r1, [pc, #396]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002268:	4313      	orrs	r3, r2
 800226a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80d2 	beq.w	800241e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d143      	bne.n	800230e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b5b      	ldr	r3, [pc, #364]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d110      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229a:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022a4:	4b53      	ldr	r3, [pc, #332]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80022b6:	f7fe fc81 	bl	8000bbc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80022bc:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <HAL_RCC_ClockConfig+0x28c>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00f      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80022ca:	f7fe fc77 	bl	8000bbc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e12b      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80022dc:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <HAL_RCC_ClockConfig+0x28c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022ee:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f4:	4a3f      	ldr	r2, [pc, #252]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022fe:	4b3d      	ldr	r3, [pc, #244]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d121      	bne.n	800234e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e112      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d115      	bne.n	800234e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e106      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800232e:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0fa      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233e:	4b2d      	ldr	r3, [pc, #180]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0f2      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4926      	ldr	r1, [pc, #152]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 800235c:	4313      	orrs	r3, r2
 800235e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002360:	f7fe fc2c 	bl	8000bbc <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d112      	bne.n	8002394 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe fc24 	bl	8000bbc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0d6      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002386:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_ClockConfig+0x204>
 8002392:	e044      	b.n	800241e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d112      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7fe fc0d 	bl	8000bbc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0bf      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_ClockConfig+0x232>
 80023c0:	e02d      	b.n	800241e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d123      	bne.n	8002412 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fbf6 	bl	8000bbc <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0a8      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <HAL_RCC_ClockConfig+0x288>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ee      	bne.n	80023cc <HAL_RCC_ClockConfig+0x260>
 80023ee:	e016      	b.n	800241e <HAL_RCC_ClockConfig+0x2b2>
 80023f0:	40022000 	.word	0x40022000
 80023f4:	46020c00 	.word	0x46020c00
 80023f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fbde 	bl	8000bbc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e090      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d1ee      	bne.n	80023fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d010      	beq.n	800244c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	4b43      	ldr	r3, [pc, #268]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	429a      	cmp	r2, r3
 8002438:	d208      	bcs.n	800244c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800243a:	4b40      	ldr	r3, [pc, #256]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f023 020f 	bic.w	r2, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	493d      	ldr	r1, [pc, #244]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <HAL_RCC_ClockConfig+0x3d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d210      	bcs.n	800247c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_RCC_ClockConfig+0x3d4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 020f 	bic.w	r2, r3, #15
 8002462:	4937      	ldr	r1, [pc, #220]	@ (8002540 <HAL_RCC_ClockConfig+0x3d4>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <HAL_RCC_ClockConfig+0x3d4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e05b      	b.n	8002534 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002494:	429a      	cmp	r2, r3
 8002496:	d208      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4925      	ldr	r1, [pc, #148]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	4b20      	ldr	r3, [pc, #128]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d209      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4919      	ldr	r1, [pc, #100]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d208      	bcs.n	800250a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	490d      	ldr	r1, [pc, #52]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_RCC_ClockConfig+0x3d0>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	490a      	ldr	r1, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x3d8>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x3dc>)
 8002522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x3e0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fabd 	bl	8000aa8 <HAL_InitTick>
 800252e:	4603      	mov	r3, r0
 8002530:	73fb      	strb	r3, [r7, #15]

  return status;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	46020c00 	.word	0x46020c00
 8002540:	40022000 	.word	0x40022000
 8002544:	080097f8 	.word	0x080097f8
 8002548:	20000004 	.word	0x20000004
 800254c:	20000008 	.word	0x20000008

08002550 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b08b      	sub	sp, #44	@ 0x2c
 8002554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255e:	4b78      	ldr	r3, [pc, #480]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002568:	4b75      	ldr	r3, [pc, #468]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x34>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d11e      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002584:	4b6e      	ldr	r3, [pc, #440]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002590:	4b6b      	ldr	r3, [pc, #428]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002596:	0b1b      	lsrs	r3, r3, #12
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
 800259e:	e005      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80025a0:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	0f1b      	lsrs	r3, r3, #28
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025ac:	4a65      	ldr	r2, [pc, #404]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d110      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025c0:	e00d      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	e004      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d101      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025da:	4b5b      	ldr	r3, [pc, #364]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80025dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	f040 80a5 	bne.w	8002730 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80025e6:	4b56      	ldr	r3, [pc, #344]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80025f0:	4b53      	ldr	r3, [pc, #332]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80025fe:	4b50      	ldr	r3, [pc, #320]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800260a:	4b4d      	ldr	r3, [pc, #308]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002622:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d003      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xe4>
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d022      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x128>
 8002632:	e043      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800274c <HAL_RCC_GetSysClockFreq+0x1fc>
 8002642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002646:	4b3e      	ldr	r3, [pc, #248]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002656:	ed97 6a01 	vldr	s12, [r7, #4]
 800265a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x200>
 800265e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002662:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002676:	e046      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800274c <HAL_RCC_GetSysClockFreq+0x1fc>
 8002686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800268a:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800268c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800269a:	ed97 6a01 	vldr	s12, [r7, #4]
 800269e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x200>
 80026a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026ba:	e024      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026e4:	ed97 6a01 	vldr	s12, [r7, #4]
 80026e8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002750 <HAL_RCC_GetSysClockFreq+0x200>
 80026ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002704:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	0e1b      	lsrs	r3, r3, #24
 800270c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002710:	3301      	adds	r3, #1
 8002712:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800271e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800272a:	ee17 3a90 	vmov	r3, s15
 800272e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002730:	6a3b      	ldr	r3, [r7, #32]
}
 8002732:	4618      	mov	r0, r3
 8002734:	372c      	adds	r7, #44	@ 0x2c
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	46020c00 	.word	0x46020c00
 8002744:	08009810 	.word	0x08009810
 8002748:	00f42400 	.word	0x00f42400
 800274c:	4b742400 	.word	0x4b742400
 8002750:	46000000 	.word	0x46000000

08002754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002758:	f7ff fefa 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_RCC_GetHCLKFreq+0x28>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4906      	ldr	r1, [pc, #24]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x30>)
 8002770:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002772:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x30>)
 8002774:	681b      	ldr	r3, [r3, #0]
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	46020c00 	.word	0x46020c00
 8002780:	080097f8 	.word	0x080097f8
 8002784:	20000004 	.word	0x20000004

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800278c:	f7ff ffe2 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	46020c00 	.word	0x46020c00
 80027ac:	08009808 	.word	0x08009808

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80027b4:	f7ff ffce 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	46020c00 	.word	0x46020c00
 80027d4:	08009808 	.word	0x08009808

080027d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80027dc:	f7ff ffba 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	@ (80027fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	46020c00 	.word	0x46020c00
 80027fc:	08009808 	.word	0x08009808

08002800 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002808:	4b3e      	ldr	r3, [pc, #248]	@ (8002904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800280a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002816:	f7fe fdbf 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 800281a:	6178      	str	r0, [r7, #20]
 800281c:	e019      	b.n	8002852 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002824:	4a37      	ldr	r2, [pc, #220]	@ (8002904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800282e:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800283c:	f7fe fdac 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8002840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002848:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002858:	d003      	beq.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002860:	d109      	bne.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002868:	d202      	bcs.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800286a:	2301      	movs	r3, #1
 800286c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800286e:	e033      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002874:	e030      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800287c:	d208      	bcs.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002884:	d102      	bne.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002886:	2303      	movs	r3, #3
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e025      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e035      	b.n	80028fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002896:	d90f      	bls.n	80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80028a4:	d902      	bls.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e015      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	e012      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e00f      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028be:	d109      	bne.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c6:	d102      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80028c8:	2301      	movs	r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e004      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80028ce:	2302      	movs	r3, #2
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	e001      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80028d4:	2301      	movs	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 020f 	bic.w	r2, r3, #15
 80028e0:	4909      	ldr	r1, [pc, #36]	@ (8002908 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80028e8:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	46020c00 	.word	0x46020c00
 8002908:	40022000 	.word	0x40022000

0800290c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800290c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002910:	b0b6      	sub	sp, #216	@ 0xd8
 8002912:	af00      	add	r7, sp, #0
 8002914:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002918:	2300      	movs	r3, #0
 800291a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800291e:	2300      	movs	r3, #0
 8002920:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f002 0401 	and.w	r4, r2, #1
 8002930:	2500      	movs	r5, #0
 8002932:	ea54 0305 	orrs.w	r3, r4, r5
 8002936:	d00b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002938:	4bc5      	ldr	r3, [pc, #788]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800293a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800293e:	f023 0103 	bic.w	r1, r3, #3
 8002942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002948:	4ac1      	ldr	r2, [pc, #772]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800294a:	430b      	orrs	r3, r1
 800294c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f002 0804 	and.w	r8, r2, #4
 800295c:	f04f 0900 	mov.w	r9, #0
 8002960:	ea58 0309 	orrs.w	r3, r8, r9
 8002964:	d00b      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002966:	4bba      	ldr	r3, [pc, #744]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	4ab6      	ldr	r2, [pc, #728]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002978:	430b      	orrs	r3, r1
 800297a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800297e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f002 0a08 	and.w	sl, r2, #8
 800298a:	f04f 0b00 	mov.w	fp, #0
 800298e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002992:	d00b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002994:	4bae      	ldr	r3, [pc, #696]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800299e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	4aaa      	ldr	r2, [pc, #680]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f002 0310 	and.w	r3, r2, #16
 80029b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80029c6:	460b      	mov	r3, r1
 80029c8:	4313      	orrs	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80029cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f002 0320 	and.w	r3, r2, #32
 80029f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4313      	orrs	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002a04:	4b92      	ldr	r3, [pc, #584]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a0a:	f023 0107 	bic.w	r1, r3, #7
 8002a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	4a8e      	ldr	r2, [pc, #568]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a16:	430b      	orrs	r3, r1
 8002a18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a36:	460b      	mov	r3, r1
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	d00b      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002a3c:	4b84      	ldr	r3, [pc, #528]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a42:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a4c:	4a80      	ldr	r2, [pc, #512]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002a60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002a6a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4313      	orrs	r3, r2
 8002a72:	d00b      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002a74:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a84:	4a72      	ldr	r2, [pc, #456]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a86:	430b      	orrs	r3, r1
 8002a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002aa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002aac:	4b68      	ldr	r3, [pc, #416]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ab2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002abc:	4a64      	ldr	r2, [pc, #400]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ad0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ada:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aea:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8002aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002af6:	430b      	orrs	r3, r1
 8002af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8002b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002b12:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002b16:	460b      	mov	r3, r1
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b22:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2c:	4a48      	ldr	r2, [pc, #288]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4313      	orrs	r3, r2
 8002b52:	d00b      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002b54:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b5a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b64:	4a3a      	ldr	r2, [pc, #232]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002b82:	460b      	mov	r3, r1
 8002b84:	4313      	orrs	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002b88:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b98:	4a2d      	ldr	r2, [pc, #180]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002bac:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bae:	2300      	movs	r3, #0
 8002bb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bb2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	d04f      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc4:	2b80      	cmp	r3, #128	@ 0x80
 8002bc6:	d02d      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002bc8:	2b80      	cmp	r3, #128	@ 0x80
 8002bca:	d827      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002bcc:	2b60      	cmp	r3, #96	@ 0x60
 8002bce:	d02b      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002bd0:	2b60      	cmp	r3, #96	@ 0x60
 8002bd2:	d823      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002bd4:	2b40      	cmp	r3, #64	@ 0x40
 8002bd6:	d006      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002bd8:	2b40      	cmp	r3, #64	@ 0x40
 8002bda:	d81f      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d011      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002be4:	e01a      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bf2:	e01a      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 f914 	bl	8004e28 <RCCEx_PLL2_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c06:	e010      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c0c:	332c      	adds	r3, #44	@ 0x2c
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 f9a2 	bl	8004f58 <RCCEx_PLL3_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c1a:	e006      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8002c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c2a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d110      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c38:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8002c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c44:	4a02      	ldr	r2, [pc, #8]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c46:	430b      	orrs	r3, r1
 8002c48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002c4e:	bf00      	nop
 8002c50:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002c58:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002c72:	460b      	mov	r3, r1
 8002c74:	4313      	orrs	r3, r2
 8002c76:	d046      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002c80:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002c8a:	d821      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002c8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c90:	d022      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c96:	d81b      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002c98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c9c:	d01c      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ca2:	d815      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cae:	d80f      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d011      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002cba:	e009      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 f8b0 	bl	8004e28 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002cce:	e004      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8002cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cda:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002ce2:	4bb6      	ldr	r3, [pc, #728]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ce8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002cf4:	4ab1      	ldr	r2, [pc, #708]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cfc:	e003      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002d02:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d14:	2300      	movs	r3, #0
 8002d16:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	d03e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d81d      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d73 	.word	0x08002d73
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d57 	.word	0x08002d57
 8002d40:	08002d73 	.word	0x08002d73
 8002d44:	08002d73 	.word	0x08002d73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d48:	4b9c      	ldr	r3, [pc, #624]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	4a9b      	ldr	r2, [pc, #620]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d52:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8002d54:	e00e      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d5a:	332c      	adds	r3, #44	@ 0x2c
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 f8fb 	bl	8004f58 <RCCEx_PLL3_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002d68:	e004      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8002d72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002d74:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d82:	f023 0107 	bic.w	r1, r3, #7
 8002d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d8e:	4a8b      	ldr	r2, [pc, #556]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002d96:	e003      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002d9c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002dac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dae:	2300      	movs	r3, #0
 8002db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002db6:	460b      	mov	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	d04a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002dca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dce:	d821      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002dd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dd4:	d024      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dda:	d81b      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002de0:	d00e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002de6:	d815      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df0:	d110      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002df2:	4b72      	ldr	r3, [pc, #456]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df6:	4a71      	ldr	r2, [pc, #452]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8002dfe:	e012      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e04:	332c      	adds	r3, #44	@ 0x2c
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 f8a6 	bl	8004f58 <RCCEx_PLL3_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002e1a:	e004      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8002e1c:	bf00      	nop
 8002e1e:	e002      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8002e20:	bf00      	nop
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8002e24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002e26:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002e2e:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	4a5e      	ldr	r2, [pc, #376]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002e42:	430b      	orrs	r3, r1
 8002e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e48:	e003      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002e4e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e60:	2300      	movs	r3, #0
 8002e62:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e64:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f000 80ba 	beq.w	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b51      	ldr	r3, [pc, #324]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d113      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8a:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e94:	4b49      	ldr	r3, [pc, #292]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002eac:	4b44      	ldr	r3, [pc, #272]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	4a43      	ldr	r2, [pc, #268]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb8:	f7fd fe80 	bl	8000bbc <HAL_GetTick>
 8002ebc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ec0:	e00b      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fd fe7b 	bl	8000bbc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d903      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002eda:	4b39      	ldr	r3, [pc, #228]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0ed      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8002ee6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d16a      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eee:	4b33      	ldr	r3, [pc, #204]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f08:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d01b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f14:	4b29      	ldr	r3, [pc, #164]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f22:	4b26      	ldr	r3, [pc, #152]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f28:	4a24      	ldr	r2, [pc, #144]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f32:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f38:	4a20      	ldr	r2, [pc, #128]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f42:	4a1e      	ldr	r2, [pc, #120]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d019      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fd fe30 	bl	8000bbc <HAL_GetTick>
 8002f5c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	e00d      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fe2b 	bl	8000bbc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f6c:	1ad2      	subs	r2, r2, r3
 8002f6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d903      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ea      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8002f8c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10d      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002fa6:	4a05      	ldr	r2, [pc, #20]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fae:	e00d      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002fb4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8002fba:	bf00      	nop
 8002fbc:	46020c00 	.word	0x46020c00
 8002fc0:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002fc8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fcc:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4bb2      	ldr	r3, [pc, #712]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fda:	4ab1      	ldr	r2, [pc, #708]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8002ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	d042      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003004:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003008:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800300c:	d022      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800300e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003012:	d81b      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003018:	d011      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x732>
 800301a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800301e:	d815      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003024:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003028:	d110      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800302a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800302e:	3308      	adds	r3, #8
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fef9 	bl	8004e28 <RCCEx_PLL2_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800303c:	e00d      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303e:	4b98      	ldr	r3, [pc, #608]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	4a97      	ldr	r2, [pc, #604]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800304a:	e006      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003052:	e002      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003058:	bf00      	nop
    }
    if (ret == HAL_OK)
 800305a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003062:	4b8f      	ldr	r3, [pc, #572]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003068:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800306c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003070:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003074:	4a8a      	ldr	r2, [pc, #552]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003076:	430b      	orrs	r3, r1
 8003078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003082:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003092:	643b      	str	r3, [r7, #64]	@ 0x40
 8003094:	2300      	movs	r3, #0
 8003096:	647b      	str	r3, [r7, #68]	@ 0x44
 8003098:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800309c:	460b      	mov	r3, r1
 800309e:	4313      	orrs	r3, r2
 80030a0:	d02d      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80030a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ae:	d00b      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b4:	d804      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80030ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030be:	d007      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80030c6:	e004      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80030c8:	bf00      	nop
 80030ca:	e002      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80030cc:	bf00      	nop
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80030d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80030d2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80030da:	4b71      	ldr	r3, [pc, #452]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80030dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ec:	4a6c      	ldr	r2, [pc, #432]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80030fa:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80030fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800310c:	2300      	movs	r3, #0
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003114:	460b      	mov	r3, r1
 8003116:	4313      	orrs	r3, r2
 8003118:	d00c      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800311a:	4b61      	ldr	r3, [pc, #388]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800311c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003120:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312c:	4a5c      	ldr	r2, [pc, #368]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800312e:	430b      	orrs	r3, r1
 8003130:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003140:	633b      	str	r3, [r7, #48]	@ 0x30
 8003142:	2300      	movs	r3, #0
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
 8003146:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800314a:	460b      	mov	r3, r1
 800314c:	4313      	orrs	r3, r2
 800314e:	d019      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315c:	d105      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800315e:	4b50      	ldr	r3, [pc, #320]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	4a4f      	ldr	r2, [pc, #316]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800316a:	4b4d      	ldr	r3, [pc, #308]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800316c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003170:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003178:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800317c:	4a48      	ldr	r2, [pc, #288]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800317e:	430b      	orrs	r3, r1
 8003180:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003196:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d00c      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80031a0:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031b2:	493b      	ldr	r1, [pc, #236]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80031ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80031cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80031d0:	460b      	mov	r3, r1
 80031d2:	4313      	orrs	r3, r2
 80031d4:	d00c      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80031d6:	4b32      	ldr	r3, [pc, #200]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031e8:	492d      	ldr	r1, [pc, #180]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80031f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003206:	460b      	mov	r3, r1
 8003208:	4313      	orrs	r3, r2
 800320a:	d00c      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800320e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003212:	f023 0218 	bic.w	r2, r3, #24
 8003216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800321a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800321e:	4920      	ldr	r1, [pc, #128]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800323c:	460b      	mov	r3, r1
 800323e:	4313      	orrs	r3, r2
 8003240:	d034      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800324a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324e:	d105      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800325c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003260:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003264:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003268:	d108      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800326a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800326e:	3308      	adds	r3, #8
 8003270:	4618      	mov	r0, r3
 8003272:	f001 fdd9 	bl	8004e28 <RCCEx_PLL2_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 800327c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003286:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800328a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003296:	4902      	ldr	r1, [pc, #8]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800329e:	e005      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80032a0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80032a8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80032ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d03a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80032c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d4:	d00e      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80032d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032da:	d815      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e4:	d110      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e6:	4b27      	ldr	r3, [pc, #156]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80032f2:	e00e      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f8:	3308      	adds	r3, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fd94 	bl	8004e28 <RCCEx_PLL2_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8003310:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003312:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10d      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800331a:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003320:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332c:	4915      	ldr	r1, [pc, #84]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003334:	e003      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800333a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800333e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d00c      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800335c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003360:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800336c:	4905      	ldr	r1, [pc, #20]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003374:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8003378:	4618      	mov	r0, r3
 800337a:	37d8      	adds	r7, #216	@ 0xd8
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	46020c00 	.word	0x46020c00

08003388 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003390:	4ba6      	ldr	r3, [pc, #664]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003398:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800339a:	4ba4      	ldr	r3, [pc, #656]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80033a4:	4ba1      	ldr	r3, [pc, #644]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3301      	adds	r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80033b2:	4b9e      	ldr	r3, [pc, #632]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80033be:	4b9b      	ldr	r3, [pc, #620]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d062      	beq.n	80034a6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	f200 8081 	bhi.w	80034ea <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d024      	beq.n	8003438 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d17a      	bne.n	80034ea <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003630 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b89      	ldr	r3, [pc, #548]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003436:	e08f      	b.n	8003558 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003438:	4b7c      	ldr	r3, [pc, #496]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003444:	4b79      	ldr	r3, [pc, #484]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	0f1b      	lsrs	r3, r3, #28
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	e006      	b.n	800345e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003450:	4b76      	ldr	r3, [pc, #472]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	0f1b      	lsrs	r3, r3, #28
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4a76      	ldr	r2, [pc, #472]	@ (8003638 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003484:	ed97 6a02 	vldr	s12, [r7, #8]
 8003488:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800348c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003498:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034a4:	e058      	b.n	8003558 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003630 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80034b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b8:	4b5c      	ldr	r3, [pc, #368]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80034ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80034cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80034d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80034d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034e8:	e036      	b.n	8003558 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80034ea:	4b50      	ldr	r3, [pc, #320]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80034f6:	4b4d      	ldr	r3, [pc, #308]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0f1b      	lsrs	r3, r3, #28
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003502:	4b4a      	ldr	r3, [pc, #296]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	0f1b      	lsrs	r3, r3, #28
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	4a49      	ldr	r2, [pc, #292]	@ (8003638 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003536:	ed97 6a02 	vldr	s12, [r7, #8]
 800353a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800353e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800354a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800354e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003556:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003558:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d017      	beq.n	8003594 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003564:	4b31      	ldr	r3, [pc, #196]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003568:	0a5b      	lsrs	r3, r3, #9
 800356a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800357a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800357e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358a:	ee17 2a90 	vmov	r2, s15
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e002      	b.n	800359a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80035a6:	4b21      	ldr	r3, [pc, #132]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80035b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80035c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035cc:	ee17 2a90 	vmov	r2, s15
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	e002      	b.n	80035dc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80035dc:	4b13      	ldr	r3, [pc, #76]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80035e8:	4b10      	ldr	r3, [pc, #64]	@ (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80035ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80035fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003602:	edd7 6a07 	vldr	s13, [r7, #28]
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360e:	ee17 2a90 	vmov	r2, s15
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003616:	e002      	b.n	800361e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
}
 800361e:	bf00      	nop
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	46020c00 	.word	0x46020c00
 8003630:	4b742400 	.word	0x4b742400
 8003634:	46000000 	.word	0x46000000
 8003638:	08009810 	.word	0x08009810

0800363c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003644:	4ba6      	ldr	r3, [pc, #664]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800364e:	4ba4      	ldr	r3, [pc, #656]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003658:	4ba1      	ldr	r3, [pc, #644]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	3301      	adds	r3, #1
 8003664:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003666:	4b9e      	ldr	r3, [pc, #632]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003672:	4b9b      	ldr	r3, [pc, #620]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d062      	beq.n	800375a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b03      	cmp	r3, #3
 8003698:	f200 8081 	bhi.w	800379e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d024      	beq.n	80036ec <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d17a      	bne.n	800379e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80036b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ba:	4b89      	ldr	r3, [pc, #548]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80036ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80038e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80036d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80036da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ea:	e08f      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80036ec:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80036f8:	4b79      	ldr	r3, [pc, #484]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	0f1b      	lsrs	r3, r3, #28
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	e006      	b.n	8003712 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003704:	4b76      	ldr	r3, [pc, #472]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	0f1b      	lsrs	r3, r3, #28
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a76      	ldr	r2, [pc, #472]	@ (80038ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003738:	ed97 6a02 	vldr	s12, [r7, #8]
 800373c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80038e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800374c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003758:	e058      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376c:	4b5c      	ldr	r3, [pc, #368]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800377c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003780:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80038e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003784:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003788:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800378c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003790:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800379c:	e036      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800379e:	4b50      	ldr	r3, [pc, #320]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80037aa:	4b4d      	ldr	r3, [pc, #308]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0f1b      	lsrs	r3, r3, #28
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	e006      	b.n	80037c4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80037b6:	4b4a      	ldr	r3, [pc, #296]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80037b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	0f1b      	lsrs	r3, r3, #28
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	4a49      	ldr	r2, [pc, #292]	@ (80038ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80037c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80038e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80037f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800380a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800380c:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003818:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	0a5b      	lsrs	r3, r3, #9
 800381e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800382a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800382e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003832:	edd7 6a07 	vldr	s13, [r7, #28]
 8003836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800383a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800383e:	ee17 2a90 	vmov	r2, s15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e002      	b.n	800384e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800385a:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800386c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003870:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003874:	edd7 6a07 	vldr	s13, [r7, #28]
 8003878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800387c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003880:	ee17 2a90 	vmov	r2, s15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003890:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	0e1b      	lsrs	r3, r3, #24
 80038a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80038ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80038b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c2:	ee17 2a90 	vmov	r2, s15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038ca:	e002      	b.n	80038d2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
}
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	46020c00 	.word	0x46020c00
 80038e4:	4b742400 	.word	0x4b742400
 80038e8:	46000000 	.word	0x46000000
 80038ec:	08009810 	.word	0x08009810

080038f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	@ 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80038f8:	4ba6      	ldr	r3, [pc, #664]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003900:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003902:	4ba4      	ldr	r3, [pc, #656]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800390c:	4ba1      	ldr	r3, [pc, #644]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3301      	adds	r3, #1
 8003918:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800391a:	4b9e      	ldr	r3, [pc, #632]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003926:	4b9b      	ldr	r3, [pc, #620]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392a:	08db      	lsrs	r3, r3, #3
 800392c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d062      	beq.n	8003a0e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b03      	cmp	r3, #3
 800394c:	f200 8081 	bhi.w	8003a52 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d024      	beq.n	80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d17a      	bne.n	8003a52 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b89      	ldr	r3, [pc, #548]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800398e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800399e:	e08f      	b.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80039a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80039ac:	4b79      	ldr	r3, [pc, #484]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0f1b      	lsrs	r3, r3, #28
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	e006      	b.n	80039c6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80039b8:	4b76      	ldr	r3, [pc, #472]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80039ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	0f1b      	lsrs	r3, r3, #28
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a76      	ldr	r2, [pc, #472]	@ (8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80039c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80039f0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80039f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a0c:	e058      	b.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a18:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a20:	4b5c      	ldr	r3, [pc, #368]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a30:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a34:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a50:	e036      	b.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003a52:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8003a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0f1b      	lsrs	r3, r3, #28
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	e006      	b.n	8003a78 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	0f1b      	lsrs	r3, r3, #28
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	4a49      	ldr	r2, [pc, #292]	@ (8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003abe:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003ac0:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003acc:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad0:	0a5b      	lsrs	r3, r3, #9
 8003ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af2:	ee17 2a90 	vmov	r2, s15
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003b02:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003b0e:	4b21      	ldr	r3, [pc, #132]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003b20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b24:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b34:	ee17 2a90 	vmov	r2, s15
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003b44:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d017      	beq.n	8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	0e1b      	lsrs	r3, r3, #24
 8003b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b76:	ee17 2a90 	vmov	r2, s15
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b7e:	e002      	b.n	8003b86 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
}
 8003b86:	bf00      	nop
 8003b88:	3724      	adds	r7, #36	@ 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	46020c00 	.word	0x46020c00
 8003b98:	4b742400 	.word	0x4b742400
 8003b9c:	46000000 	.word	0x46000000
 8003ba0:	08009810 	.word	0x08009810

08003ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08e      	sub	sp, #56	@ 0x38
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	d145      	bne.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003bba:	4b9b      	ldr	r3, [pc, #620]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003bc6:	4b98      	ldr	r3, [pc, #608]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d108      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bda:	d104      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be2:	f001 b912 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003be6:	4b90      	ldr	r3, [pc, #576]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf4:	d114      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d110      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003bfe:	4b8a      	ldr	r3, [pc, #552]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0c:	d103      	bne.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003c0e:	23fa      	movs	r3, #250	@ 0xfa
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003c12:	f001 b8fa 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8003c16:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003c1c:	f001 b8f5 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003c20:	4b81      	ldr	r3, [pc, #516]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c34:	d103      	bne.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003c36:	4b7d      	ldr	r3, [pc, #500]	@ (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c3a:	f001 b8e6 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c42:	f001 b8e2 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c4a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	d151      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003c52:	4b75      	ldr	r3, [pc, #468]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c58:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003c5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d035      	beq.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	2b80      	cmp	r3, #128	@ 0x80
 8003c68:	d841      	bhi.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	2b60      	cmp	r3, #96	@ 0x60
 8003c6e:	d02a      	beq.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	2b60      	cmp	r3, #96	@ 0x60
 8003c74:	d83b      	bhi.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d009      	beq.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d835      	bhi.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d012      	beq.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003c8e:	e02e      	b.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fb77 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c9e:	f001 b8b4 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ca2:	f107 0318 	add.w	r3, r7, #24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fcc8 	bl	800363c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cb0:	f001 b8ab 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fe19 	bl	80038f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cc2:	f001 b8a2 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003cc6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ccc:	f001 b89d 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cd0:	4b55      	ldr	r3, [pc, #340]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cdc:	d103      	bne.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003ce0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003ce2:	f001 b892 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cea:	f001 b88e 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cf2:	f001 b88a 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8003cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cfa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	d126      	bne.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003d02:	4b49      	ldr	r3, [pc, #292]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003d0e:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8003d22:	4b43      	ldr	r3, [pc, #268]	@ (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d26:	f001 b870 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d36:	d107      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d3e:	d103      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8003d40:	4b3c      	ldr	r3, [pc, #240]	@ (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d44:	f001 b861 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d4c:	f001 b85d 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8003d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d54:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	d171      	bne.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003d5c:	4b32      	ldr	r3, [pc, #200]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d62:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d6e:	d034      	beq.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d76:	d853      	bhi.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d7e:	d00b      	beq.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d86:	d84b      	bhi.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d94:	d009      	beq.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8003d96:	e043      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff faf3 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003da6:	f001 b830 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003daa:	f107 0318 	add.w	r3, r7, #24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fc44 	bl	800363c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003db8:	f001 b827 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc8:	d103      	bne.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8003dca:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003dcc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003dce:	f001 b81c 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dd6:	f001 b818 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d118      	bne.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003de6:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0e1b      	lsrs	r3, r3, #24
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	0e1b      	lsrs	r3, r3, #24
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003e14:	f000 bff9 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e1c:	f000 bff5 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e24:	f000 bff1 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8003e28:	46020c00 	.word	0x46020c00
 8003e2c:	0007a120 	.word	0x0007a120
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200
 8003e38:	02dc6c00 	.word	0x02dc6c00
 8003e3c:	08009810 	.word	0x08009810
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e44:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	d17f      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003e4c:	4ba8      	ldr	r3, [pc, #672]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003e4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d165      	bne.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003e5e:	4ba4      	ldr	r3, [pc, #656]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e64:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003e68:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e70:	d034      	beq.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e78:	d853      	bhi.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e80:	d00b      	beq.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e88:	d84b      	bhi.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e96:	d009      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8003e98:	e043      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fa72 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003ea8:	f000 bfaf 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003eac:	f107 0318 	add.w	r3, r7, #24
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fbc3 	bl	800363c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003eba:	f000 bfa6 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003ebe:	4b8c      	ldr	r3, [pc, #560]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	d103      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8003ecc:	4b89      	ldr	r3, [pc, #548]	@ (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003ed0:	f000 bf9b 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003ed8:	f000 bf97 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003edc:	4b84      	ldr	r3, [pc, #528]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d118      	bne.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003ee8:	4b81      	ldr	r3, [pc, #516]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8003ef4:	4b7e      	ldr	r3, [pc, #504]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	e006      	b.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8003f00:	4b7b      	ldr	r3, [pc, #492]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	0e1b      	lsrs	r3, r3, #24
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003f16:	f000 bf78 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003f1e:	f000 bf74 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003f26:	f000 bf70 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f30:	d108      	bne.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fa26 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f40:	f000 bf63 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f48:	f000 bf5f 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8003f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f50:	1e51      	subs	r1, r2, #1
 8003f52:	430b      	orrs	r3, r1
 8003f54:	d136      	bne.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f56:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7fe fc22 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8003f6e:	f000 bf4c 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d104      	bne.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003f78:	f7fe faea 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8003f7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8003f7e:	f000 bf44 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003f82:	4b5b      	ldr	r3, [pc, #364]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d103      	bne.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8003f96:	4b59      	ldr	r3, [pc, #356]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9a:	f000 bf36 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003f9e:	4b54      	ldr	r3, [pc, #336]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d107      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d104      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8003fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb8:	f000 bf27 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc0:	f000 bf23 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8003fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc8:	1f11      	subs	r1, r2, #4
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	d136      	bne.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003fce:	4b48      	ldr	r3, [pc, #288]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fbd2 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	6378      	str	r0, [r7, #52]	@ 0x34
 8003fe6:	f000 bf10 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d104      	bne.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003ff0:	f7fe faae 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8003ff4:	6378      	str	r0, [r7, #52]	@ 0x34
 8003ff6:	f000 bf08 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d106      	bne.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	2b20      	cmp	r3, #32
 800400c:	d103      	bne.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 800400e:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004010:	637b      	str	r3, [r7, #52]	@ 0x34
 8004012:	f000 befa 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004016:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d107      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	2b30      	cmp	r3, #48	@ 0x30
 8004028:	d104      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004030:	f000 beeb 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
 8004038:	f000 bee7 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800403c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004040:	f1a2 0108 	sub.w	r1, r2, #8
 8004044:	430b      	orrs	r3, r1
 8004046:	d136      	bne.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004048:	4b29      	ldr	r3, [pc, #164]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800404a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800404e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800405a:	f7fe fb95 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 800405e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004060:	f000 bed3 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	2b40      	cmp	r3, #64	@ 0x40
 8004068:	d104      	bne.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800406a:	f7fe fa71 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800406e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004070:	f000 becb 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004074:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004080:	d106      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	2b80      	cmp	r3, #128	@ 0x80
 8004086:	d103      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8004088:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800408a:	637b      	str	r3, [r7, #52]	@ 0x34
 800408c:	f000 bebd 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004090:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d107      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80040a2:	d104      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 80040a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040aa:	f000 beae 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b2:	f000 beaa 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80040b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ba:	f1a2 0110 	sub.w	r1, r2, #16
 80040be:	430b      	orrs	r3, r1
 80040c0:	d141      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80040c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe fb58 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80040d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80040da:	f000 be96 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80040e6:	f7fe fa33 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80040ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80040ec:	f000 be8d 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80040f0:	46020c00 	.word	0x46020c00
 80040f4:	02dc6c00 	.word	0x02dc6c00
 80040f8:	08009810 	.word	0x08009810
 80040fc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004100:	4baa      	ldr	r3, [pc, #680]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410c:	d107      	bne.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d103      	bne.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8004116:	4ba6      	ldr	r3, [pc, #664]	@ (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
 800411a:	f000 be76 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800411e:	4ba3      	ldr	r3, [pc, #652]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d108      	bne.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004132:	d104      	bne.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8004134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
 800413a:	f000 be66 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
 8004142:	f000 be62 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800414a:	f1a2 0120 	sub.w	r1, r2, #32
 800414e:	430b      	orrs	r3, r1
 8004150:	d158      	bne.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004152:	4b96      	ldr	r3, [pc, #600]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004164:	f7fe fb38 	bl	80027d8 <HAL_RCC_GetPCLK3Freq>
 8004168:	6378      	str	r0, [r7, #52]	@ 0x34
 800416a:	f000 be4e 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	d104      	bne.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004174:	f7fe f9ec 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004178:	6378      	str	r0, [r7, #52]	@ 0x34
 800417a:	f000 be46 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800417e:	4b8b      	ldr	r3, [pc, #556]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418a:	d106      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	2b02      	cmp	r3, #2
 8004190:	d103      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8004192:	4b87      	ldr	r3, [pc, #540]	@ (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
 8004196:	f000 be38 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800419a:	4b84      	ldr	r3, [pc, #528]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800419c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d107      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d104      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b4:	f000 be29 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80041b8:	4b7c      	ldr	r3, [pc, #496]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d11b      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d118      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80041ca:	4b78      	ldr	r3, [pc, #480]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80041d6:	4b75      	ldr	r3, [pc, #468]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0e1b      	lsrs	r3, r3, #24
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80041e2:	4b72      	ldr	r3, [pc, #456]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	0e1b      	lsrs	r3, r3, #24
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	4a70      	ldr	r2, [pc, #448]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80041f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f8:	f000 be07 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004200:	f000 be03 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004208:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800420c:	430b      	orrs	r3, r1
 800420e:	d16c      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004210:	4b66      	ldr	r3, [pc, #408]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004216:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004222:	d104      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004224:	f7fe f994 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004228:	6378      	str	r0, [r7, #52]	@ 0x34
 800422a:	f000 bdee 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004234:	d108      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004236:	f107 0318 	add.w	r3, r7, #24
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f9fe 	bl	800363c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	f000 bde1 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800424e:	f7fe fa81 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8004252:	6378      	str	r0, [r7, #52]	@ 0x34
 8004254:	f000 bdd9 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800425e:	d122      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004260:	4b52      	ldr	r3, [pc, #328]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b20      	cmp	r3, #32
 800426a:	d118      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800426c:	4b4f      	ldr	r3, [pc, #316]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004278:	4b4c      	ldr	r3, [pc, #304]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	0e1b      	lsrs	r3, r3, #24
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	e006      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004284:	4b49      	ldr	r3, [pc, #292]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	4a48      	ldr	r2, [pc, #288]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
 800429a:	f000 bdb6 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a2:	f000 bdb2 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80042a6:	4b41      	ldr	r3, [pc, #260]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b2:	d107      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042ba:	d103      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80042bc:	4b3c      	ldr	r3, [pc, #240]	@ (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c0:	f000 bda3 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80042c4:	4b39      	ldr	r3, [pc, #228]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d0:	d107      	bne.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042d8:	d103      	bne.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80042da:	4b35      	ldr	r3, [pc, #212]	@ (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042de:	f000 bd94 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e6:	f000 bd90 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80042ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80042f2:	430b      	orrs	r3, r1
 80042f4:	d160      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80042f6:	4b2d      	ldr	r3, [pc, #180]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80042f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	2b04      	cmp	r3, #4
 8004306:	d84c      	bhi.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004308:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004349 	.word	0x08004349
 8004314:	08004325 	.word	0x08004325
 8004318:	08004337 	.word	0x08004337
 800431c:	08004353 	.word	0x08004353
 8004320:	0800435d 	.word	0x0800435d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff f82d 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004332:	f000 bd6a 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fad8 	bl	80038f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004344:	f000 bd61 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004348:	f7fe fa04 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 800434c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800434e:	f000 bd5c 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004352:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004358:	f000 bd57 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d118      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004368:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004374:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	0e1b      	lsrs	r3, r3, #24
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	e006      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	0e1b      	lsrs	r3, r3, #24
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	4a09      	ldr	r2, [pc, #36]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004396:	f000 bd38 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800439e:	f000 bd34 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043a6:	f000 bd30 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80043aa:	bf00      	nop
 80043ac:	46020c00 	.word	0x46020c00
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	08009810 	.word	0x08009810
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80043b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043bc:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80043c0:	430b      	orrs	r3, r1
 80043c2:	d167      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80043c4:	4ba0      	ldr	r3, [pc, #640]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80043c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043ca:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043d6:	d036      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043de:	d855      	bhi.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043e6:	d029      	beq.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043ee:	d84d      	bhi.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043f6:	d013      	beq.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043fe:	d845      	bhi.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d015      	beq.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d13e      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800440e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe ffb8 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800441c:	f000 bcf5 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fa63 	bl	80038f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800442e:	f000 bcec 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004432:	f7fe f98f 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8004436:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004438:	f000 bce7 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800443c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004442:	f000 bce2 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004446:	4b80      	ldr	r3, [pc, #512]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d118      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004452:	4b7d      	ldr	r3, [pc, #500]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800445e:	4b7a      	ldr	r3, [pc, #488]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0e1b      	lsrs	r3, r3, #24
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800446a:	4b77      	ldr	r3, [pc, #476]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800446c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	0e1b      	lsrs	r3, r3, #24
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	4a74      	ldr	r2, [pc, #464]	@ (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004480:	f000 bcc3 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004488:	f000 bcbf 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004490:	f000 bcbb 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004498:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800449c:	430b      	orrs	r3, r1
 800449e:	d14c      	bne.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80044a0:	4b69      	ldr	r3, [pc, #420]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80044a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fe f969 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80044b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80044b8:	f000 bca7 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c2:	d104      	bne.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044c4:	f7fe f844 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80044c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80044ca:	f000 bc9e 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80044ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044da:	d107      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e2:	d103      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80044e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e8:	f000 bc8f 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80044ec:	4b56      	ldr	r3, [pc, #344]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d11c      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044fe:	d118      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004500:	4b51      	ldr	r3, [pc, #324]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800450c:	4b4e      	ldr	r3, [pc, #312]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	0e1b      	lsrs	r3, r3, #24
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	e006      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8004518:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800451a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	4a49      	ldr	r2, [pc, #292]	@ (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
 800452e:	f000 bc6c 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
 8004536:	f000 bc68 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800453a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800453e:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004542:	430b      	orrs	r3, r1
 8004544:	d14c      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004546:	4b40      	ldr	r3, [pc, #256]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800454c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004550:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe f916 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 800455c:	6378      	str	r0, [r7, #52]	@ 0x34
 800455e:	f000 bc54 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004568:	d104      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800456a:	f7fd fff1 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800456e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004570:	f000 bc4b 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004574:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004580:	d107      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004588:	d103      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800458a:	4b31      	ldr	r3, [pc, #196]	@ (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
 800458e:	f000 bc3c 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004592:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b20      	cmp	r3, #32
 800459c:	d11c      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045a4:	d118      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045a6:	4b28      	ldr	r3, [pc, #160]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80045b2:	4b25      	ldr	r3, [pc, #148]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0e1b      	lsrs	r3, r3, #24
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	e006      	b.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80045be:	4b22      	ldr	r3, [pc, #136]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80045c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	0e1b      	lsrs	r3, r3, #24
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	4a1f      	ldr	r2, [pc, #124]	@ (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80045ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d4:	f000 bc19 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	637b      	str	r3, [r7, #52]	@ 0x34
 80045dc:	f000 bc15 	b.w	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80045e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e4:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80045e8:	430b      	orrs	r3, r1
 80045ea:	d157      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80045ec:	4b16      	ldr	r3, [pc, #88]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80045ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80045fc:	d02a      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	2bc0      	cmp	r3, #192	@ 0xc0
 8004602:	d848      	bhi.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d00d      	beq.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	2b80      	cmp	r3, #128	@ 0x80
 800460e:	d842      	bhi.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	2b40      	cmp	r3, #64	@ 0x40
 800461a:	d011      	beq.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800461c:	e03b      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800461e:	f7fe f8db 	bl	80027d8 <HAL_RCC_GetPCLK3Freq>
 8004622:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004624:	e3f1      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004626:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004632:	d102      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004636:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004638:	e3e7      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800463e:	e3e4      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004640:	f7fd ff86 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004644:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004646:	e3e0      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004648:	46020c00 	.word	0x46020c00
 800464c:	08009810 	.word	0x08009810
 8004650:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004654:	4ba3      	ldr	r3, [pc, #652]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d117      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004660:	4ba0      	ldr	r3, [pc, #640]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 800466c:	4b9d      	ldr	r3, [pc, #628]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	e006      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8004678:	4b9a      	ldr	r3, [pc, #616]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800467a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	4a98      	ldr	r2, [pc, #608]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800468e:	e3bc      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004694:	e3b9      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800469a:	e3b6      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800469c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80046a4:	430b      	orrs	r3, r1
 80046a6:	d147      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80046a8:	4b8e      	ldr	r3, [pc, #568]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80046b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80046ba:	f7fe f865 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80046be:	6378      	str	r0, [r7, #52]	@ 0x34
 80046c0:	e3a3      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c8:	d103      	bne.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fd ff41 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80046ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80046d0:	e39b      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80046d2:	4b84      	ldr	r3, [pc, #528]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046de:	d106      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e6:	d102      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80046e8:	4b80      	ldr	r3, [pc, #512]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ec:	e38d      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80046ee:	4b7d      	ldr	r3, [pc, #500]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d11b      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004700:	d117      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004702:	4b78      	ldr	r3, [pc, #480]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 800470e:	4b75      	ldr	r3, [pc, #468]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0e1b      	lsrs	r3, r3, #24
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800471a:	4b72      	ldr	r3, [pc, #456]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800471c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	0e1b      	lsrs	r3, r3, #24
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	4a6f      	ldr	r2, [pc, #444]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004730:	e36b      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
 8004736:	e368      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800473c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004740:	430b      	orrs	r3, r1
 8004742:	d164      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004744:	4b67      	ldr	r3, [pc, #412]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800474a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	d120      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004756:	4b63      	ldr	r3, [pc, #396]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d117      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004762:	4b60      	ldr	r3, [pc, #384]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800476e:	4b5d      	ldr	r3, [pc, #372]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0e1b      	lsrs	r3, r3, #24
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	e006      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800477a:	4b5a      	ldr	r3, [pc, #360]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800477c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	0e1b      	lsrs	r3, r3, #24
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	4a57      	ldr	r2, [pc, #348]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004790:	e33b      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
 8004796:	e338      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004798:	4b52      	ldr	r3, [pc, #328]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800479a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a6:	d112      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	d10e      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80047b0:	4b4c      	ldr	r3, [pc, #304]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80047b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047be:	d102      	bne.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 80047c0:	23fa      	movs	r3, #250	@ 0xfa
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80047c4:	e321      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80047c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80047ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80047cc:	e31d      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80047ce:	4b45      	ldr	r3, [pc, #276]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047da:	d106      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e2:	d102      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 80047e4:	4b41      	ldr	r3, [pc, #260]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e8:	e30f      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80047ea:	4b3e      	ldr	r3, [pc, #248]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80047ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d107      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047fe:	d103      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8004800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
 8004806:	e300      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	637b      	str	r3, [r7, #52]	@ 0x34
 800480c:	e2fd      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800480e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004812:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004816:	430b      	orrs	r3, r1
 8004818:	d16a      	bne.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800481a:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800481c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004820:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	2b00      	cmp	r3, #0
 800482a:	d120      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800482c:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b20      	cmp	r3, #32
 8004836:	d117      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004838:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	e006      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8004850:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	e2d0      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	637b      	str	r3, [r7, #52]	@ 0x34
 800486c:	e2cd      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800487c:	d112      	bne.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004884:	d10e      	bne.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004886:	4b17      	ldr	r3, [pc, #92]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800488c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004894:	d102      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8004896:	23fa      	movs	r3, #250	@ 0xfa
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800489a:	e2b6      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800489c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80048a2:	e2b2      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b0:	d106      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b8:	d102      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80048ba:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80048bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048be:	e2a4      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80048c0:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80048c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d107      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048d4:	d103      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80048d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
 80048dc:	e295      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e2:	e292      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80048e4:	46020c00 	.word	0x46020c00
 80048e8:	08009810 	.word	0x08009810
 80048ec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80048f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80048f8:	430b      	orrs	r3, r1
 80048fa:	d147      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80048fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004902:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004906:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800490e:	f7fd ff3b 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8004912:	6378      	str	r0, [r7, #52]	@ 0x34
 8004914:	e279      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004916:	4b94      	ldr	r3, [pc, #592]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800491c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004924:	d112      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800492c:	d10e      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800492e:	4b8e      	ldr	r3, [pc, #568]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800493c:	d102      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 800493e:	23fa      	movs	r3, #250	@ 0xfa
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004942:	e262      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004944:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800494a:	e25e      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800494c:	4b86      	ldr	r3, [pc, #536]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004958:	d106      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004960:	d102      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8004962:	4b82      	ldr	r3, [pc, #520]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004964:	637b      	str	r3, [r7, #52]	@ 0x34
 8004966:	e250      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004968:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800496a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d107      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800497c:	d103      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	e241      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	637b      	str	r3, [r7, #52]	@ 0x34
 800498a:	e23e      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800498c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004990:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004994:	430b      	orrs	r3, r1
 8004996:	d12d      	bne.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004998:	4b73      	ldr	r3, [pc, #460]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800499a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800499e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80049a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80049a4:	4b70      	ldr	r3, [pc, #448]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049b0:	d105      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 80049b8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80049bc:	e225      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049c4:	d107      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fcdc 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d4:	e219      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049dc:	d107      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049de:	f107 0318 	add.w	r3, r7, #24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fe2a 	bl	800363c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ec:	e20d      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f2:	e20a      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80049f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80049fc:	430b      	orrs	r3, r1
 80049fe:	d156      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004a00:	4b59      	ldr	r3, [pc, #356]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a06:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a12:	d028      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a1a:	d845      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a22:	d013      	beq.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a2a:	d83d      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a38:	d004      	beq.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8004a3a:	e035      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004a3c:	f7fd feb8 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8004a40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004a42:	e1e2      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004a44:	f7fd fd84 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004a48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004a4a:	e1de      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a4c:	4b46      	ldr	r3, [pc, #280]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a58:	d102      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8004a5a:	4b44      	ldr	r3, [pc, #272]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004a5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a5e:	e1d4      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a64:	e1d1      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a66:	4b40      	ldr	r3, [pc, #256]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d117      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a72:	4b3d      	ldr	r3, [pc, #244]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8004a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0e1b      	lsrs	r3, r3, #24
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	e006      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8004a8a:	4b37      	ldr	r3, [pc, #220]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	0e1b      	lsrs	r3, r3, #24
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	4a35      	ldr	r2, [pc, #212]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8004a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004aa0:	e1b3      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aa6:	e1b0      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aac:	e1ad      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	d15c      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004aba:	4b2b      	ldr	r3, [pc, #172]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004acc:	d028      	beq.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad4:	d845      	bhi.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004adc:	d013      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae4:	d83d      	bhi.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af2:	d004      	beq.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8004af4:	e035      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004af6:	f7fd fe47 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8004afa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004afc:	e185      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fd fd27 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004b02:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004b04:	e181      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b06:	4b18      	ldr	r3, [pc, #96]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b12:	d102      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8004b14:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004b16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b18:	e177      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b1e:	e174      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b20:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d117      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8004b38:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	0e1b      	lsrs	r3, r3, #24
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	e006      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8004b44:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	4a07      	ldr	r2, [pc, #28]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b5a:	e156      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b60:	e153      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b66:	e150      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004b68:	46020c00 	.word	0x46020c00
 8004b6c:	00f42400 	.word	0x00f42400
 8004b70:	08009810 	.word	0x08009810
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b78:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	d176      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004b80:	4ba4      	ldr	r3, [pc, #656]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b86:	f003 0318 	and.w	r3, r3, #24
 8004b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	2b18      	cmp	r3, #24
 8004b90:	d86a      	bhi.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8004b92:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bfd 	.word	0x08004bfd
 8004b9c:	08004c69 	.word	0x08004c69
 8004ba0:	08004c69 	.word	0x08004c69
 8004ba4:	08004c69 	.word	0x08004c69
 8004ba8:	08004c69 	.word	0x08004c69
 8004bac:	08004c69 	.word	0x08004c69
 8004bb0:	08004c69 	.word	0x08004c69
 8004bb4:	08004c69 	.word	0x08004c69
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004c69 	.word	0x08004c69
 8004bc0:	08004c69 	.word	0x08004c69
 8004bc4:	08004c69 	.word	0x08004c69
 8004bc8:	08004c69 	.word	0x08004c69
 8004bcc:	08004c69 	.word	0x08004c69
 8004bd0:	08004c69 	.word	0x08004c69
 8004bd4:	08004c69 	.word	0x08004c69
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c69 	.word	0x08004c69
 8004be4:	08004c69 	.word	0x08004c69
 8004be8:	08004c69 	.word	0x08004c69
 8004bec:	08004c69 	.word	0x08004c69
 8004bf0:	08004c69 	.word	0x08004c69
 8004bf4:	08004c69 	.word	0x08004c69
 8004bf8:	08004c27 	.word	0x08004c27
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004bfc:	f7fd fdec 	bl	80027d8 <HAL_RCC_GetPCLK3Freq>
 8004c00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c02:	e102      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004c04:	f7fd fca4 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004c08:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c0a:	e0fe      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c0c:	4b81      	ldr	r3, [pc, #516]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c18:	d102      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8004c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c1e:	e0f4      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c24:	e0f1      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c26:	4b7b      	ldr	r3, [pc, #492]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d117      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c32:	4b78      	ldr	r3, [pc, #480]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8004c3e:	4b75      	ldr	r3, [pc, #468]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0e1b      	lsrs	r3, r3, #24
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8004c4a:	4b72      	ldr	r3, [pc, #456]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	0e1b      	lsrs	r3, r3, #24
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	4a70      	ldr	r2, [pc, #448]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8004c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c60:	e0d3      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c66:	e0d0      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c6c:	e0cd      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8004c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c72:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004c76:	430b      	orrs	r3, r1
 8004c78:	d155      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004c7a:	4b66      	ldr	r3, [pc, #408]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c8c:	d013      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c94:	d844      	bhi.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c9c:	d013      	beq.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca4:	d83c      	bhi.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d014      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb2:	d014      	beq.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8004cb4:	e034      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fcbe 	bl	800363c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cc4:	e0a1      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fb5c 	bl	8003388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cd4:	e099      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fd fc3b 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8004cda:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004cdc:	e095      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004cde:	4b4d      	ldr	r3, [pc, #308]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d117      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cea:	4b4a      	ldr	r3, [pc, #296]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8004cf6:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0e1b      	lsrs	r3, r3, #24
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	e006      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8004d02:	4b44      	ldr	r3, [pc, #272]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	0e1b      	lsrs	r3, r3, #24
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	4a42      	ldr	r2, [pc, #264]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8004d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d18:	e077      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d1e:	e074      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d24:	e071      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8004d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	d131      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004d32:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d3c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004d3e:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8004d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d58:	e057      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d68:	d112      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d70:	d10e      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d80:	d102      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8004d82:	23fa      	movs	r3, #250	@ 0xfa
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d86:	e040      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d8e:	e03c      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d94:	e039      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8004d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	d131      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004da2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004da4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004da8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004dac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004dae:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8004dc2:	4b17      	ldr	r3, [pc, #92]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc6:	e020      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8004dc8:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8004dde:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de2:	e012      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8004de4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df0:	d106      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df8:	d102      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfe:	e004      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e04:	e001      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3738      	adds	r7, #56	@ 0x38
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	46020c00 	.word	0x46020c00
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	08009810 	.word	0x08009810
 8004e20:	02dc6c00 	.word	0x02dc6c00
 8004e24:	016e3600 	.word	0x016e3600

08004e28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004e30:	4b47      	ldr	r3, [pc, #284]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a46      	ldr	r2, [pc, #280]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e3c:	f7fb febe 	bl	8000bbc <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e42:	e008      	b.n	8004e56 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e44:	f7fb feba 	bl	8000bbc <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e077      	b.n	8004f46 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e56:	4b3e      	ldr	r3, [pc, #248]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004e62:	4b3b      	ldr	r3, [pc, #236]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6811      	ldr	r1, [r2, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6852      	ldr	r2, [r2, #4]
 8004e76:	3a01      	subs	r2, #1
 8004e78:	0212      	lsls	r2, r2, #8
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	4934      	ldr	r1, [pc, #208]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004e82:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e86:	4b33      	ldr	r3, [pc, #204]	@ (8004f54 <RCCEx_PLL2_Config+0x12c>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6892      	ldr	r2, [r2, #8]
 8004e8e:	3a01      	subs	r2, #1
 8004e90:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68d2      	ldr	r2, [r2, #12]
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	0252      	lsls	r2, r2, #9
 8004e9c:	b292      	uxth	r2, r2
 8004e9e:	4311      	orrs	r1, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6912      	ldr	r2, [r2, #16]
 8004ea4:	3a01      	subs	r2, #1
 8004ea6:	0412      	lsls	r2, r2, #16
 8004ea8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6952      	ldr	r2, [r2, #20]
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	0612      	lsls	r2, r2, #24
 8004eb6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	4924      	ldr	r1, [pc, #144]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004ec2:	4b23      	ldr	r3, [pc, #140]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f023 020c 	bic.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	4920      	ldr	r1, [pc, #128]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	491c      	ldr	r1, [pc, #112]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ef6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	69d2      	ldr	r2, [r2, #28]
 8004efe:	00d2      	lsls	r2, r2, #3
 8004f00:	4913      	ldr	r1, [pc, #76]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004f06:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	4a11      	ldr	r2, [pc, #68]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004f0c:	f043 0310 	orr.w	r3, r3, #16
 8004f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004f12:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a0e      	ldr	r2, [pc, #56]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004f18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f1e:	f7fb fe4d 	bl	8000bbc <HAL_GetTick>
 8004f22:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f24:	e008      	b.n	8004f38 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f26:	f7fb fe49 	bl	8000bbc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e006      	b.n	8004f46 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <RCCEx_PLL2_Config+0x128>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0

}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	46020c00 	.word	0x46020c00
 8004f54:	80800000 	.word	0x80800000

08004f58 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004f60:	4b47      	ldr	r3, [pc, #284]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a46      	ldr	r2, [pc, #280]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f6c:	f7fb fe26 	bl	8000bbc <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f72:	e008      	b.n	8004f86 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f74:	f7fb fe22 	bl	8000bbc <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e077      	b.n	8005076 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f86:	4b3e      	ldr	r3, [pc, #248]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004f92:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6852      	ldr	r2, [r2, #4]
 8004fa6:	3a01      	subs	r2, #1
 8004fa8:	0212      	lsls	r2, r2, #8
 8004faa:	430a      	orrs	r2, r1
 8004fac:	4934      	ldr	r1, [pc, #208]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	630b      	str	r3, [r1, #48]	@ 0x30
 8004fb2:	4b33      	ldr	r3, [pc, #204]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb6:	4b33      	ldr	r3, [pc, #204]	@ (8005084 <RCCEx_PLL3_Config+0x12c>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6892      	ldr	r2, [r2, #8]
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68d2      	ldr	r2, [r2, #12]
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	0252      	lsls	r2, r2, #9
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6912      	ldr	r2, [r2, #16]
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	0412      	lsls	r2, r2, #16
 8004fd8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004fdc:	4311      	orrs	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6952      	ldr	r2, [r2, #20]
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	0612      	lsls	r2, r2, #24
 8004fe6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004fea:	430a      	orrs	r2, r1
 8004fec:	4924      	ldr	r1, [pc, #144]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004ff2:	4b23      	ldr	r3, [pc, #140]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	4920      	ldr	r1, [pc, #128]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005000:	4313      	orrs	r3, r2
 8005002:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005004:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	491c      	ldr	r1, [pc, #112]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 800500e:	4313      	orrs	r3, r2
 8005010:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005012:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005016:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005018:	f023 0310 	bic.w	r3, r3, #16
 800501c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800501e:	4b18      	ldr	r3, [pc, #96]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005026:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	69d2      	ldr	r2, [r2, #28]
 800502e:	00d2      	lsls	r2, r2, #3
 8005030:	4913      	ldr	r1, [pc, #76]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005032:	4313      	orrs	r3, r2
 8005034:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005036:	4b12      	ldr	r3, [pc, #72]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	4a11      	ldr	r2, [pc, #68]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 800503c:	f043 0310 	orr.w	r3, r3, #16
 8005040:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005042:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a0e      	ldr	r2, [pc, #56]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800504c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800504e:	f7fb fdb5 	bl	8000bbc <HAL_GetTick>
 8005052:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005054:	e008      	b.n	8005068 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005056:	f7fb fdb1 	bl	8000bbc <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e006      	b.n	8005076 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005068:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <RCCEx_PLL3_Config+0x128>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	46020c00 	.word	0x46020c00
 8005084:	80800000 	.word	0x80800000

08005088 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	@ 0x28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e075      	b.n	8005186 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fb fb8f 	bl	80007d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f868 	bl	8005190 <HAL_SD_InitCard>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e05d      	b.n	8005186 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fdb5 	bl	8005c40 <HAL_SD_GetCardStatus>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e052      	b.n	8005186 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80050e0:	7e3b      	ldrb	r3, [r7, #24]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80050e6:	7e7b      	ldrb	r3, [r7, #25]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10a      	bne.n	800510a <HAL_SD_Init+0x82>
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_SD_Init+0x78>
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005106:	659a      	str	r2, [r3, #88]	@ 0x58
 8005108:	e00b      	b.n	8005122 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510e:	2b01      	cmp	r3, #1
 8005110:	d104      	bne.n	800511c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005118:	659a      	str	r2, [r3, #88]	@ 0x58
 800511a:	e002      	b.n	8005122 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fe73 	bl	8005e14 <HAL_SD_ConfigWideBusOperation>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e026      	b.n	8005186 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005138:	f7fb fd40 	bl	8000bbc <HAL_GetTick>
 800513c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800513e:	e011      	b.n	8005164 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8005140:	f7fb fd3c 	bl	8000bbc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800514e:	d109      	bne.n	8005164 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e010      	b.n	8005186 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 ff67 	bl	8006038 <HAL_SD_GetCardState>
 800516a:	4603      	mov	r3, r0
 800516c:	2b04      	cmp	r3, #4
 800516e:	d1e7      	bne.n	8005140 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3728      	adds	r7, #40	@ 0x28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b08d      	sub	sp, #52	@ 0x34
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80051a8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	f7fe fcf8 	bl	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051b4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80051ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e070      	b.n	80052b2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	4a39      	ldr	r2, [pc, #228]	@ (80052bc <HAL_SD_InitCard+0x12c>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681c      	ldr	r4, [r3, #0]
 80051e2:	466a      	mov	r2, sp
 80051e4:	f107 0318 	add.w	r3, r7, #24
 80051e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80051f0:	f107 030c 	add.w	r3, r7, #12
 80051f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f6:	4620      	mov	r0, r4
 80051f8:	f001 faf8 	bl	80067ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f001 fb3b 	bl	800687c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800521e:	4a28      	ldr	r2, [pc, #160]	@ (80052c0 <HAL_SD_InitCard+0x130>)
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	3301      	adds	r3, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb fcd3 	bl	8000bd4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fff0 	bl	8006214 <SD_PowerON>
 8005234:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e02e      	b.n	80052b2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 ff0f 	bl	8006078 <SD_InitCard>
 800525a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e01b      	b.n	80052b2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005282:	4618      	mov	r0, r3
 8005284:	f001 fb90 	bl	80069a8 <SDMMC_CmdBlockLength>
 8005288:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00f      	beq.n	80052b0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a0b      	ldr	r2, [pc, #44]	@ (80052c4 <HAL_SD_InitCard+0x134>)
 8005296:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	372c      	adds	r7, #44	@ 0x2c
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	014f8b59 	.word	0x014f8b59
 80052c0:	00012110 	.word	0x00012110
 80052c4:	1fe00fff 	.word	0x1fe00fff

080052c8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b092      	sub	sp, #72	@ 0x48
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80052d6:	f7fb fc71 	bl	8000bbc <HAL_GetTick>
 80052da:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e167      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	f040 815a 	bne.w	80055bc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800530e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	441a      	add	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005318:	429a      	cmp	r2, r3
 800531a:	d907      	bls.n	800532c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e14e      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2203      	movs	r2, #3
 8005330:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	2b01      	cmp	r3, #1
 8005342:	d002      	beq.n	800534a <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	025b      	lsls	r3, r3, #9
 8005348:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800534e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	025b      	lsls	r3, r3, #9
 8005354:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005356:	2390      	movs	r3, #144	@ 0x90
 8005358:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800535a:	2302      	movs	r3, #2
 800535c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f107 0214 	add.w	r2, r7, #20
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f001 faed 	bl	8006950 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005384:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d90a      	bls.n	80053a2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2202      	movs	r2, #2
 8005390:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005398:	4618      	mov	r0, r3
 800539a:	f001 fb4b 	bl	8006a34 <SDMMC_CmdReadMultiBlock>
 800539e:	6478      	str	r0, [r7, #68]	@ 0x44
 80053a0:	e009      	b.n	80053b6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fb1d 	bl	80069ee <SDMMC_CmdReadSingleBlock>
 80053b4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80053b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d012      	beq.n	80053e2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a84      	ldr	r2, [pc, #528]	@ (80055d4 <HAL_SD_ReadBlocks+0x30c>)
 80053c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0f3      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80053e6:	e058      	b.n	800549a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d033      	beq.n	800545e <HAL_SD_ReadBlocks+0x196>
 80053f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f8:	2b1f      	cmp	r3, #31
 80053fa:	d930      	bls.n	800545e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80053fc:	2300      	movs	r3, #0
 80053fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005400:	e027      	b.n	8005452 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fa1a 	bl	8006840 <SDMMC_ReadFIFO>
 800540c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800540e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005410:	b2da      	uxtb	r2, r3
 8005412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005414:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	3301      	adds	r3, #1
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b2da      	uxtb	r2, r3
 8005422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005424:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005428:	3301      	adds	r3, #1
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	b2da      	uxtb	r2, r3
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005438:	3301      	adds	r3, #1
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	0e1b      	lsrs	r3, r3, #24
 8005440:	b2da      	uxtb	r2, r3
 8005442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005444:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	3301      	adds	r3, #1
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800544c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800544e:	3301      	adds	r3, #1
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005454:	2b07      	cmp	r3, #7
 8005456:	d9d4      	bls.n	8005402 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8005458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545a:	3b20      	subs	r3, #32
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800545e:	f7fb fbad 	bl	8000bbc <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800546a:	429a      	cmp	r2, r3
 800546c:	d902      	bls.n	8005474 <HAL_SD_ReadBlocks+0x1ac>
 800546e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005470:	2b00      	cmp	r3, #0
 8005472:	d112      	bne.n	800549a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a56      	ldr	r2, [pc, #344]	@ (80055d4 <HAL_SD_ReadBlocks+0x30c>)
 800547a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005480:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e097      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d09f      	beq.n	80053e8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d022      	beq.n	800550c <HAL_SD_ReadBlocks+0x244>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d91f      	bls.n	800550c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d01b      	beq.n	800550c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fb15 	bl	8006b08 <SDMMC_CmdStopTransfer>
 80054de:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80054e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d012      	beq.n	800550c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3a      	ldr	r2, [pc, #232]	@ (80055d4 <HAL_SD_ReadBlocks+0x30c>)
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e05e      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d012      	beq.n	8005540 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2d      	ldr	r2, [pc, #180]	@ (80055d4 <HAL_SD_ReadBlocks+0x30c>)
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005526:	f043 0208 	orr.w	r2, r3, #8
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e044      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a20      	ldr	r2, [pc, #128]	@ (80055d4 <HAL_SD_ReadBlocks+0x30c>)
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555a:	f043 0202 	orr.w	r2, r3, #2
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e02a      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d012      	beq.n	80055a8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a13      	ldr	r2, [pc, #76]	@ (80055d4 <HAL_SD_ReadBlocks+0x30c>)
 8005588:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e010      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0a      	ldr	r2, [pc, #40]	@ (80055d8 <HAL_SD_ReadBlocks+0x310>)
 80055ae:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e006      	b.n	80055ca <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3748      	adds	r7, #72	@ 0x48
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	1fe00fff 	.word	0x1fe00fff
 80055d8:	18000f3a 	.word	0x18000f3a

080055dc <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b092      	sub	sp, #72	@ 0x48
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055ea:	f7fb fae7 	bl	8000bbc <HAL_GetTick>
 80055ee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005602:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e16b      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	f040 815e 	bne.w	80058d8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562c:	429a      	cmp	r2, r3
 800562e:	d907      	bls.n	8005640 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005634:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e152      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2203      	movs	r2, #3
 8005644:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2200      	movs	r2, #0
 800564e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	2b01      	cmp	r3, #1
 8005656:	d002      	beq.n	800565e <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	025b      	lsls	r3, r3, #9
 800565c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005662:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800566a:	2390      	movs	r3, #144	@ 0x90
 800566c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005672:	2300      	movs	r3, #0
 8005674:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f107 0218 	add.w	r2, r7, #24
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f963 	bl	8006950 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005698:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d90a      	bls.n	80056b6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 fa07 	bl	8006ac0 <SDMMC_CmdWriteMultiBlock>
 80056b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80056b4:	e009      	b.n	80056ca <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2210      	movs	r2, #16
 80056ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 f9d9 	bl	8006a7a <SDMMC_CmdWriteSingleBlock>
 80056c8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80056ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d012      	beq.n	80056f6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a86      	ldr	r2, [pc, #536]	@ (80058f0 <HAL_SD_WriteBlocks+0x314>)
 80056d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056de:	431a      	orrs	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e0f7      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80056fa:	e05c      	b.n	80057b6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d037      	beq.n	800577a <HAL_SD_WriteBlocks+0x19e>
 800570a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800570c:	2b1f      	cmp	r3, #31
 800570e:	d934      	bls.n	800577a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8005710:	2300      	movs	r3, #0
 8005712:	643b      	str	r3, [r7, #64]	@ 0x40
 8005714:	e02b      	b.n	800576e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800571c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571e:	3301      	adds	r3, #1
 8005720:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	3301      	adds	r3, #1
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	041a      	lsls	r2, r3, #16
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005742:	3301      	adds	r3, #1
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	061a      	lsls	r2, r3, #24
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	3301      	adds	r3, #1
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f107 0214 	add.w	r2, r7, #20
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f001 f879 	bl	800685a <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8005768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576a:	3301      	adds	r3, #1
 800576c:	643b      	str	r3, [r7, #64]	@ 0x40
 800576e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005770:	2b07      	cmp	r3, #7
 8005772:	d9d0      	bls.n	8005716 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8005774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005776:	3b20      	subs	r3, #32
 8005778:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800577a:	f7fb fa1f 	bl	8000bbc <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005786:	429a      	cmp	r2, r3
 8005788:	d902      	bls.n	8005790 <HAL_SD_WriteBlocks+0x1b4>
 800578a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d112      	bne.n	80057b6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a56      	ldr	r2, [pc, #344]	@ (80058f0 <HAL_SD_WriteBlocks+0x314>)
 8005796:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800579c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579e:	431a      	orrs	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e097      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057bc:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d09b      	beq.n	80056fc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057d2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d022      	beq.n	8005828 <HAL_SD_WriteBlocks+0x24c>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d91f      	bls.n	8005828 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d01b      	beq.n	8005828 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f987 	bl	8006b08 <SDMMC_CmdStopTransfer>
 80057fa:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80057fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d012      	beq.n	8005828 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3a      	ldr	r2, [pc, #232]	@ (80058f0 <HAL_SD_WriteBlocks+0x314>)
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800580e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e05e      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d012      	beq.n	800585c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2d      	ldr	r2, [pc, #180]	@ (80058f0 <HAL_SD_WriteBlocks+0x314>)
 800583c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	f043 0208 	orr.w	r2, r3, #8
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e044      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d012      	beq.n	8005890 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a20      	ldr	r2, [pc, #128]	@ (80058f0 <HAL_SD_WriteBlocks+0x314>)
 8005870:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	f043 0202 	orr.w	r2, r3, #2
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e02a      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b00      	cmp	r3, #0
 800589c:	d012      	beq.n	80058c4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a13      	ldr	r2, [pc, #76]	@ (80058f0 <HAL_SD_WriteBlocks+0x314>)
 80058a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	f043 0210 	orr.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e010      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <HAL_SD_WriteBlocks+0x318>)
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e006      	b.n	80058e6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3748      	adds	r7, #72	@ 0x48
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	1fe00fff 	.word	0x1fe00fff
 80058f4:	18000f3a 	.word	0x18000f3a

080058f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005906:	0f9b      	lsrs	r3, r3, #30
 8005908:	b2da      	uxtb	r2, r3
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005912:	0e9b      	lsrs	r3, r3, #26
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	b2da      	uxtb	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	0e1b      	lsrs	r3, r3, #24
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	b2da      	uxtb	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b2da      	uxtb	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b2da      	uxtb	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594e:	b2da      	uxtb	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005958:	0d1b      	lsrs	r3, r3, #20
 800595a:	b29a      	uxth	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	b2da      	uxtb	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	0bdb      	lsrs	r3, r3, #15
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005988:	0b9b      	lsrs	r3, r3, #14
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	0b5b      	lsrs	r3, r3, #13
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	0b1b      	lsrs	r3, r3, #12
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d163      	bne.n	8005a90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059cc:	009a      	lsls	r2, r3, #2
 80059ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80059d8:	0f92      	lsrs	r2, r2, #30
 80059da:	431a      	orrs	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e4:	0edb      	lsrs	r3, r3, #27
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f6:	0e1b      	lsrs	r3, r3, #24
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a08:	0d5b      	lsrs	r3, r3, #21
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a1a:	0c9b      	lsrs	r3, r3, #18
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	0bdb      	lsrs	r3, r3, #15
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	7e1b      	ldrb	r3, [r3, #24]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	3302      	adds	r3, #2
 8005a50:	2201      	movs	r2, #1
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a5a:	fb03 f202 	mul.w	r2, r3, r2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	7a1b      	ldrb	r3, [r3, #8]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005a7c:	0a52      	lsrs	r2, r2, #9
 8005a7e:	fb03 f202 	mul.w	r2, r3, r2
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a8e:	e031      	b.n	8005af4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d11d      	bne.n	8005ad4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa6:	0c1b      	lsrs	r3, r3, #16
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	029a      	lsls	r2, r3, #10
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ad2:	e00f      	b.n	8005af4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a58      	ldr	r2, [pc, #352]	@ (8005c3c <HAL_SD_GetCardCSD+0x344>)
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e09d      	b.n	8005c30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af8:	0b9b      	lsrs	r3, r3, #14
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b2c:	0fdb      	lsrs	r3, r3, #31
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b38:	0f5b      	lsrs	r3, r3, #29
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b4a:	0e9b      	lsrs	r3, r3, #26
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b5c:	0d9b      	lsrs	r3, r3, #22
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b6e:	0d5b      	lsrs	r3, r3, #21
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b9e:	0bdb      	lsrs	r3, r3, #15
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb2:	0b9b      	lsrs	r3, r3, #14
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bc6:	0b5b      	lsrs	r3, r3, #13
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bda:	0b1b      	lsrs	r3, r3, #12
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bee:	0a9b      	lsrs	r3, r3, #10
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	1fe00fff 	.word	0x1fe00fff

08005c40 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b094      	sub	sp, #80	@ 0x50
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d101      	bne.n	8005c60 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0a7      	b.n	8005db0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb62 	bl	8006330 <SD_SendSDStatus>
 8005c6c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d011      	beq.n	8005c98 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a4f      	ldr	r2, [pc, #316]	@ (8005db8 <HAL_SD_GetCardStatus+0x178>)
 8005c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8005c96:	e070      	b.n	8005d7a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	099b      	lsrs	r3, r3, #6
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	0e1b      	lsrs	r3, r3, #24
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	061a      	lsls	r2, r3, #24
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005cde:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005ce8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	0e1b      	lsrs	r3, r3, #24
 8005cee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	0d1b      	lsrs	r3, r3, #20
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	0a9b      	lsrs	r3, r3, #10
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fe10 	bl	80069a8 <SDMMC_CmdBlockLength>
 8005d88:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a08      	ldr	r2, [pc, #32]	@ (8005db8 <HAL_SD_GetCardStatus+0x178>)
 8005d96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8005dac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3750      	adds	r7, #80	@ 0x50
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	1fe00fff 	.word	0x1fe00fff

08005dbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b08d      	sub	sp, #52	@ 0x34
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2203      	movs	r2, #3
 8005e28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d02e      	beq.n	8005e92 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3a:	d106      	bne.n	8005e4a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e48:	e029      	b.n	8005e9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e50:	d10a      	bne.n	8005e68 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb64 	bl	8006520 <SD_WideBus_Enable>
 8005e58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e66:	e01a      	b.n	8005e9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fba1 	bl	80065b6 <SD_WideBus_Disable>
 8005e74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e82:	e00c      	b.n	8005e9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e90:	e005      	b.n	8005e9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e96:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8006028 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005eb4:	e096      	b.n	8005fe4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005eb6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	f7fd fe71 	bl	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ec2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8083 	beq.w	8005fd2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4950      	ldr	r1, [pc, #320]	@ (800602c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005eea:	fba1 1303 	umull	r1, r3, r1, r3
 8005eee:	0e1b      	lsrs	r3, r3, #24
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d303      	bcc.n	8005efc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e05a      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f04:	d103      	bne.n	8005f0e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e051      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f16:	d126      	bne.n	8005f66 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10e      	bne.n	8005f3e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4a43      	ldr	r2, [pc, #268]	@ (8006030 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d906      	bls.n	8005f36 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4a40      	ldr	r2, [pc, #256]	@ (800602c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	0e5b      	lsrs	r3, r3, #25
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e03d      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e039      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4a:	4a39      	ldr	r2, [pc, #228]	@ (8006030 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d906      	bls.n	8005f5e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4a36      	ldr	r2, [pc, #216]	@ (800602c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	0e5b      	lsrs	r3, r3, #25
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e029      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e025      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10e      	bne.n	8005f8c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4a30      	ldr	r2, [pc, #192]	@ (8006034 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d906      	bls.n	8005f84 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4a2c      	ldr	r2, [pc, #176]	@ (800602c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	0e1b      	lsrs	r3, r3, #24
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e016      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e012      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	4a26      	ldr	r2, [pc, #152]	@ (8006034 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d906      	bls.n	8005fac <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4a22      	ldr	r2, [pc, #136]	@ (800602c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	0e1b      	lsrs	r3, r3, #24
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	e002      	b.n	8005fb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681c      	ldr	r4, [r3, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	f107 0314 	add.w	r3, r7, #20
 8005fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8005fc4:	f107 0308 	add.w	r3, r7, #8
 8005fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fc0e 	bl	80067ec <SDMMC_Init>
 8005fd0:	e008      	b.n	8005fe4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fcdb 	bl	80069a8 <SDMMC_CmdBlockLength>
 8005ff2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8006028 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800601c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006020:	4618      	mov	r0, r3
 8006022:	372c      	adds	r7, #44	@ 0x2c
 8006024:	46bd      	mov	sp, r7
 8006026:	bd90      	pop	{r4, r7, pc}
 8006028:	1fe00fff 	.word	0x1fe00fff
 800602c:	55e63b89 	.word	0x55e63b89
 8006030:	02faf080 	.word	0x02faf080
 8006034:	017d7840 	.word	0x017d7840

08006038 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006044:	f107 030c 	add.w	r3, r7, #12
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa40 	bl	80064d0 <SD_SendStatus>
 8006050:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	0a5b      	lsrs	r3, r3, #9
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800606e:	693b      	ldr	r3, [r7, #16]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b090      	sub	sp, #64	@ 0x40
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006084:	f7fa fd9a 	bl	8000bbc <HAL_GetTick>
 8006088:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fc05 	bl	800689e <SDMMC_GetPowerState>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800609a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800609e:	e0b5      	b.n	800620c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d02e      	beq.n	8006106 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fe50 	bl	8006d52 <SDMMC_CmdSendCID>
 80060b2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <SD_InitCard+0x46>
    {
      return errorstate;
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	e0a6      	b.n	800620c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fc30 	bl	800692a <SDMMC_GetResponse>
 80060ca:	4602      	mov	r2, r0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2104      	movs	r1, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fc27 	bl	800692a <SDMMC_GetResponse>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2108      	movs	r1, #8
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fc1e 	bl	800692a <SDMMC_GetResponse>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	210c      	movs	r1, #12
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fc15 	bl	800692a <SDMMC_GetResponse>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610a:	2b03      	cmp	r3, #3
 800610c:	d01d      	beq.n	800614a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800610e:	e019      	b.n	8006144 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f107 020a 	add.w	r2, r7, #10
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fe58 	bl	8006dd0 <SDMMC_CmdSetRelAdd>
 8006120:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <SD_InitCard+0xb4>
      {
        return errorstate;
 8006128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612a:	e06f      	b.n	800620c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800612c:	f7fa fd46 	bl	8000bbc <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3287 	movw	r2, #4999	@ 0x1387
 800613a:	4293      	cmp	r3, r2
 800613c:	d902      	bls.n	8006144 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800613e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006142:	e063      	b.n	800620c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006144:	897b      	ldrh	r3, [r7, #10]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0e2      	beq.n	8006110 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614e:	2b03      	cmp	r3, #3
 8006150:	d036      	beq.n	80061c0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f000 fe12 	bl	8006d90 <SDMMC_CmdSendCSD>
 800616c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800616e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <SD_InitCard+0x100>
    {
      return errorstate;
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	e049      	b.n	800620c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fbd3 	bl	800692a <SDMMC_GetResponse>
 8006184:	4602      	mov	r2, r0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2104      	movs	r1, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fbca 	bl	800692a <SDMMC_GetResponse>
 8006196:	4602      	mov	r2, r0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2108      	movs	r1, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fbc1 	bl	800692a <SDMMC_GetResponse>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	210c      	movs	r1, #12
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fbb8 	bl	800692a <SDMMC_GetResponse>
 80061ba:	4602      	mov	r2, r0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2104      	movs	r1, #4
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fbaf 	bl	800692a <SDMMC_GetResponse>
 80061cc:	4603      	mov	r3, r0
 80061ce:	0d1a      	lsrs	r2, r3, #20
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fb8c 	bl	80058f8 <HAL_SD_GetCardCSD>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80061ea:	e00f      	b.n	800620c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f4:	041b      	lsls	r3, r3, #16
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f000 fcc1 	bl	8006b80 <SDMMC_CmdSelDesel>
 80061fe:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <SD_InitCard+0x192>
  {
    return errorstate;
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006208:	e000      	b.n	800620c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3740      	adds	r7, #64	@ 0x40
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fcca 	bl	8006bc6 <SDMMC_CmdGoIdleState>
 8006232:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <SD_PowerON+0x2a>
  {
    return errorstate;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	e072      	b.n	8006324 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fcdd 	bl	8006c02 <SDMMC_CmdOperCond>
 8006248:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006250:	d10d      	bne.n	800626e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fcb2 	bl	8006bc6 <SDMMC_CmdGoIdleState>
 8006262:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <SD_PowerON+0x60>
    {
      return errorstate;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	e05a      	b.n	8006324 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d137      	bne.n	80062ec <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fcdd 	bl	8006c42 <SDMMC_CmdAppCommand>
 8006288:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d02d      	beq.n	80062ec <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006290:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006294:	e046      	b.n	8006324 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fcd0 	bl	8006c42 <SDMMC_CmdAppCommand>
 80062a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <SD_PowerON+0x9a>
    {
      return errorstate;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	e03a      	b.n	8006324 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	491e      	ldr	r1, [pc, #120]	@ (800632c <SD_PowerON+0x118>)
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fce7 	bl	8006c88 <SDMMC_CmdAppOperCommand>
 80062ba:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80062c6:	e02d      	b.n	8006324 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fb2b 	bl	800692a <SDMMC_GetResponse>
 80062d4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	0fdb      	lsrs	r3, r3, #31
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <SD_PowerON+0xce>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <SD_PowerON+0xd0>
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]

    count++;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d802      	bhi.n	80062fc <SD_PowerON+0xe8>
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0cc      	beq.n	8006296 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006302:	4293      	cmp	r3, r2
 8006304:	d902      	bls.n	800630c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006306:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800630a:	e00b      	b.n	8006324 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	c1100000 	.word	0xc1100000

08006330 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	@ 0x30
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800633a:	f7fa fc3f 	bl	8000bbc <HAL_GetTick>
 800633e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f000 faed 	bl	800692a <SDMMC_GetResponse>
 8006350:	4603      	mov	r3, r0
 8006352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800635a:	d102      	bne.n	8006362 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800635c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006360:	e0b0      	b.n	80064c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2140      	movs	r1, #64	@ 0x40
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fb1d 	bl	80069a8 <SDMMC_CmdBlockLength>
 800636e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	e0a0      	b.n	80064c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f000 fc57 	bl	8006c42 <SDMMC_CmdAppCommand>
 8006394:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	e08d      	b.n	80064c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80063ae:	2340      	movs	r3, #64	@ 0x40
 80063b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80063b2:	2360      	movs	r3, #96	@ 0x60
 80063b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80063b6:	2302      	movs	r3, #2
 80063b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80063be:	2301      	movs	r3, #1
 80063c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f107 0208 	add.w	r2, r7, #8
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fabf 	bl	8006950 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fd3f 	bl	8006e5a <SDMMC_CmdStatusRegister>
 80063dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02b      	beq.n	800643c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	e069      	b.n	80064c4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d013      	beq.n	8006426 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80063fe:	2300      	movs	r3, #0
 8006400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006402:	e00d      	b.n	8006420 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fa19 	bl	8006840 <SDMMC_ReadFIFO>
 800640e:	4602      	mov	r2, r0
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	601a      	str	r2, [r3, #0]
        pData++;
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	3304      	adds	r3, #4
 8006418:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	3301      	adds	r3, #1
 800641e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	2b07      	cmp	r3, #7
 8006424:	d9ee      	bls.n	8006404 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006426:	f7fa fbc9 	bl	8000bbc <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006434:	d102      	bne.n	800643c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006436:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800643a:	e043      	b.n	80064c4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006442:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0d2      	beq.n	80063f0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006458:	2308      	movs	r3, #8
 800645a:	e033      	b.n	80064c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800646a:	2302      	movs	r3, #2
 800646c:	e02a      	b.n	80064c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d017      	beq.n	80064ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800647c:	2320      	movs	r3, #32
 800647e:	e021      	b.n	80064c4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f9db 	bl	8006840 <SDMMC_ReadFIFO>
 800648a:	4602      	mov	r2, r0
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	601a      	str	r2, [r3, #0]
    pData++;
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	3304      	adds	r3, #4
 8006494:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006496:	f7fa fb91 	bl	8000bbc <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064a4:	d102      	bne.n	80064ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80064a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064aa:	e00b      	b.n	80064c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e2      	bne.n	8006480 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a03      	ldr	r2, [pc, #12]	@ (80064cc <SD_SendSDStatus+0x19c>)
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3730      	adds	r7, #48	@ 0x30
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	18000f3a 	.word	0x18000f3a

080064d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80064e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064e4:	e018      	b.n	8006518 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f000 fc8e 	bl	8006e14 <SDMMC_CmdSendStatus>
 80064f8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	e009      	b.n	8006518 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fa0d 	bl	800692a <SDMMC_GetResponse>
 8006510:	4602      	mov	r2, r0
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f9f7 	bl	800692a <SDMMC_GetResponse>
 800653c:	4603      	mov	r3, r0
 800653e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006546:	d102      	bne.n	800654e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006548:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800654c:	e02f      	b.n	80065ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800654e:	f107 030c 	add.w	r3, r7, #12
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f879 	bl	800664c <SD_FindSCR>
 800655a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	e023      	b.n	80065ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01c      	beq.n	80065aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f000 fb60 	bl	8006c42 <SDMMC_CmdAppCommand>
 8006582:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	e00f      	b.n	80065ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fb97 	bl	8006cc8 <SDMMC_CmdBusWidth>
 800659a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	e003      	b.n	80065ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e001      	b.n	80065ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f9ac 	bl	800692a <SDMMC_GetResponse>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065dc:	d102      	bne.n	80065e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80065de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065e2:	e02f      	b.n	8006644 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80065e4:	f107 030c 	add.w	r3, r7, #12
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f82e 	bl	800664c <SD_FindSCR>
 80065f0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	e023      	b.n	8006644 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01c      	beq.n	8006640 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f000 fb15 	bl	8006c42 <SDMMC_CmdAppCommand>
 8006618:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	e00f      	b.n	8006644 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fb4c 	bl	8006cc8 <SDMMC_CmdBusWidth>
 8006630:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	e003      	b.n	8006644 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800663c:	2300      	movs	r3, #0
 800663e:	e001      	b.n	8006644 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006640:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08e      	sub	sp, #56	@ 0x38
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006656:	f7fa fab1 	bl	8000bbc <HAL_GetTick>
 800665a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006660:	2300      	movs	r3, #0
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2108      	movs	r1, #8
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f998 	bl	80069a8 <SDMMC_CmdBlockLength>
 8006678:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006682:	e0ad      	b.n	80067e0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f000 fad6 	bl	8006c42 <SDMMC_CmdAppCommand>
 8006696:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	e09e      	b.n	80067e0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80066a8:	2308      	movs	r3, #8
 80066aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80066ac:	2330      	movs	r3, #48	@ 0x30
 80066ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80066b0:	2302      	movs	r3, #2
 80066b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f107 0210 	add.w	r2, r7, #16
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f942 	bl	8006950 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fb1c 	bl	8006d0e <SDMMC_CmdSendSCR>
 80066d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80066d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d027      	beq.n	800672e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80066de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e0:	e07e      	b.n	80067e0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d113      	bne.n	8006718 <SD_FindSCR+0xcc>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d110      	bne.n	8006718 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f8a0 	bl	8006840 <SDMMC_ReadFIFO>
 8006700:	4603      	mov	r3, r0
 8006702:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 f899 	bl	8006840 <SDMMC_ReadFIFO>
 800670e:	4603      	mov	r3, r0
 8006710:	60fb      	str	r3, [r7, #12]
      index++;
 8006712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006714:	3301      	adds	r3, #1
 8006716:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006718:	f7fa fa50 	bl	8000bbc <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006726:	d102      	bne.n	800672e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006728:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800672c:	e058      	b.n	80067e0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006734:	f240 532a 	movw	r3, #1322	@ 0x52a
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0d1      	beq.n	80066e2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006754:	2308      	movs	r3, #8
 8006756:	e043      	b.n	80067e0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2202      	movs	r2, #2
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800676e:	2302      	movs	r3, #2
 8006770:	e036      	b.n	80067e0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2220      	movs	r2, #32
 8006786:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006788:	2320      	movs	r3, #32
 800678a:	e029      	b.n	80067e0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <SD_FindSCR+0x19c>)
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	061a      	lsls	r2, r3, #24
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80067aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	0e1b      	lsrs	r3, r3, #24
 80067b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	601a      	str	r2, [r3, #0]
    scr++;
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	3304      	adds	r3, #4
 80067ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	061a      	lsls	r2, r3, #24
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80067d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	0e1b      	lsrs	r3, r3, #24
 80067d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80067da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3738      	adds	r7, #56	@ 0x38
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	18000f3a 	.word	0x18000f3a

080067ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80067ec:	b084      	sub	sp, #16
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	f107 001c 	add.w	r0, r7, #28
 80067fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006802:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006804:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006806:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800680a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800680e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8006812:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	4b07      	ldr	r3, [pc, #28]	@ (800683c <SDMMC_Init+0x50>)
 8006820:	4013      	ands	r3, r2
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	b004      	add	sp, #16
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	ffc02c00 	.word	0xffc02c00

08006840 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f043 0203 	orr.w	r2, r3, #3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0303 	and.w	r3, r3, #3
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80068da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80068e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80068e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <SDMMC_SendCommand+0x50>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	fffee0c0 	.word	0xfffee0c0

08006910 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	b2db      	uxtb	r3, r3
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3314      	adds	r3, #20
 8006938:	461a      	mov	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006976:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800697c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8006982:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800699a:	2300      	movs	r3, #0

}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80069b6:	2310      	movs	r3, #16
 80069b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069ca:	f107 0308 	add.w	r3, r7, #8
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ff73 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80069d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069da:	2110      	movs	r1, #16
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fa5f 	bl	8006ea0 <SDMMC_GetCmdResp1>
 80069e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069e4:	69fb      	ldr	r3, [r7, #28]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80069fc:	2311      	movs	r3, #17
 80069fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ff50 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a20:	2111      	movs	r1, #17
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa3c 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006a28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006a42:	2312      	movs	r3, #18
 8006a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ff2d 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a66:	2112      	movs	r1, #18
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa19 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a70:	69fb      	ldr	r3, [r7, #28]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006a88:	2318      	movs	r3, #24
 8006a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a9c:	f107 0308 	add.w	r3, r7, #8
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ff0a 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aac:	2118      	movs	r1, #24
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9f6 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006ace:	2319      	movs	r3, #25
 8006ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fee7 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af2:	2119      	movs	r1, #25
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9d3 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b14:	230c      	movs	r3, #12
 8006b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b26:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff feb8 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b7c <SDMMC_CmdStopTransfer+0x74>)
 8006b4e:	210c      	movs	r1, #12
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f9a5 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006b56:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b6a:	d101      	bne.n	8006b70 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006b70:	69fb      	ldr	r3, [r7, #28]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	05f5e100 	.word	0x05f5e100

08006b80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b8e:	2307      	movs	r3, #7
 8006b90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ba0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff fe87 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb2:	2107      	movs	r1, #7
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f973 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006bba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b088      	sub	sp, #32
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006be2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006be4:	f107 0308 	add.w	r3, r7, #8
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fe66 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fb97 	bl	8007324 <SDMMC_GetCmdError>
 8006bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b088      	sub	sp, #32
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c0a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c10:	2308      	movs	r3, #8
 8006c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c24:	f107 0308 	add.w	r3, r7, #8
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fe46 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fb29 	bl	8007288 <SDMMC_GetCmdResp7>
 8006c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c38:	69fb      	ldr	r3, [r7, #28]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b088      	sub	sp, #32
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c50:	2337      	movs	r3, #55	@ 0x37
 8006c52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fe26 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c74:	2137      	movs	r1, #55	@ 0x37
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f912 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006c96:	2329      	movs	r3, #41	@ 0x29
 8006c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff fe03 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa2e 	bl	8007118 <SDMMC_GetCmdResp3>
 8006cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006cd6:	2306      	movs	r3, #6
 8006cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ce8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fde3 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cfa:	2106      	movs	r1, #6
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8cf 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d04:	69fb      	ldr	r3, [r7, #28]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b088      	sub	sp, #32
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d1a:	2333      	movs	r3, #51	@ 0x33
 8006d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d2e:	f107 0308 	add.w	r3, r7, #8
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fdc1 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d3e:	2133      	movs	r1, #51	@ 0x33
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8ad 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d48:	69fb      	ldr	r3, [r7, #28]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b088      	sub	sp, #32
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fd9f 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f980 	bl	8007084 <SDMMC_GetCmdResp2>
 8006d84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d86:	69fb      	ldr	r3, [r7, #28]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d9e:	2309      	movs	r3, #9
 8006da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006da2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006db0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fd7f 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f960 	bl	8007084 <SDMMC_GetCmdResp2>
 8006dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3720      	adds	r7, #32
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006dde:	2303      	movs	r3, #3
 8006de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006df0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fd5f 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	2103      	movs	r1, #3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9c8 	bl	8007198 <SDMMC_GetCmdResp6>
 8006e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e22:	230d      	movs	r3, #13
 8006e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e36:	f107 0308 	add.w	r3, r7, #8
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fd3d 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e46:	210d      	movs	r1, #13
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f829 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e50:	69fb      	ldr	r3, [r7, #28]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b088      	sub	sp, #32
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006e66:	230d      	movs	r3, #13
 8006e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e7a:	f107 0308 	add.w	r3, r7, #8
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fd1b 	bl	80068bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e8a:	210d      	movs	r1, #13
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f807 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e94:	69fb      	ldr	r3, [r7, #28]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006eae:	4b70      	ldr	r3, [pc, #448]	@ (8007070 <SDMMC_GetCmdResp1+0x1d0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a70      	ldr	r2, [pc, #448]	@ (8007074 <SDMMC_GetCmdResp1+0x1d4>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	0a5a      	lsrs	r2, r3, #9
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	1e5a      	subs	r2, r3, #1
 8006ec6:	61fa      	str	r2, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ecc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ed0:	e0c9      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4b67      	ldr	r3, [pc, #412]	@ (8007078 <SDMMC_GetCmdResp1+0x1d8>)
 8006edc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0ef      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x22>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1ea      	bne.n	8006ec2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2204      	movs	r2, #4
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006efe:	2304      	movs	r3, #4
 8006f00:	e0b1      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0a6      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a58      	ldr	r2, [pc, #352]	@ (800707c <SDMMC_GetCmdResp1+0x1dc>)
 8006f1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff fcf6 	bl	8006910 <SDMMC_GetCommandResponse>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d001      	beq.n	8006f32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e099      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff fcf8 	bl	800692a <SDMMC_GetResponse>
 8006f3a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4b50      	ldr	r3, [pc, #320]	@ (8007080 <SDMMC_GetCmdResp1+0x1e0>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e08d      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da02      	bge.n	8006f56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f54:	e087      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f60:	2340      	movs	r3, #64	@ 0x40
 8006f62:	e080      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f6e:	2380      	movs	r3, #128	@ 0x80
 8006f70:	e079      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f80:	e071      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f90:	e069      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fa0:	e061      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fb0:	e059      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006fc0:	e051      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fd0:	e049      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006fdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fe0:	e041      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff0:	e039      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007000:	e031      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800700c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007010:	e029      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800701c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007020:	e021      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800702c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007030:	e019      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800703c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007040:	e011      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800704c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007050:	e009      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800705c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007060:	e001      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007062:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000004 	.word	0x20000004
 8007074:	10624dd3 	.word	0x10624dd3
 8007078:	00200045 	.word	0x00200045
 800707c:	002000c5 	.word	0x002000c5
 8007080:	fdffe008 	.word	0xfdffe008

08007084 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800708c:	4b1f      	ldr	r3, [pc, #124]	@ (800710c <SDMMC_GetCmdResp2+0x88>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1f      	ldr	r2, [pc, #124]	@ (8007110 <SDMMC_GetCmdResp2+0x8c>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	0a5b      	lsrs	r3, r3, #9
 8007098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1e5a      	subs	r2, r3, #1
 80070a6:	60fa      	str	r2, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80070b0:	e026      	b.n	8007100 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ef      	beq.n	80070a2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ea      	bne.n	80070a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2204      	movs	r2, #4
 80070dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070de:	2304      	movs	r3, #4
 80070e0:	e00e      	b.n	8007100 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e003      	b.n	8007100 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a06      	ldr	r2, [pc, #24]	@ (8007114 <SDMMC_GetCmdResp2+0x90>)
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	20000004 	.word	0x20000004
 8007110:	10624dd3 	.word	0x10624dd3
 8007114:	002000c5 	.word	0x002000c5

08007118 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007120:	4b1a      	ldr	r3, [pc, #104]	@ (800718c <SDMMC_GetCmdResp3+0x74>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1a      	ldr	r2, [pc, #104]	@ (8007190 <SDMMC_GetCmdResp3+0x78>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	0a5b      	lsrs	r3, r3, #9
 800712c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007130:	fb02 f303 	mul.w	r3, r2, r3
 8007134:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1e5a      	subs	r2, r3, #1
 800713a:	60fa      	str	r2, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007140:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007144:	e01b      	b.n	800717e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0ef      	beq.n	8007136 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1ea      	bne.n	8007136 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2204      	movs	r2, #4
 8007170:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007172:	2304      	movs	r3, #4
 8007174:	e003      	b.n	800717e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a06      	ldr	r2, [pc, #24]	@ (8007194 <SDMMC_GetCmdResp3+0x7c>)
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000004 	.word	0x20000004
 8007190:	10624dd3 	.word	0x10624dd3
 8007194:	002000c5 	.word	0x002000c5

08007198 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	460b      	mov	r3, r1
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071a6:	4b35      	ldr	r3, [pc, #212]	@ (800727c <SDMMC_GetCmdResp6+0xe4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a35      	ldr	r2, [pc, #212]	@ (8007280 <SDMMC_GetCmdResp6+0xe8>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	0a5b      	lsrs	r3, r3, #9
 80071b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	1e5a      	subs	r2, r3, #1
 80071c0:	61fa      	str	r2, [r7, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80071ca:	e052      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0ef      	beq.n	80071bc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1ea      	bne.n	80071bc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2204      	movs	r2, #4
 80071f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071f8:	2304      	movs	r3, #4
 80071fa:	e03a      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800720e:	2301      	movs	r3, #1
 8007210:	e02f      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fb7c 	bl	8006910 <SDMMC_GetCommandResponse>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	4293      	cmp	r3, r2
 8007220:	d001      	beq.n	8007226 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007222:	2301      	movs	r3, #1
 8007224:	e025      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4a16      	ldr	r2, [pc, #88]	@ (8007284 <SDMMC_GetCmdResp6+0xec>)
 800722a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800722c:	2100      	movs	r1, #0
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fb7b 	bl	800692a <SDMMC_GetResponse>
 8007234:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
 800724c:	e011      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800725c:	e009      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800726c:	e001      	b.n	8007272 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800726e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000004 	.word	0x20000004
 8007280:	10624dd3 	.word	0x10624dd3
 8007284:	002000c5 	.word	0x002000c5

08007288 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007290:	4b22      	ldr	r3, [pc, #136]	@ (800731c <SDMMC_GetCmdResp7+0x94>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a22      	ldr	r2, [pc, #136]	@ (8007320 <SDMMC_GetCmdResp7+0x98>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0a5b      	lsrs	r3, r3, #9
 800729c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	60fa      	str	r2, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80072b4:	e02c      	b.n	8007310 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0ef      	beq.n	80072a6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ea      	bne.n	80072a6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2204      	movs	r2, #4
 80072e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072e2:	2304      	movs	r3, #4
 80072e4:	e014      	b.n	8007310 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e009      	b.n	8007310 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2240      	movs	r2, #64	@ 0x40
 800730c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800730e:	2300      	movs	r3, #0

}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000004 	.word	0x20000004
 8007320:	10624dd3 	.word	0x10624dd3

08007324 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800732c:	4b11      	ldr	r3, [pc, #68]	@ (8007374 <SDMMC_GetCmdError+0x50>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a11      	ldr	r2, [pc, #68]	@ (8007378 <SDMMC_GetCmdError+0x54>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	0a5b      	lsrs	r3, r3, #9
 8007338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1e5a      	subs	r2, r3, #1
 8007346:	60fa      	str	r2, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800734c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007350:	e009      	b.n	8007366 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f1      	beq.n	8007342 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a06      	ldr	r2, [pc, #24]	@ (800737c <SDMMC_GetCmdError+0x58>)
 8007362:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000004 	.word	0x20000004
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	002000c5 	.word	0x002000c5

08007380 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	4a08      	ldr	r2, [pc, #32]	@ (80073b0 <disk_status+0x30>)
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	79fa      	ldrb	r2, [r7, #7]
 8007398:	4905      	ldr	r1, [pc, #20]	@ (80073b0 <disk_status+0x30>)
 800739a:	440a      	add	r2, r1
 800739c:	7a12      	ldrb	r2, [r2, #8]
 800739e:	4610      	mov	r0, r2
 80073a0:	4798      	blx	r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	200000d8 	.word	0x200000d8

080073b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007400 <disk_initialize+0x4c>)
 80073c6:	5cd3      	ldrb	r3, [r2, r3]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d114      	bne.n	80073f6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007400 <disk_initialize+0x4c>)
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	79fa      	ldrb	r2, [r7, #7]
 80073da:	4909      	ldr	r1, [pc, #36]	@ (8007400 <disk_initialize+0x4c>)
 80073dc:	440a      	add	r2, r1
 80073de:	7a12      	ldrb	r2, [r2, #8]
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	4a03      	ldr	r2, [pc, #12]	@ (8007400 <disk_initialize+0x4c>)
 80073f2:	2101      	movs	r1, #1
 80073f4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200000d8 	.word	0x200000d8

08007404 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4a0a      	ldr	r2, [pc, #40]	@ (8007440 <disk_read+0x3c>)
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	689c      	ldr	r4, [r3, #8]
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	4a07      	ldr	r2, [pc, #28]	@ (8007440 <disk_read+0x3c>)
 8007424:	4413      	add	r3, r2
 8007426:	7a18      	ldrb	r0, [r3, #8]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	47a0      	blx	r4
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]
  return res;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	bd90      	pop	{r4, r7, pc}
 800743e:	bf00      	nop
 8007440:	200000d8 	.word	0x200000d8

08007444 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	4a0a      	ldr	r2, [pc, #40]	@ (8007480 <disk_write+0x3c>)
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68dc      	ldr	r4, [r3, #12]
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	4a07      	ldr	r2, [pc, #28]	@ (8007480 <disk_write+0x3c>)
 8007464:	4413      	add	r3, r2
 8007466:	7a18      	ldrb	r0, [r3, #8]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	47a0      	blx	r4
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]
  return res;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd90      	pop	{r4, r7, pc}
 800747e:	bf00      	nop
 8007480:	200000d8 	.word	0x200000d8

08007484 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	603a      	str	r2, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
 8007490:	460b      	mov	r3, r1
 8007492:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	4a09      	ldr	r2, [pc, #36]	@ (80074bc <disk_ioctl+0x38>)
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	79fa      	ldrb	r2, [r7, #7]
 80074a2:	4906      	ldr	r1, [pc, #24]	@ (80074bc <disk_ioctl+0x38>)
 80074a4:	440a      	add	r2, r1
 80074a6:	7a10      	ldrb	r0, [r2, #8]
 80074a8:	79b9      	ldrb	r1, [r7, #6]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200000d8 	.word	0x200000d8

080074c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3301      	adds	r3, #1
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80074d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	b21a      	sxth	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21b      	sxth	r3, r3
 80074e2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074e4:	89fb      	ldrh	r3, [r7, #14]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3303      	adds	r3, #3
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	3202      	adds	r2, #2
 800750a:	7812      	ldrb	r2, [r2, #0]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	3201      	adds	r2, #1
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
	return rv;
 800752a:	68fb      	ldr	r3, [r7, #12]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	887a      	ldrh	r2, [r7, #2]
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	887b      	ldrh	r3, [r7, #2]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	887a      	ldrh	r2, [r7, #2]
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	0a1b      	lsrs	r3, r3, #8
 800759a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	1c53      	adds	r3, r2, #1
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	1c59      	adds	r1, r3, #1
 80075ea:	6179      	str	r1, [r7, #20]
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f1      	bne.n	80075e0 <mem_cpy+0x1a>
	}
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	617a      	str	r2, [r7, #20]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3b01      	subs	r3, #1
 8007628:	607b      	str	r3, [r7, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f3      	bne.n	8007618 <mem_set+0x10>
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800763e:	b480      	push	{r7}
 8007640:	b089      	sub	sp, #36	@ 0x24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	61fa      	str	r2, [r7, #28]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4619      	mov	r1, r3
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	61ba      	str	r2, [r7, #24]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	1acb      	subs	r3, r1, r3
 800766a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3b01      	subs	r3, #1
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <mem_cmp+0x40>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0eb      	beq.n	8007656 <mem_cmp+0x18>

	return r;
 800767e:	697b      	ldr	r3, [r7, #20]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3724      	adds	r7, #36	@ 0x24
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007696:	e002      	b.n	800769e <chk_chr+0x12>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3301      	adds	r3, #1
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <chk_chr+0x26>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d1f2      	bne.n	8007698 <chk_chr+0xc>
	return *str;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	781b      	ldrb	r3, [r3, #0]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	e029      	b.n	800772c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076d8:	4a27      	ldr	r2, [pc, #156]	@ (8007778 <chk_lock+0xb4>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	4413      	add	r3, r2
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01d      	beq.n	8007722 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076e6:	4a24      	ldr	r2, [pc, #144]	@ (8007778 <chk_lock+0xb4>)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d116      	bne.n	8007726 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007778 <chk_lock+0xb4>)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	4413      	add	r3, r2
 8007700:	3304      	adds	r3, #4
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007708:	429a      	cmp	r2, r3
 800770a:	d10c      	bne.n	8007726 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800770c:	4a1a      	ldr	r2, [pc, #104]	@ (8007778 <chk_lock+0xb4>)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	4413      	add	r3, r2
 8007714:	3308      	adds	r3, #8
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800771c:	429a      	cmp	r2, r3
 800771e:	d102      	bne.n	8007726 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007720:	e007      	b.n	8007732 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d9d2      	bls.n	80076d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d109      	bne.n	800774c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <chk_lock+0x80>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d101      	bne.n	8007748 <chk_lock+0x84>
 8007744:	2300      	movs	r3, #0
 8007746:	e010      	b.n	800776a <chk_lock+0xa6>
 8007748:	2312      	movs	r3, #18
 800774a:	e00e      	b.n	800776a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d108      	bne.n	8007764 <chk_lock+0xa0>
 8007752:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <chk_lock+0xb4>)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	4413      	add	r3, r2
 800775a:	330c      	adds	r3, #12
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007762:	d101      	bne.n	8007768 <chk_lock+0xa4>
 8007764:	2310      	movs	r3, #16
 8007766:	e000      	b.n	800776a <chk_lock+0xa6>
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	200000b8 	.word	0x200000b8

0800777c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
 8007786:	e002      	b.n	800778e <enq_lock+0x12>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3301      	adds	r3, #1
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d806      	bhi.n	80077a2 <enq_lock+0x26>
 8007794:	4a09      	ldr	r2, [pc, #36]	@ (80077bc <enq_lock+0x40>)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	4413      	add	r3, r2
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f2      	bne.n	8007788 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	200000b8 	.word	0x200000b8

080077c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	e01f      	b.n	8007810 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077d0:	4a41      	ldr	r2, [pc, #260]	@ (80078d8 <inc_lock+0x118>)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	4413      	add	r3, r2
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d113      	bne.n	800780a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077e2:	4a3d      	ldr	r2, [pc, #244]	@ (80078d8 <inc_lock+0x118>)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	4413      	add	r3, r2
 80077ea:	3304      	adds	r3, #4
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d109      	bne.n	800780a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077f6:	4a38      	ldr	r2, [pc, #224]	@ (80078d8 <inc_lock+0x118>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	4413      	add	r3, r2
 80077fe:	3308      	adds	r3, #8
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007806:	429a      	cmp	r2, r3
 8007808:	d006      	beq.n	8007818 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d9dc      	bls.n	80077d0 <inc_lock+0x10>
 8007816:	e000      	b.n	800781a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007818:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d132      	bne.n	8007886 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e002      	b.n	800782c <inc_lock+0x6c>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d806      	bhi.n	8007840 <inc_lock+0x80>
 8007832:	4a29      	ldr	r2, [pc, #164]	@ (80078d8 <inc_lock+0x118>)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	4413      	add	r3, r2
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f2      	bne.n	8007826 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d101      	bne.n	800784a <inc_lock+0x8a>
 8007846:	2300      	movs	r3, #0
 8007848:	e040      	b.n	80078cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	4922      	ldr	r1, [pc, #136]	@ (80078d8 <inc_lock+0x118>)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	440b      	add	r3, r1
 8007856:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	491e      	ldr	r1, [pc, #120]	@ (80078d8 <inc_lock+0x118>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	440b      	add	r3, r1
 8007864:	3304      	adds	r3, #4
 8007866:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	491a      	ldr	r1, [pc, #104]	@ (80078d8 <inc_lock+0x118>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	440b      	add	r3, r1
 8007874:	3308      	adds	r3, #8
 8007876:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007878:	4a17      	ldr	r2, [pc, #92]	@ (80078d8 <inc_lock+0x118>)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	4413      	add	r3, r2
 8007880:	330c      	adds	r3, #12
 8007882:	2200      	movs	r2, #0
 8007884:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <inc_lock+0xe0>
 800788c:	4a12      	ldr	r2, [pc, #72]	@ (80078d8 <inc_lock+0x118>)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4413      	add	r3, r2
 8007894:	330c      	adds	r3, #12
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <inc_lock+0xe0>
 800789c:	2300      	movs	r3, #0
 800789e:	e015      	b.n	80078cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d108      	bne.n	80078b8 <inc_lock+0xf8>
 80078a6:	4a0c      	ldr	r2, [pc, #48]	@ (80078d8 <inc_lock+0x118>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	4413      	add	r3, r2
 80078ae:	330c      	adds	r3, #12
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	e001      	b.n	80078bc <inc_lock+0xfc>
 80078b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078bc:	4906      	ldr	r1, [pc, #24]	@ (80078d8 <inc_lock+0x118>)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	440b      	add	r3, r1
 80078c4:	330c      	adds	r3, #12
 80078c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	200000b8 	.word	0x200000b8

080078dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d825      	bhi.n	800793c <dec_lock+0x60>
		n = Files[i].ctr;
 80078f0:	4a17      	ldr	r2, [pc, #92]	@ (8007950 <dec_lock+0x74>)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	4413      	add	r3, r2
 80078f8:	330c      	adds	r3, #12
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078fe:	89fb      	ldrh	r3, [r7, #14]
 8007900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007904:	d101      	bne.n	800790a <dec_lock+0x2e>
 8007906:	2300      	movs	r3, #0
 8007908:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800790a:	89fb      	ldrh	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <dec_lock+0x3a>
 8007910:	89fb      	ldrh	r3, [r7, #14]
 8007912:	3b01      	subs	r3, #1
 8007914:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007916:	4a0e      	ldr	r2, [pc, #56]	@ (8007950 <dec_lock+0x74>)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	4413      	add	r3, r2
 800791e:	330c      	adds	r3, #12
 8007920:	89fa      	ldrh	r2, [r7, #14]
 8007922:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007924:	89fb      	ldrh	r3, [r7, #14]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <dec_lock+0x5a>
 800792a:	4a09      	ldr	r2, [pc, #36]	@ (8007950 <dec_lock+0x74>)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	4413      	add	r3, r2
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	737b      	strb	r3, [r7, #13]
 800793a:	e001      	b.n	8007940 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800793c:	2302      	movs	r3, #2
 800793e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007940:	7b7b      	ldrb	r3, [r7, #13]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	200000b8 	.word	0x200000b8

08007954 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	e010      	b.n	8007984 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007962:	4a0d      	ldr	r2, [pc, #52]	@ (8007998 <clear_lock+0x44>)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	4413      	add	r3, r2
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	429a      	cmp	r2, r3
 8007970:	d105      	bne.n	800797e <clear_lock+0x2a>
 8007972:	4a09      	ldr	r2, [pc, #36]	@ (8007998 <clear_lock+0x44>)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	4413      	add	r3, r2
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d9eb      	bls.n	8007962 <clear_lock+0xe>
	}
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	200000b8 	.word	0x200000b8

0800799c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	78db      	ldrb	r3, [r3, #3]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d034      	beq.n	8007a1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7858      	ldrb	r0, [r3, #1]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079c0:	2301      	movs	r3, #1
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	f7ff fd3e 	bl	8007444 <disk_write>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
 80079d2:	e022      	b.n	8007a1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	1ad2      	subs	r2, r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d217      	bcs.n	8007a1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	789b      	ldrb	r3, [r3, #2]
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	e010      	b.n	8007a14 <sync_window+0x78>
					wsect += fs->fsize;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	7858      	ldrb	r0, [r3, #1]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a06:	2301      	movs	r3, #1
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	f7ff fd1b 	bl	8007444 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d8eb      	bhi.n	80079f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d01b      	beq.n	8007a74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff ffad 	bl	800799c <sync_window>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d113      	bne.n	8007a74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7858      	ldrb	r0, [r3, #1]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a56:	2301      	movs	r3, #1
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	f7ff fcd3 	bl	8007404 <disk_read>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ff87 	bl	800799c <sync_window>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d158      	bne.n	8007b4a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d148      	bne.n	8007b32 <sync_fs+0xb2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	791b      	ldrb	r3, [r3, #4]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d144      	bne.n	8007b32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3330      	adds	r3, #48	@ 0x30
 8007aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fda8 	bl	8007608 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3330      	adds	r3, #48	@ 0x30
 8007abc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ac0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fd37 	bl	8007538 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3330      	adds	r3, #48	@ 0x30
 8007ace:	4921      	ldr	r1, [pc, #132]	@ (8007b54 <sync_fs+0xd4>)
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fd4c 	bl	800756e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3330      	adds	r3, #48	@ 0x30
 8007ada:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007ade:	491e      	ldr	r1, [pc, #120]	@ (8007b58 <sync_fs+0xd8>)
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fd44 	bl	800756e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3330      	adds	r3, #48	@ 0x30
 8007aea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7ff fd3a 	bl	800756e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3330      	adds	r3, #48	@ 0x30
 8007afe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7ff fd30 	bl	800756e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7858      	ldrb	r0, [r3, #1]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	2301      	movs	r3, #1
 8007b28:	f7ff fc8c 	bl	8007444 <disk_write>
			fs->fsi_flag = 0;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2200      	movs	r2, #0
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fca2 	bl	8007484 <disk_ioctl>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <sync_fs+0xca>
 8007b46:	2301      	movs	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	41615252 	.word	0x41615252
 8007b58:	61417272 	.word	0x61417272

08007b5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	3b02      	subs	r3, #2
 8007b6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	3b02      	subs	r3, #2
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d301      	bcc.n	8007b7c <clust2sect+0x20>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e008      	b.n	8007b8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	895b      	ldrh	r3, [r3, #10]
 8007b80:	461a      	mov	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	fb03 f202 	mul.w	r2, r3, r2
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	4413      	add	r3, r2
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d904      	bls.n	8007bba <get_fat+0x20>
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d302      	bcc.n	8007bc0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e08e      	b.n	8007cde <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d061      	beq.n	8007c92 <get_fat+0xf8>
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	dc7b      	bgt.n	8007cca <get_fat+0x130>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d002      	beq.n	8007bdc <get_fat+0x42>
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d041      	beq.n	8007c5e <get_fat+0xc4>
 8007bda:	e076      	b.n	8007cca <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	085b      	lsrs	r3, r3, #1
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	0a5b      	lsrs	r3, r3, #9
 8007bf2:	4413      	add	r3, r2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6938      	ldr	r0, [r7, #16]
 8007bf8:	f7ff ff14 	bl	8007a24 <move_window>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d166      	bne.n	8007cd0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	60fa      	str	r2, [r7, #12]
 8007c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	0a5b      	lsrs	r3, r3, #9
 8007c1e:	4413      	add	r3, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	6938      	ldr	r0, [r7, #16]
 8007c24:	f7ff fefe 	bl	8007a24 <move_window>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d152      	bne.n	8007cd4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4413      	add	r3, r2
 8007c38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <get_fat+0xba>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	e002      	b.n	8007c5a <get_fat+0xc0>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c5a:	617b      	str	r3, [r7, #20]
			break;
 8007c5c:	e03f      	b.n	8007cde <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	4413      	add	r3, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6938      	ldr	r0, [r7, #16]
 8007c6c:	f7ff feda 	bl	8007a24 <move_window>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d130      	bne.n	8007cd8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007c84:	4413      	add	r3, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fc1a 	bl	80074c0 <ld_word>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	617b      	str	r3, [r7, #20]
			break;
 8007c90:	e025      	b.n	8007cde <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	09db      	lsrs	r3, r3, #7
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6938      	ldr	r0, [r7, #16]
 8007ca0:	f7ff fec0 	bl	8007a24 <move_window>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d118      	bne.n	8007cdc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007cb8:	4413      	add	r3, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fc19 	bl	80074f2 <ld_dword>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007cc6:	617b      	str	r3, [r7, #20]
			break;
 8007cc8:	e009      	b.n	8007cde <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007cca:	2301      	movs	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e006      	b.n	8007cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cd0:	bf00      	nop
 8007cd2:	e004      	b.n	8007cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cd4:	bf00      	nop
 8007cd6:	e002      	b.n	8007cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cd8:	bf00      	nop
 8007cda:	e000      	b.n	8007cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cdc:	bf00      	nop
		}
	}

	return val;
 8007cde:	697b      	ldr	r3, [r7, #20]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ce8:	b590      	push	{r4, r7, lr}
 8007cea:	b089      	sub	sp, #36	@ 0x24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	f240 80d9 	bls.w	8007eb2 <put_fat+0x1ca>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	f080 80d3 	bcs.w	8007eb2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	f000 8096 	beq.w	8007e42 <put_fat+0x15a>
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	f300 80cb 	bgt.w	8007eb2 <put_fat+0x1ca>
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d002      	beq.n	8007d26 <put_fat+0x3e>
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d06e      	beq.n	8007e02 <put_fat+0x11a>
 8007d24:	e0c5      	b.n	8007eb2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	4413      	add	r3, r2
 8007d32:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a1a      	ldr	r2, [r3, #32]
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	0a5b      	lsrs	r3, r3, #9
 8007d3c:	4413      	add	r3, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fe6f 	bl	8007a24 <move_window>
 8007d46:	4603      	mov	r3, r0
 8007d48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d4a:	7ffb      	ldrb	r3, [r7, #31]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 80a9 	bne.w	8007ea4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	1c59      	adds	r1, r3, #1
 8007d5c:	61b9      	str	r1, [r7, #24]
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	4413      	add	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00d      	beq.n	8007d8c <put_fat+0xa4>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b25b      	sxtb	r3, r3
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	b25a      	sxtb	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	b25b      	sxtb	r3, r3
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	4313      	orrs	r3, r2
 8007d86:	b25b      	sxtb	r3, r3
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	e001      	b.n	8007d90 <put_fat+0xa8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	0a5b      	lsrs	r3, r3, #9
 8007da2:	4413      	add	r3, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fe3c 	bl	8007a24 <move_window>
 8007dac:	4603      	mov	r3, r0
 8007dae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007db0:	7ffb      	ldrb	r3, [r7, #31]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d178      	bne.n	8007ea8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	4413      	add	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <put_fat+0xf0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	091b      	lsrs	r3, r3, #4
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	e00e      	b.n	8007df6 <put_fat+0x10e>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	f023 030f 	bic.w	r3, r3, #15
 8007de2:	b25a      	sxtb	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b25b      	sxtb	r3, r3
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	70da      	strb	r2, [r3, #3]
			break;
 8007e00:	e057      	b.n	8007eb2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1a      	ldr	r2, [r3, #32]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	0a1b      	lsrs	r3, r3, #8
 8007e0a:	4413      	add	r3, r2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fe08 	bl	8007a24 <move_window>
 8007e14:	4603      	mov	r3, r0
 8007e16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e18:	7ffb      	ldrb	r3, [r7, #31]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d146      	bne.n	8007eac <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007e2c:	4413      	add	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	b292      	uxth	r2, r2
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fb7f 	bl	8007538 <st_word>
			fs->wflag = 1;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	70da      	strb	r2, [r3, #3]
			break;
 8007e40:	e037      	b.n	8007eb2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	09db      	lsrs	r3, r3, #7
 8007e4a:	4413      	add	r3, r2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fde8 	bl	8007a24 <move_window>
 8007e54:	4603      	mov	r3, r0
 8007e56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e58:	7ffb      	ldrb	r3, [r7, #31]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d128      	bne.n	8007eb0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e72:	4413      	add	r3, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fb3c 	bl	80074f2 <ld_dword>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007e80:	4323      	orrs	r3, r4
 8007e82:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e92:	4413      	add	r3, r2
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fb69 	bl	800756e <st_dword>
			fs->wflag = 1;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	70da      	strb	r2, [r3, #3]
			break;
 8007ea2:	e006      	b.n	8007eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ea4:	bf00      	nop
 8007ea6:	e004      	b.n	8007eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ea8:	bf00      	nop
 8007eaa:	e002      	b.n	8007eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007eb0:	bf00      	nop
		}
	}
	return res;
 8007eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3724      	adds	r7, #36	@ 0x24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}

08007ebc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d904      	bls.n	8007ee2 <remove_chain+0x26>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d301      	bcc.n	8007ee6 <remove_chain+0x2a>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e04b      	b.n	8007f7e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00c      	beq.n	8007f06 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	69b8      	ldr	r0, [r7, #24]
 8007ef4:	f7ff fef8 	bl	8007ce8 <put_fat>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007efc:	7ffb      	ldrb	r3, [r7, #31]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <remove_chain+0x4a>
 8007f02:	7ffb      	ldrb	r3, [r7, #31]
 8007f04:	e03b      	b.n	8007f7e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff fe46 	bl	8007b9a <get_fat>
 8007f0e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d031      	beq.n	8007f7a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <remove_chain+0x64>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e02e      	b.n	8007f7e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f26:	d101      	bne.n	8007f2c <remove_chain+0x70>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e028      	b.n	8007f7e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	69b8      	ldr	r0, [r7, #24]
 8007f32:	f7ff fed9 	bl	8007ce8 <put_fat>
 8007f36:	4603      	mov	r3, r0
 8007f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <remove_chain+0x88>
 8007f40:	7ffb      	ldrb	r3, [r7, #31]
 8007f42:	e01c      	b.n	8007f7e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	3b02      	subs	r3, #2
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d20b      	bcs.n	8007f6a <remove_chain+0xae>
			fs->free_clst++;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	791b      	ldrb	r3, [r3, #4]
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3c6      	bcc.n	8007f06 <remove_chain+0x4a>
 8007f78:	e000      	b.n	8007f7c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f7a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3720      	adds	r7, #32
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b088      	sub	sp, #32
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10d      	bne.n	8007fb8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <create_chain+0x2c>
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d31b      	bcc.n	8007fea <create_chain+0x64>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	e018      	b.n	8007fea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fded 	bl	8007b9a <get_fat>
 8007fc0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d801      	bhi.n	8007fcc <create_chain+0x46>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e070      	b.n	80080ae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fd2:	d101      	bne.n	8007fd8 <create_chain+0x52>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	e06a      	b.n	80080ae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d201      	bcs.n	8007fe6 <create_chain+0x60>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	e063      	b.n	80080ae <create_chain+0x128>
		scl = clst;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d307      	bcc.n	800800e <create_chain+0x88>
				ncl = 2;
 8007ffe:	2302      	movs	r3, #2
 8008000:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	429a      	cmp	r2, r3
 8008008:	d901      	bls.n	800800e <create_chain+0x88>
 800800a:	2300      	movs	r3, #0
 800800c:	e04f      	b.n	80080ae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800800e:	69f9      	ldr	r1, [r7, #28]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff fdc2 	bl	8007b9a <get_fat>
 8008016:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d003      	beq.n	800802c <create_chain+0xa6>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800802a:	d101      	bne.n	8008030 <create_chain+0xaa>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	e03e      	b.n	80080ae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	429a      	cmp	r2, r3
 8008036:	d1da      	bne.n	8007fee <create_chain+0x68>
 8008038:	2300      	movs	r3, #0
 800803a:	e038      	b.n	80080ae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800803c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800803e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008042:	69f9      	ldr	r1, [r7, #28]
 8008044:	6938      	ldr	r0, [r7, #16]
 8008046:	f7ff fe4f 	bl	8007ce8 <put_fat>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d109      	bne.n	8008068 <create_chain+0xe2>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6938      	ldr	r0, [r7, #16]
 8008060:	f7ff fe42 	bl	8007ce8 <put_fat>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d116      	bne.n	800809c <create_chain+0x116>
		fs->last_clst = ncl;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	3b02      	subs	r3, #2
 800807e:	429a      	cmp	r2, r3
 8008080:	d804      	bhi.n	800808c <create_chain+0x106>
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	1e5a      	subs	r2, r3, #1
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	f043 0301 	orr.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	711a      	strb	r2, [r3, #4]
 800809a:	e007      	b.n	80080ac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d102      	bne.n	80080a8 <create_chain+0x122>
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080a6:	e000      	b.n	80080aa <create_chain+0x124>
 80080a8:	2301      	movs	r3, #1
 80080aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080ac:	69fb      	ldr	r3, [r7, #28]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3720      	adds	r7, #32
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b087      	sub	sp, #28
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ca:	3304      	adds	r3, #4
 80080cc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	0a5b      	lsrs	r3, r3, #9
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	8952      	ldrh	r2, [r2, #10]
 80080d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	613a      	str	r2, [r7, #16]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <clmt_clust+0x3a>
 80080ec:	2300      	movs	r3, #0
 80080ee:	e010      	b.n	8008112 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d307      	bcc.n	8008108 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3304      	adds	r3, #4
 8008104:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008106:	e7e9      	b.n	80080dc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008108:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	4413      	add	r3, r2
}
 8008112:	4618      	mov	r0, r3
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b086      	sub	sp, #24
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008134:	d204      	bcs.n	8008140 <dir_sdi+0x22>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f003 031f 	and.w	r3, r3, #31
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008140:	2302      	movs	r3, #2
 8008142:	e063      	b.n	800820c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <dir_sdi+0x46>
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d902      	bls.n	8008164 <dir_sdi+0x46>
		clst = fs->dirbase;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008162:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10c      	bne.n	8008184 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	8912      	ldrh	r2, [r2, #8]
 8008172:	4293      	cmp	r3, r2
 8008174:	d301      	bcc.n	800817a <dir_sdi+0x5c>
 8008176:	2302      	movs	r3, #2
 8008178:	e048      	b.n	800820c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	61da      	str	r2, [r3, #28]
 8008182:	e029      	b.n	80081d8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	895b      	ldrh	r3, [r3, #10]
 8008188:	025b      	lsls	r3, r3, #9
 800818a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800818c:	e019      	b.n	80081c2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fd01 	bl	8007b9a <get_fat>
 8008198:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081a0:	d101      	bne.n	80081a6 <dir_sdi+0x88>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e032      	b.n	800820c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d904      	bls.n	80081b6 <dir_sdi+0x98>
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d301      	bcc.n	80081ba <dir_sdi+0x9c>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e028      	b.n	800820c <dir_sdi+0xee>
			ofs -= csz;
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d2e1      	bcs.n	800818e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081ca:	6979      	ldr	r1, [r7, #20]
 80081cc:	6938      	ldr	r0, [r7, #16]
 80081ce:	f7ff fcc5 	bl	8007b5c <clust2sect>
 80081d2:	4602      	mov	r2, r0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <dir_sdi+0xcc>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e010      	b.n	800820c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	69da      	ldr	r2, [r3, #28]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	0a5b      	lsrs	r3, r3, #9
 80081f2:	441a      	add	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	441a      	add	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	3320      	adds	r3, #32
 800822a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <dir_next+0x28>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800823a:	d301      	bcc.n	8008240 <dir_next+0x2c>
 800823c:	2304      	movs	r3, #4
 800823e:	e0aa      	b.n	8008396 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	2b00      	cmp	r3, #0
 8008248:	f040 8098 	bne.w	800837c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	8912      	ldrh	r2, [r2, #8]
 8008266:	4293      	cmp	r3, r2
 8008268:	f0c0 8088 	bcc.w	800837c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	61da      	str	r2, [r3, #28]
 8008272:	2304      	movs	r3, #4
 8008274:	e08f      	b.n	8008396 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	0a5b      	lsrs	r3, r3, #9
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	8952      	ldrh	r2, [r2, #10]
 800827e:	3a01      	subs	r2, #1
 8008280:	4013      	ands	r3, r2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d17a      	bne.n	800837c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f7ff fc83 	bl	8007b9a <get_fat>
 8008294:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d801      	bhi.n	80082a0 <dir_next+0x8c>
 800829c:	2302      	movs	r3, #2
 800829e:	e07a      	b.n	8008396 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082a6:	d101      	bne.n	80082ac <dir_next+0x98>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e074      	b.n	8008396 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d358      	bcc.n	8008368 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	61da      	str	r2, [r3, #28]
 80082c2:	2304      	movs	r3, #4
 80082c4:	e067      	b.n	8008396 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7ff fe59 	bl	8007f86 <create_chain>
 80082d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <dir_next+0xcc>
 80082dc:	2307      	movs	r3, #7
 80082de:	e05a      	b.n	8008396 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <dir_next+0xd6>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e055      	b.n	8008396 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082f0:	d101      	bne.n	80082f6 <dir_next+0xe2>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e04f      	b.n	8008396 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fb50 	bl	800799c <sync_window>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <dir_next+0xf2>
 8008302:	2301      	movs	r3, #1
 8008304:	e047      	b.n	8008396 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3330      	adds	r3, #48	@ 0x30
 800830a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800830e:	2100      	movs	r1, #0
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff f979 	bl	8007608 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008316:	2300      	movs	r3, #0
 8008318:	613b      	str	r3, [r7, #16]
 800831a:	6979      	ldr	r1, [r7, #20]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fc1d 	bl	8007b5c <clust2sect>
 8008322:	4602      	mov	r2, r0
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008328:	e012      	b.n	8008350 <dir_next+0x13c>
						fs->wflag = 1;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff fb33 	bl	800799c <sync_window>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <dir_next+0x12c>
 800833c:	2301      	movs	r3, #1
 800833e:	e02a      	b.n	8008396 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	3301      	adds	r3, #1
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	895b      	ldrh	r3, [r3, #10]
 8008354:	461a      	mov	r2, r3
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	4293      	cmp	r3, r2
 800835a:	d3e6      	bcc.n	800832a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	1ad2      	subs	r2, r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800836e:	6979      	ldr	r1, [r7, #20]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff fbf3 	bl	8007b5c <clust2sect>
 8008376:	4602      	mov	r2, r0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	441a      	add	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80083ae:	2100      	movs	r1, #0
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff feb4 	bl	800811e <dir_sdi>
 80083b6:	4603      	mov	r3, r0
 80083b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d12b      	bne.n	8008418 <dir_alloc+0x7a>
		n = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	4619      	mov	r1, r3
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7ff fb2a 	bl	8007a24 <move_window>
 80083d0:	4603      	mov	r3, r0
 80083d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d11d      	bne.n	8008416 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2be5      	cmp	r3, #229	@ 0xe5
 80083e2:	d004      	beq.n	80083ee <dir_alloc+0x50>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d107      	bne.n	80083fe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d102      	bne.n	8008402 <dir_alloc+0x64>
 80083fc:	e00c      	b.n	8008418 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80083fe:	2300      	movs	r3, #0
 8008400:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008402:	2101      	movs	r1, #1
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff ff05 	bl	8008214 <dir_next>
 800840a:	4603      	mov	r3, r0
 800840c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0d7      	beq.n	80083c4 <dir_alloc+0x26>
 8008414:	e000      	b.n	8008418 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008416:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008418:	7dfb      	ldrb	r3, [r7, #23]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d101      	bne.n	8008422 <dir_alloc+0x84>
 800841e:	2307      	movs	r3, #7
 8008420:	75fb      	strb	r3, [r7, #23]
	return res;
 8008422:	7dfb      	ldrb	r3, [r7, #23]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	331a      	adds	r3, #26
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff f840 	bl	80074c0 <ld_word>
 8008440:	4603      	mov	r3, r0
 8008442:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d109      	bne.n	8008460 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	3314      	adds	r3, #20
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff f835 	bl	80074c0 <ld_word>
 8008456:	4603      	mov	r3, r0
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008460:	68fb      	ldr	r3, [r7, #12]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	331a      	adds	r3, #26
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	b292      	uxth	r2, r2
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff f859 	bl	8007538 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d109      	bne.n	80084a2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f103 0214 	add.w	r2, r3, #20
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	b29b      	uxth	r3, r3
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7ff f84b 	bl	8007538 <st_word>
	}
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084b8:	2100      	movs	r1, #0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff fe2f 	bl	800811e <dir_sdi>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <dir_find+0x24>
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	e03e      	b.n	800854c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6938      	ldr	r0, [r7, #16]
 80084d6:	f7ff faa5 	bl	8007a24 <move_window>
 80084da:	4603      	mov	r3, r0
 80084dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d12f      	bne.n	8008544 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <dir_find+0x4e>
 80084f2:	2304      	movs	r3, #4
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e028      	b.n	800854a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	330b      	adds	r3, #11
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008504:	b2da      	uxtb	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	330b      	adds	r3, #11
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <dir_find+0x86>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a18      	ldr	r0, [r3, #32]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3324      	adds	r3, #36	@ 0x24
 8008522:	220b      	movs	r2, #11
 8008524:	4619      	mov	r1, r3
 8008526:	f7ff f88a 	bl	800763e <mem_cmp>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008530:	2100      	movs	r1, #0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff fe6e 	bl	8008214 <dir_next>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0c5      	beq.n	80084ce <dir_find+0x24>
 8008542:	e002      	b.n	800854a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008544:	bf00      	nop
 8008546:	e000      	b.n	800854a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008548:	bf00      	nop

	return res;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008562:	2101      	movs	r1, #1
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff ff1a 	bl	800839e <dir_alloc>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11c      	bne.n	80085ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	4619      	mov	r1, r3
 800857a:	68b8      	ldr	r0, [r7, #8]
 800857c:	f7ff fa52 	bl	8007a24 <move_window>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d111      	bne.n	80085ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	2220      	movs	r2, #32
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff f838 	bl	8007608 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a18      	ldr	r0, [r3, #32]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3324      	adds	r3, #36	@ 0x24
 80085a0:	220b      	movs	r2, #11
 80085a2:	4619      	mov	r1, r3
 80085a4:	f7ff f80f 	bl	80075c6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2201      	movs	r2, #1
 80085ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3324      	adds	r3, #36	@ 0x24
 80085cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085ce:	220b      	movs	r2, #11
 80085d0:	2120      	movs	r1, #32
 80085d2:	68b8      	ldr	r0, [r7, #8]
 80085d4:	f7ff f818 	bl	8007608 <mem_set>
	si = i = 0; ni = 8;
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	2308      	movs	r3, #8
 80085e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	61fa      	str	r2, [r7, #28]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80085f2:	7efb      	ldrb	r3, [r7, #27]
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d94e      	bls.n	8008696 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80085f8:	7efb      	ldrb	r3, [r7, #27]
 80085fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80085fc:	d006      	beq.n	800860c <create_name+0x54>
 80085fe:	7efb      	ldrb	r3, [r7, #27]
 8008600:	2b5c      	cmp	r3, #92	@ 0x5c
 8008602:	d110      	bne.n	8008626 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008604:	e002      	b.n	800860c <create_name+0x54>
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3301      	adds	r3, #1
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	4413      	add	r3, r2
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b2f      	cmp	r3, #47	@ 0x2f
 8008616:	d0f6      	beq.n	8008606 <create_name+0x4e>
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b5c      	cmp	r3, #92	@ 0x5c
 8008622:	d0f0      	beq.n	8008606 <create_name+0x4e>
			break;
 8008624:	e038      	b.n	8008698 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008626:	7efb      	ldrb	r3, [r7, #27]
 8008628:	2b2e      	cmp	r3, #46	@ 0x2e
 800862a:	d003      	beq.n	8008634 <create_name+0x7c>
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	429a      	cmp	r2, r3
 8008632:	d30c      	bcc.n	800864e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b0b      	cmp	r3, #11
 8008638:	d002      	beq.n	8008640 <create_name+0x88>
 800863a:	7efb      	ldrb	r3, [r7, #27]
 800863c:	2b2e      	cmp	r3, #46	@ 0x2e
 800863e:	d001      	beq.n	8008644 <create_name+0x8c>
 8008640:	2306      	movs	r3, #6
 8008642:	e044      	b.n	80086ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008644:	2308      	movs	r3, #8
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	230b      	movs	r3, #11
 800864a:	617b      	str	r3, [r7, #20]
			continue;
 800864c:	e022      	b.n	8008694 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800864e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008652:	2b00      	cmp	r3, #0
 8008654:	da04      	bge.n	8008660 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008656:	7efb      	ldrb	r3, [r7, #27]
 8008658:	3b80      	subs	r3, #128	@ 0x80
 800865a:	4a1f      	ldr	r2, [pc, #124]	@ (80086d8 <create_name+0x120>)
 800865c:	5cd3      	ldrb	r3, [r2, r3]
 800865e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008660:	7efb      	ldrb	r3, [r7, #27]
 8008662:	4619      	mov	r1, r3
 8008664:	481d      	ldr	r0, [pc, #116]	@ (80086dc <create_name+0x124>)
 8008666:	f7ff f811 	bl	800768c <chk_chr>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <create_name+0xbc>
 8008670:	2306      	movs	r3, #6
 8008672:	e02c      	b.n	80086ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008674:	7efb      	ldrb	r3, [r7, #27]
 8008676:	2b60      	cmp	r3, #96	@ 0x60
 8008678:	d905      	bls.n	8008686 <create_name+0xce>
 800867a:	7efb      	ldrb	r3, [r7, #27]
 800867c:	2b7a      	cmp	r3, #122	@ 0x7a
 800867e:	d802      	bhi.n	8008686 <create_name+0xce>
 8008680:	7efb      	ldrb	r3, [r7, #27]
 8008682:	3b20      	subs	r3, #32
 8008684:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	613a      	str	r2, [r7, #16]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	4413      	add	r3, r2
 8008690:	7efa      	ldrb	r2, [r7, #27]
 8008692:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008694:	e7a6      	b.n	80085e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008696:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	441a      	add	r2, r3
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <create_name+0xf4>
 80086a8:	2306      	movs	r3, #6
 80086aa:	e010      	b.n	80086ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2be5      	cmp	r3, #229	@ 0xe5
 80086b2:	d102      	bne.n	80086ba <create_name+0x102>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2205      	movs	r2, #5
 80086b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80086ba:	7efb      	ldrb	r3, [r7, #27]
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d801      	bhi.n	80086c4 <create_name+0x10c>
 80086c0:	2204      	movs	r2, #4
 80086c2:	e000      	b.n	80086c6 <create_name+0x10e>
 80086c4:	2200      	movs	r2, #0
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	330b      	adds	r3, #11
 80086ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80086cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	080098d0 	.word	0x080098d0
 80086dc:	080097a0 	.word	0x080097a0

080086e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80086f4:	e002      	b.n	80086fc <follow_path+0x1c>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b2f      	cmp	r3, #47	@ 0x2f
 8008702:	d0f8      	beq.n	80086f6 <follow_path+0x16>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b5c      	cmp	r3, #92	@ 0x5c
 800870a:	d0f4      	beq.n	80086f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b1f      	cmp	r3, #31
 8008718:	d80a      	bhi.n	8008730 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2280      	movs	r2, #128	@ 0x80
 800871e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008722:	2100      	movs	r1, #0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fcfa 	bl	800811e <dir_sdi>
 800872a:	4603      	mov	r3, r0
 800872c:	75fb      	strb	r3, [r7, #23]
 800872e:	e043      	b.n	80087b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008730:	463b      	mov	r3, r7
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ff3f 	bl	80085b8 <create_name>
 800873a:	4603      	mov	r3, r0
 800873c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d134      	bne.n	80087ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff feb0 	bl	80084aa <dir_find>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008754:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	2b04      	cmp	r3, #4
 8008760:	d127      	bne.n	80087b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d122      	bne.n	80087b2 <follow_path+0xd2>
 800876c:	2305      	movs	r3, #5
 800876e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008770:	e01f      	b.n	80087b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11c      	bne.n	80087b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	799b      	ldrb	r3, [r3, #6]
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	d102      	bne.n	800878e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008788:	2305      	movs	r3, #5
 800878a:	75fb      	strb	r3, [r7, #23]
 800878c:	e014      	b.n	80087b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879c:	4413      	add	r3, r2
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff fe43 	bl	800842c <ld_clust>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087ac:	e7c0      	b.n	8008730 <follow_path+0x50>
			if (res != FR_OK) break;
 80087ae:	bf00      	nop
 80087b0:	e002      	b.n	80087b8 <follow_path+0xd8>
				break;
 80087b2:	bf00      	nop
 80087b4:	e000      	b.n	80087b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087b6:	bf00      	nop
			}
		}
	}

	return res;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b087      	sub	sp, #28
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d031      	beq.n	800883c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e002      	b.n	80087e6 <get_ldnumber+0x24>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	3301      	adds	r3, #1
 80087e4:	617b      	str	r3, [r7, #20]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d903      	bls.n	80087f6 <get_ldnumber+0x34>
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80087f4:	d1f4      	bne.n	80087e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b3a      	cmp	r3, #58	@ 0x3a
 80087fc:	d11c      	bne.n	8008838 <get_ldnumber+0x76>
			tp = *path;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	60fa      	str	r2, [r7, #12]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	3b30      	subs	r3, #48	@ 0x30
 800880e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b09      	cmp	r3, #9
 8008814:	d80e      	bhi.n	8008834 <get_ldnumber+0x72>
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	429a      	cmp	r2, r3
 800881c:	d10a      	bne.n	8008834 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <get_ldnumber+0x72>
					vol = (int)i;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	3301      	adds	r3, #1
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	e002      	b.n	800883e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008838:	2300      	movs	r3, #0
 800883a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800883c:	693b      	ldr	r3, [r7, #16]
}
 800883e:	4618      	mov	r0, r3
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	70da      	strb	r2, [r3, #3]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008862:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff f8dc 	bl	8007a24 <move_window>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <check_fs+0x2a>
 8008872:	2304      	movs	r3, #4
 8008874:	e038      	b.n	80088e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3330      	adds	r3, #48	@ 0x30
 800887a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fe1e 	bl	80074c0 <ld_word>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800888c:	429a      	cmp	r2, r3
 800888e:	d001      	beq.n	8008894 <check_fs+0x48>
 8008890:	2303      	movs	r3, #3
 8008892:	e029      	b.n	80088e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800889a:	2be9      	cmp	r3, #233	@ 0xe9
 800889c:	d009      	beq.n	80088b2 <check_fs+0x66>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088a4:	2beb      	cmp	r3, #235	@ 0xeb
 80088a6:	d11e      	bne.n	80088e6 <check_fs+0x9a>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80088ae:	2b90      	cmp	r3, #144	@ 0x90
 80088b0:	d119      	bne.n	80088e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3330      	adds	r3, #48	@ 0x30
 80088b6:	3336      	adds	r3, #54	@ 0x36
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fe1a 	bl	80074f2 <ld_dword>
 80088be:	4603      	mov	r3, r0
 80088c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80088c4:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <check_fs+0xa4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d101      	bne.n	80088ce <check_fs+0x82>
 80088ca:	2300      	movs	r3, #0
 80088cc:	e00c      	b.n	80088e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3330      	adds	r3, #48	@ 0x30
 80088d2:	3352      	adds	r3, #82	@ 0x52
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fe0c 	bl	80074f2 <ld_dword>
 80088da:	4603      	mov	r3, r0
 80088dc:	4a05      	ldr	r2, [pc, #20]	@ (80088f4 <check_fs+0xa8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <check_fs+0x9a>
 80088e2:	2300      	movs	r3, #0
 80088e4:	e000      	b.n	80088e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80088e6:	2302      	movs	r3, #2
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	00544146 	.word	0x00544146
 80088f4:	33544146 	.word	0x33544146

080088f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b096      	sub	sp, #88	@ 0x58
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;
	UINT i;

	/* Get logical drive number */
	*rfs = 0;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff ff58 	bl	80087c2 <get_ldnumber>
 8008912:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	da01      	bge.n	800891e <find_volume+0x26>
 800891a:	230b      	movs	r3, #11
 800891c:	e237      	b.n	8008d8e <find_volume+0x496>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800891e:	4aa6      	ldr	r2, [pc, #664]	@ (8008bb8 <find_volume+0x2c0>)
 8008920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008926:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <find_volume+0x3a>
 800892e:	230c      	movs	r3, #12
 8008930:	e22d      	b.n	8008d8e <find_volume+0x496>


	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008936:	601a      	str	r2, [r3, #0]


	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	f023 0301 	bic.w	r3, r3, #1
 800893e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01a      	beq.n	800897e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fd17 	bl	8007380 <disk_status>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10c      	bne.n	800897e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008964:	79fb      	ldrb	r3, [r7, #7]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d007      	beq.n	800897a <find_volume+0x82>
 800896a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008976:	230a      	movs	r3, #10
 8008978:	e209      	b.n	8008d8e <find_volume+0x496>
			}
			return FR_OK;				/* The file system object is valid */
 800897a:	2300      	movs	r3, #0
 800897c:	e207      	b.n	8008d8e <find_volume+0x496>


	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008986:	b2da      	uxtb	r2, r3
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	705a      	strb	r2, [r3, #1]
	/* DISK TEST START */
	FRESULT fResult = disk_read(0, fs->win, 0, 1);
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008992:	2301      	movs	r3, #1
 8008994:	2200      	movs	r2, #0
 8008996:	2000      	movs	r0, #0
 8008998:	f7fe fd34 	bl	8007404 <disk_read>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/* DISK TEST END */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80089a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a4:	785b      	ldrb	r3, [r3, #1]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fd04 	bl	80073b4 <disk_initialize>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80089b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <find_volume+0xca>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80089be:	2303      	movs	r3, #3
 80089c0:	e1e5      	b.n	8008d8e <find_volume+0x496>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d007      	beq.n	80089d8 <find_volume+0xe0>
 80089c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <find_volume+0xe0>
		return FR_WRITE_PROTECTED;
 80089d4:	230a      	movs	r3, #10
 80089d6:	e1da      	b.n	8008d8e <find_volume+0x496>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	653b      	str	r3, [r7, #80]	@ 0x50


	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80089dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089e0:	f7ff ff34 	bl	800884c <check_fs>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d149      	bne.n	8008a86 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089f2:	2300      	movs	r3, #0
 80089f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80089f6:	e01e      	b.n	8008a36 <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008a06:	4413      	add	r3, r2
 8008a08:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <find_volume+0x12a>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	3308      	adds	r3, #8
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fd6a 	bl	80074f2 <ld_dword>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	e000      	b.n	8008a24 <find_volume+0x12c>
 8008a22:	2200      	movs	r2, #0
 8008a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	3358      	adds	r3, #88	@ 0x58
 8008a2a:	443b      	add	r3, r7
 8008a2c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a32:	3301      	adds	r3, #1
 8008a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d9dd      	bls.n	80089f8 <find_volume+0x100>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <find_volume+0x154>
 8008a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	3358      	adds	r3, #88	@ 0x58
 8008a52:	443b      	add	r3, r7
 8008a54:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a58:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <find_volume+0x174>
 8008a60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a64:	f7ff fef2 	bl	800884c <check_fs>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	e000      	b.n	8008a6e <find_volume+0x176>
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d905      	bls.n	8008a86 <find_volume+0x18e>
 8008a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d9e2      	bls.n	8008a4c <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d101      	bne.n	8008a92 <find_volume+0x19a>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e17d      	b.n	8008d8e <find_volume+0x496>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d901      	bls.n	8008a9e <find_volume+0x1a6>
 8008a9a:	230d      	movs	r3, #13
 8008a9c:	e177      	b.n	8008d8e <find_volume+0x496>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	3330      	adds	r3, #48	@ 0x30
 8008aa2:	330b      	adds	r3, #11
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fd0b 	bl	80074c0 <ld_word>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab0:	d001      	beq.n	8008ab6 <find_volume+0x1be>
 8008ab2:	230d      	movs	r3, #13
 8008ab4:	e16b      	b.n	8008d8e <find_volume+0x496>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab8:	3330      	adds	r3, #48	@ 0x30
 8008aba:	3316      	adds	r3, #22
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fcff 	bl	80074c0 <ld_word>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <find_volume+0x1e2>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	3330      	adds	r3, #48	@ 0x30
 8008ad0:	3324      	adds	r3, #36	@ 0x24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fd0d 	bl	80074f2 <ld_dword>
 8008ad8:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ade:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	789b      	ldrb	r3, [r3, #2]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d005      	beq.n	8008afe <find_volume+0x206>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	789b      	ldrb	r3, [r3, #2]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d001      	beq.n	8008afe <find_volume+0x206>
 8008afa:	230d      	movs	r3, #13
 8008afc:	e147      	b.n	8008d8e <find_volume+0x496>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	789b      	ldrb	r3, [r3, #2]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b12:	461a      	mov	r2, r3
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	895b      	ldrh	r3, [r3, #10]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <find_volume+0x23a>
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	895b      	ldrh	r3, [r3, #10]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	895b      	ldrh	r3, [r3, #10]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <find_volume+0x23e>
 8008b32:	230d      	movs	r3, #13
 8008b34:	e12b      	b.n	8008d8e <find_volume+0x496>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	3330      	adds	r3, #48	@ 0x30
 8008b3a:	3311      	adds	r3, #17
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fcbf 	bl	80074c0 <ld_word>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	891b      	ldrh	r3, [r3, #8]
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <find_volume+0x264>
 8008b58:	230d      	movs	r3, #13
 8008b5a:	e118      	b.n	8008d8e <find_volume+0x496>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	3330      	adds	r3, #48	@ 0x30
 8008b60:	3313      	adds	r3, #19
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fcac 	bl	80074c0 <ld_word>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <find_volume+0x288>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b74:	3330      	adds	r3, #48	@ 0x30
 8008b76:	3320      	adds	r3, #32
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fcba 	bl	80074f2 <ld_dword>
 8008b7e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	3330      	adds	r3, #48	@ 0x30
 8008b84:	330e      	adds	r3, #14
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fc9a 	bl	80074c0 <ld_word>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b90:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <find_volume+0x2a2>
 8008b96:	230d      	movs	r3, #13
 8008b98:	e0f9      	b.n	8008d8e <find_volume+0x496>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9e:	4413      	add	r3, r2
 8008ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ba2:	8912      	ldrh	r2, [r2, #8]
 8008ba4:	0912      	lsrs	r2, r2, #4
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	4413      	add	r3, r2
 8008baa:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d203      	bcs.n	8008bbc <find_volume+0x2c4>
 8008bb4:	230d      	movs	r3, #13
 8008bb6:	e0ea      	b.n	8008d8e <find_volume+0x496>
 8008bb8:	200000b0 	.word	0x200000b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008bbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bc4:	8952      	ldrh	r2, [r2, #10]
 8008bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <find_volume+0x2de>
 8008bd2:	230d      	movs	r3, #13
 8008bd4:	e0db      	b.n	8008d8e <find_volume+0x496>
		fmt = FS_FAT32;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d802      	bhi.n	8008bec <find_volume+0x2f4>
 8008be6:	2302      	movs	r3, #2
 8008be8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d802      	bhi.n	8008bfc <find_volume+0x304>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	1c9a      	adds	r2, r3, #2
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c08:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c0a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c0e:	441a      	add	r2, r3
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008c14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	441a      	add	r2, r3
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d11e      	bne.n	8008c64 <find_volume+0x36c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c28:	3330      	adds	r3, #48	@ 0x30
 8008c2a:	332a      	adds	r3, #42	@ 0x2a
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe fc47 	bl	80074c0 <ld_word>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <find_volume+0x344>
 8008c38:	230d      	movs	r3, #13
 8008c3a:	e0a8      	b.n	8008d8e <find_volume+0x496>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	891b      	ldrh	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <find_volume+0x350>
 8008c44:	230d      	movs	r3, #13
 8008c46:	e0a2      	b.n	8008d8e <find_volume+0x496>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	3330      	adds	r3, #48	@ 0x30
 8008c4c:	332c      	adds	r3, #44	@ 0x2c
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fc4f 	bl	80074f2 <ld_dword>
 8008c54:	4602      	mov	r2, r0
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c62:	e01f      	b.n	8008ca4 <find_volume+0x3ac>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	891b      	ldrh	r3, [r3, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <find_volume+0x378>
 8008c6c:	230d      	movs	r3, #13
 8008c6e:	e08e      	b.n	8008d8e <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c76:	441a      	add	r2, r3
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d103      	bne.n	8008c8c <find_volume+0x394>
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	e00a      	b.n	8008ca2 <find_volume+0x3aa>
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	695a      	ldr	r2, [r3, #20]
 8008c90:	4613      	mov	r3, r2
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	4413      	add	r3, r2
 8008c96:	085a      	lsrs	r2, r3, #1
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008ca2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	699a      	ldr	r2, [r3, #24]
 8008ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008caa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008cae:	0a5b      	lsrs	r3, r3, #9
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d201      	bcs.n	8008cb8 <find_volume+0x3c0>
 8008cb4:	230d      	movs	r3, #13
 8008cb6:	e06a      	b.n	8008d8e <find_volume+0x496>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cbe:	611a      	str	r2, [r3, #16]
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	2280      	movs	r2, #128	@ 0x80
 8008ccc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008cce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d149      	bne.n	8008d6a <find_volume+0x472>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	3330      	adds	r3, #48	@ 0x30
 8008cda:	3330      	adds	r3, #48	@ 0x30
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe fbef 	bl	80074c0 <ld_word>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d140      	bne.n	8008d6a <find_volume+0x472>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cea:	3301      	adds	r3, #1
 8008cec:	4619      	mov	r1, r3
 8008cee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cf0:	f7fe fe98 	bl	8007a24 <move_window>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d137      	bne.n	8008d6a <find_volume+0x472>
		{
			fs->fsi_flag = 0;
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d02:	3330      	adds	r3, #48	@ 0x30
 8008d04:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fbd9 	bl	80074c0 <ld_word>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	461a      	mov	r2, r3
 8008d12:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d127      	bne.n	8008d6a <find_volume+0x472>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	3330      	adds	r3, #48	@ 0x30
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fbe7 	bl	80074f2 <ld_dword>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4a1c      	ldr	r2, [pc, #112]	@ (8008d98 <find_volume+0x4a0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d11e      	bne.n	8008d6a <find_volume+0x472>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	3330      	adds	r3, #48	@ 0x30
 8008d30:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe fbdc 	bl	80074f2 <ld_dword>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4a17      	ldr	r2, [pc, #92]	@ (8008d9c <find_volume+0x4a4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d113      	bne.n	8008d6a <find_volume+0x472>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d44:	3330      	adds	r3, #48	@ 0x30
 8008d46:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fbd1 	bl	80074f2 <ld_dword>
 8008d50:	4602      	mov	r2, r0
 8008d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d54:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d58:	3330      	adds	r3, #48	@ 0x30
 8008d5a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fbc7 	bl	80074f2 <ld_dword>
 8008d64:	4602      	mov	r2, r0
 8008d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d68:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008d70:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d72:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <find_volume+0x4a8>)
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	3301      	adds	r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <find_volume+0x4a8>)
 8008d7c:	801a      	strh	r2, [r3, #0]
 8008d7e:	4b08      	ldr	r3, [pc, #32]	@ (8008da0 <find_volume+0x4a8>)
 8008d80:	881a      	ldrh	r2, [r3, #0]
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d88:	f7fe fde4 	bl	8007954 <clear_lock>
#endif
	return FR_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3758      	adds	r7, #88	@ 0x58
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	41615252 	.word	0x41615252
 8008d9c:	61417272 	.word	0x61417272
 8008da0:	200000b4 	.word	0x200000b4

08008da4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008dae:	2309      	movs	r3, #9
 8008db0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01c      	beq.n	8008df2 <validate+0x4e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d018      	beq.n	8008df2 <validate+0x4e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d013      	beq.n	8008df2 <validate+0x4e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	889a      	ldrh	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	88db      	ldrh	r3, [r3, #6]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d10c      	bne.n	8008df2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe face 	bl	8007380 <disk_status>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <validate+0x4e>
			res = FR_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <validate+0x5a>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	e000      	b.n	8008e00 <validate+0x5c>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	6013      	str	r3, [r2, #0]
	return res;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e22:	f107 0310 	add.w	r3, r7, #16
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fccb 	bl	80087c2 <get_ldnumber>
 8008e2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da01      	bge.n	8008e38 <f_mount+0x28>
 8008e34:	230b      	movs	r3, #11
 8008e36:	e02b      	b.n	8008e90 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e38:	4a17      	ldr	r2, [pc, #92]	@ (8008e98 <f_mount+0x88>)
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e48:	69b8      	ldr	r0, [r7, #24]
 8008e4a:	f7fe fd83 	bl	8007954 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	490d      	ldr	r1, [pc, #52]	@ (8008e98 <f_mount+0x88>)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <f_mount+0x66>
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d001      	beq.n	8008e7a <f_mount+0x6a>
 8008e76:	2300      	movs	r3, #0
 8008e78:	e00a      	b.n	8008e90 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e7a:	f107 010c 	add.w	r1, r7, #12
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	2200      	movs	r2, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fd37 	bl	80088f8 <find_volume>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200000b0 	.word	0x200000b0

08008e9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b098      	sub	sp, #96	@ 0x60
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <f_open+0x18>
 8008eb0:	2309      	movs	r3, #9
 8008eb2:	e1a8      	b.n	8009206 <f_open+0x36a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ebc:	79fa      	ldrb	r2, [r7, #7]
 8008ebe:	f107 0110 	add.w	r1, r7, #16
 8008ec2:	f107 0308 	add.w	r3, r7, #8
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fd16 	bl	80088f8 <find_volume>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 818c 	bne.w	80091f4 <f_open+0x358>
		dj.obj.fs = fs;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	f107 0314 	add.w	r3, r7, #20
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fbf9 	bl	80086e0 <follow_path>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d118      	bne.n	8008f2e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008efc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f00:	b25b      	sxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da03      	bge.n	8008f0e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008f06:	2306      	movs	r3, #6
 8008f08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008f0c:	e00f      	b.n	8008f2e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	bf8c      	ite	hi
 8008f14:	2301      	movhi	r3, #1
 8008f16:	2300      	movls	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fbce 	bl	80076c4 <chk_lock>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	f003 031c 	and.w	r3, r3, #28
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d07e      	beq.n	8009036 <f_open+0x19a>
			if (res != FR_OK) {					/* No file, create new */
 8008f38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d017      	beq.n	8008f70 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d10e      	bne.n	8008f66 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f48:	f7fe fc18 	bl	800777c <enq_lock>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d006      	beq.n	8008f60 <f_open+0xc4>
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff fafc 	bl	8008554 <dir_register>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	e000      	b.n	8008f62 <f_open+0xc6>
 8008f60:	2312      	movs	r3, #18
 8008f62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	f043 0308 	orr.w	r3, r3, #8
 8008f6c:	71fb      	strb	r3, [r7, #7]
 8008f6e:	e010      	b.n	8008f92 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f70:	7ebb      	ldrb	r3, [r7, #26]
 8008f72:	f003 0311 	and.w	r3, r3, #17
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <f_open+0xe6>
					res = FR_DENIED;
 8008f7a:	2307      	movs	r3, #7
 8008f7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008f80:	e007      	b.n	8008f92 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <f_open+0xf6>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d167      	bne.n	800906a <f_open+0x1ce>
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d062      	beq.n	800906a <f_open+0x1ce>
				dw = GET_FATTIME();
 8008fa4:	4b9a      	ldr	r3, [pc, #616]	@ (8009210 <f_open+0x374>)
 8008fa6:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	330e      	adds	r3, #14
 8008fac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe fadd 	bl	800756e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb6:	3316      	adds	r3, #22
 8008fb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fad7 	bl	800756e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc2:	330b      	adds	r3, #11
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fa2c 	bl	800842c <ld_clust>
 8008fd4:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fa44 	bl	800846a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fe4:	331c      	adds	r3, #28
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fac0 	bl	800756e <st_dword>
					fs->wflag = 1;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d037      	beq.n	800906a <f_open+0x1ce>
						dw = fs->winsect;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009000:	f107 0314 	add.w	r3, r7, #20
 8009004:	2200      	movs	r2, #0
 8009006:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe ff57 	bl	8007ebc <remove_chain>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009018:	2b00      	cmp	r3, #0
 800901a:	d126      	bne.n	800906a <f_open+0x1ce>
							res = move_window(fs, dw);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fcff 	bl	8007a24 <move_window>
 8009026:	4603      	mov	r3, r0
 8009028:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009030:	3a01      	subs	r2, #1
 8009032:	60da      	str	r2, [r3, #12]
 8009034:	e019      	b.n	800906a <f_open+0x1ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009036:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800903a:	2b00      	cmp	r3, #0
 800903c:	d115      	bne.n	800906a <f_open+0x1ce>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800903e:	7ebb      	ldrb	r3, [r7, #26]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <f_open+0x1b4>
					res = FR_NO_FILE;
 8009048:	2304      	movs	r3, #4
 800904a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800904e:	e00c      	b.n	800906a <f_open+0x1ce>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <f_open+0x1ce>
 800905a:	7ebb      	ldrb	r3, [r7, #26]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <f_open+0x1ce>
						res = FR_DENIED;
 8009064:	2307      	movs	r3, #7
 8009066:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800906a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800906e:	2b00      	cmp	r3, #0
 8009070:	d126      	bne.n	80090c0 <f_open+0x224>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <f_open+0x1e8>
				mode |= FA_MODIFIED;
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009082:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800908c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	2b01      	cmp	r3, #1
 8009096:	bf8c      	ite	hi
 8009098:	2301      	movhi	r3, #1
 800909a:	2300      	movls	r3, #0
 800909c:	b2db      	uxtb	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fb8a 	bl	80077c0 <inc_lock>
 80090ac:	4602      	mov	r2, r0
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <f_open+0x224>
 80090ba:	2302      	movs	r3, #2
 80090bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80090c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 8095 	bne.w	80091f4 <f_open+0x358>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff f9ab 	bl	800842c <ld_clust>
 80090d6:	4602      	mov	r2, r0
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80090dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090de:	331c      	adds	r3, #28
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fa06 	bl	80074f2 <ld_dword>
 80090e6:	4602      	mov	r2, r0
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	88da      	ldrh	r2, [r3, #6]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	79fa      	ldrb	r2, [r7, #7]
 8009104:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3330      	adds	r3, #48	@ 0x30
 800911c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fa70 	bl	8007608 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d060      	beq.n	80091f4 <f_open+0x358>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d05c      	beq.n	80091f4 <f_open+0x358>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	025b      	lsls	r3, r3, #9
 8009148:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	657b      	str	r3, [r7, #84]	@ 0x54
 8009156:	e016      	b.n	8009186 <f_open+0x2ea>
					clst = get_fat(&fp->obj, clst);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fd1c 	bl	8007b9a <get_fat>
 8009162:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009166:	2b01      	cmp	r3, #1
 8009168:	d802      	bhi.n	8009170 <f_open+0x2d4>
 800916a:	2302      	movs	r3, #2
 800916c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009176:	d102      	bne.n	800917e <f_open+0x2e2>
 8009178:	2301      	movs	r3, #1
 800917a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800917e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	657b      	str	r3, [r7, #84]	@ 0x54
 8009186:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <f_open+0x2fa>
 800918e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009192:	429a      	cmp	r2, r3
 8009194:	d8e0      	bhi.n	8009158 <f_open+0x2bc>
				}
				fp->clust = clst;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800919a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800919c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d127      	bne.n	80091f4 <f_open+0x358>
 80091a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d022      	beq.n	80091f4 <f_open+0x358>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fcd2 	bl	8007b5c <clust2sect>
 80091b8:	6478      	str	r0, [r7, #68]	@ 0x44
 80091ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <f_open+0x32c>
						res = FR_INT_ERR;
 80091c0:	2302      	movs	r3, #2
 80091c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80091c6:	e015      	b.n	80091f4 <f_open+0x358>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80091c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ca:	0a5a      	lsrs	r2, r3, #9
 80091cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ce:	441a      	add	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	7858      	ldrb	r0, [r3, #1]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a1a      	ldr	r2, [r3, #32]
 80091e2:	2301      	movs	r3, #1
 80091e4:	f7fe f90e 	bl	8007404 <disk_read>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <f_open+0x358>
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80091f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <f_open+0x366>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009202:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009206:	4618      	mov	r0, r3
 8009208:	3760      	adds	r7, #96	@ 0x60
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	48210000 	.word	0x48210000

08009214 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08c      	sub	sp, #48	@ 0x30
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f107 0210 	add.w	r2, r7, #16
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff fdb5 	bl	8008da4 <validate>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009244:	2b00      	cmp	r3, #0
 8009246:	d107      	bne.n	8009258 <f_write+0x44>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	7d5b      	ldrb	r3, [r3, #21]
 800924c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <f_write+0x4a>
 8009258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800925c:	e14b      	b.n	80094f6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	7d1b      	ldrb	r3, [r3, #20]
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <f_write+0x5a>
 800926a:	2307      	movs	r3, #7
 800926c:	e143      	b.n	80094f6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	699a      	ldr	r2, [r3, #24]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	441a      	add	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	429a      	cmp	r2, r3
 800927c:	f080 812d 	bcs.w	80094da <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	43db      	mvns	r3, r3
 8009286:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009288:	e127      	b.n	80094da <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009292:	2b00      	cmp	r3, #0
 8009294:	f040 80e3 	bne.w	800945e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	0a5b      	lsrs	r3, r3, #9
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	8952      	ldrh	r2, [r2, #10]
 80092a2:	3a01      	subs	r2, #1
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d143      	bne.n	8009336 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10c      	bne.n	80092d0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80092bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d11a      	bne.n	80092f8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fe5d 	bl	8007f86 <create_chain>
 80092cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80092ce:	e013      	b.n	80092f8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d007      	beq.n	80092e8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	4619      	mov	r1, r3
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7fe fee9 	bl	80080b6 <clmt_clust>
 80092e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80092e6:	e007      	b.n	80092f8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7fe fe48 	bl	8007f86 <create_chain>
 80092f6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80092f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80f2 	beq.w	80094e4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	2b01      	cmp	r3, #1
 8009304:	d104      	bne.n	8009310 <f_write+0xfc>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2202      	movs	r2, #2
 800930a:	755a      	strb	r2, [r3, #21]
 800930c:	2302      	movs	r3, #2
 800930e:	e0f2      	b.n	80094f6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009316:	d104      	bne.n	8009322 <f_write+0x10e>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	755a      	strb	r2, [r3, #21]
 800931e:	2301      	movs	r3, #1
 8009320:	e0e9      	b.n	80094f6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009326:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <f_write+0x122>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009334:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	7d1b      	ldrb	r3, [r3, #20]
 800933a:	b25b      	sxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	da18      	bge.n	8009372 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	7858      	ldrb	r0, [r3, #1]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a1a      	ldr	r2, [r3, #32]
 800934e:	2301      	movs	r3, #1
 8009350:	f7fe f878 	bl	8007444 <disk_write>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d004      	beq.n	8009364 <f_write+0x150>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	755a      	strb	r2, [r3, #21]
 8009360:	2301      	movs	r3, #1
 8009362:	e0c8      	b.n	80094f6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	7d1b      	ldrb	r3, [r3, #20]
 8009368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800936c:	b2da      	uxtb	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fe fbee 	bl	8007b5c <clust2sect>
 8009380:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <f_write+0x17e>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2202      	movs	r2, #2
 800938c:	755a      	strb	r2, [r3, #21]
 800938e:	2302      	movs	r3, #2
 8009390:	e0b1      	b.n	80094f6 <f_write+0x2e2>
			sect += csect;
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	4413      	add	r3, r2
 8009398:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	0a5b      	lsrs	r3, r3, #9
 800939e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d03c      	beq.n	8009420 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	4413      	add	r3, r2
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	8952      	ldrh	r2, [r2, #10]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d905      	bls.n	80093c0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	895b      	ldrh	r3, [r3, #10]
 80093b8:	461a      	mov	r2, r3
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	7858      	ldrb	r0, [r3, #1]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	69f9      	ldr	r1, [r7, #28]
 80093ca:	f7fe f83b 	bl	8007444 <disk_write>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d004      	beq.n	80093de <f_write+0x1ca>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2201      	movs	r2, #1
 80093d8:	755a      	strb	r2, [r3, #21]
 80093da:	2301      	movs	r3, #1
 80093dc:	e08b      	b.n	80094f6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a1a      	ldr	r2, [r3, #32]
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	6a3a      	ldr	r2, [r7, #32]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d915      	bls.n	8009418 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6a1a      	ldr	r2, [r3, #32]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	025b      	lsls	r3, r3, #9
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	4413      	add	r3, r2
 8009400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009404:	4619      	mov	r1, r3
 8009406:	f7fe f8de 	bl	80075c6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	7d1b      	ldrb	r3, [r3, #20]
 800940e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009412:	b2da      	uxtb	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	025b      	lsls	r3, r3, #9
 800941c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800941e:	e03f      	b.n	80094a0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	429a      	cmp	r2, r3
 8009428:	d016      	beq.n	8009458 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009432:	429a      	cmp	r2, r3
 8009434:	d210      	bcs.n	8009458 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	7858      	ldrb	r0, [r3, #1]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009440:	2301      	movs	r3, #1
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	f7fd ffde 	bl	8007404 <disk_read>
 8009448:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	755a      	strb	r2, [r3, #21]
 8009454:	2301      	movs	r3, #1
 8009456:	e04e      	b.n	80094f6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009466:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800946a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800946c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d901      	bls.n	8009478 <f_write+0x264>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	4413      	add	r3, r2
 8009488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800948a:	69f9      	ldr	r1, [r7, #28]
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe f89a 	bl	80075c6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	7d1b      	ldrb	r3, [r3, #20]
 8009496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800949a:	b2da      	uxtb	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	4413      	add	r3, r2
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699a      	ldr	r2, [r3, #24]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	441a      	add	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	619a      	str	r2, [r3, #24]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	429a      	cmp	r2, r3
 80094be:	bf38      	it	cc
 80094c0:	461a      	movcc	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	60da      	str	r2, [r3, #12]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	441a      	add	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f47f aed4 	bne.w	800928a <f_write+0x76>
 80094e2:	e000      	b.n	80094e6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7d1b      	ldrb	r3, [r3, #20]
 80094ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3730      	adds	r7, #48	@ 0x30
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f107 0208 	add.w	r2, r7, #8
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fc47 	bl	8008da4 <validate>
 8009516:	4603      	mov	r3, r0
 8009518:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d167      	bne.n	80095f0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7d1b      	ldrb	r3, [r3, #20]
 8009524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d061      	beq.n	80095f0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	b25b      	sxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	da15      	bge.n	8009562 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	7858      	ldrb	r0, [r3, #1]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1a      	ldr	r2, [r3, #32]
 8009544:	2301      	movs	r3, #1
 8009546:	f7fd ff7d 	bl	8007444 <disk_write>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <f_sync+0x54>
 8009550:	2301      	movs	r3, #1
 8009552:	e04e      	b.n	80095f2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7d1b      	ldrb	r3, [r3, #20]
 8009558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009562:	4b26      	ldr	r3, [pc, #152]	@ (80095fc <f_sync+0xfc>)
 8009564:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fe fa58 	bl	8007a24 <move_window>
 8009574:	4603      	mov	r3, r0
 8009576:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d138      	bne.n	80095f0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	330b      	adds	r3, #11
 8009588:	781a      	ldrb	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	330b      	adds	r3, #11
 800958e:	f042 0220 	orr.w	r2, r2, #32
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	461a      	mov	r2, r3
 80095a0:	68f9      	ldr	r1, [r7, #12]
 80095a2:	f7fe ff62 	bl	800846a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f103 021c 	add.w	r2, r3, #28
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7fd ffdb 	bl	800756e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3316      	adds	r3, #22
 80095bc:	6939      	ldr	r1, [r7, #16]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fd ffd5 	bl	800756e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3312      	adds	r3, #18
 80095c8:	2100      	movs	r1, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd ffb4 	bl	8007538 <st_word>
					fs->wflag = 1;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2201      	movs	r2, #1
 80095d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe fa51 	bl	8007a80 <sync_fs>
 80095de:	4603      	mov	r3, r0
 80095e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7d1b      	ldrb	r3, [r3, #20]
 80095e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	48210000 	.word	0x48210000

08009600 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff79 	bl	8009500 <f_sync>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d118      	bne.n	800964a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f107 0208 	add.w	r2, r7, #8
 800961e:	4611      	mov	r1, r2
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff fbbf 	bl	8008da4 <validate>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10c      	bne.n	800964a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe f951 	bl	80078dc <dec_lock>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800964a:	7bfb      	ldrb	r3, [r7, #15]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009662:	2301      	movs	r3, #1
 8009664:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800966a:	4b1f      	ldr	r3, [pc, #124]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 800966c:	7a5b      	ldrb	r3, [r3, #9]
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d131      	bne.n	80096d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009674:	4b1c      	ldr	r3, [pc, #112]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 8009676:	7a5b      	ldrb	r3, [r3, #9]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	4b1a      	ldr	r3, [pc, #104]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 800967e:	2100      	movs	r1, #0
 8009680:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009682:	4b19      	ldr	r3, [pc, #100]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 8009684:	7a5b      	ldrb	r3, [r3, #9]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	4a17      	ldr	r2, [pc, #92]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009692:	4b15      	ldr	r3, [pc, #84]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 8009694:	7a5b      	ldrb	r3, [r3, #9]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 800969c:	4413      	add	r3, r2
 800969e:	79fa      	ldrb	r2, [r7, #7]
 80096a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80096a2:	4b11      	ldr	r3, [pc, #68]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 80096a4:	7a5b      	ldrb	r3, [r3, #9]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	b2d1      	uxtb	r1, r2
 80096ac:	4a0e      	ldr	r2, [pc, #56]	@ (80096e8 <FATFS_LinkDriverEx+0x94>)
 80096ae:	7251      	strb	r1, [r2, #9]
 80096b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80096b2:	7dbb      	ldrb	r3, [r7, #22]
 80096b4:	3330      	adds	r3, #48	@ 0x30
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	3301      	adds	r3, #1
 80096c0:	223a      	movs	r2, #58	@ 0x3a
 80096c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	3302      	adds	r3, #2
 80096c8:	222f      	movs	r2, #47	@ 0x2f
 80096ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3303      	adds	r3, #3
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	200000d8 	.word	0x200000d8

080096ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096f6:	2200      	movs	r2, #0
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff ffaa 	bl	8009654 <FATFS_LinkDriverEx>
 8009700:	4603      	mov	r3, r0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <memset>:
 800970a:	4402      	add	r2, r0
 800970c:	4603      	mov	r3, r0
 800970e:	4293      	cmp	r3, r2
 8009710:	d100      	bne.n	8009714 <memset+0xa>
 8009712:	4770      	bx	lr
 8009714:	f803 1b01 	strb.w	r1, [r3], #1
 8009718:	e7f9      	b.n	800970e <memset+0x4>
	...

0800971c <__libc_init_array>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	4d0d      	ldr	r5, [pc, #52]	@ (8009754 <__libc_init_array+0x38>)
 8009720:	2600      	movs	r6, #0
 8009722:	4c0d      	ldr	r4, [pc, #52]	@ (8009758 <__libc_init_array+0x3c>)
 8009724:	1b64      	subs	r4, r4, r5
 8009726:	10a4      	asrs	r4, r4, #2
 8009728:	42a6      	cmp	r6, r4
 800972a:	d109      	bne.n	8009740 <__libc_init_array+0x24>
 800972c:	4d0b      	ldr	r5, [pc, #44]	@ (800975c <__libc_init_array+0x40>)
 800972e:	2600      	movs	r6, #0
 8009730:	4c0b      	ldr	r4, [pc, #44]	@ (8009760 <__libc_init_array+0x44>)
 8009732:	f000 f817 	bl	8009764 <_init>
 8009736:	1b64      	subs	r4, r4, r5
 8009738:	10a4      	asrs	r4, r4, #2
 800973a:	42a6      	cmp	r6, r4
 800973c:	d105      	bne.n	800974a <__libc_init_array+0x2e>
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	f855 3b04 	ldr.w	r3, [r5], #4
 8009744:	3601      	adds	r6, #1
 8009746:	4798      	blx	r3
 8009748:	e7ee      	b.n	8009728 <__libc_init_array+0xc>
 800974a:	f855 3b04 	ldr.w	r3, [r5], #4
 800974e:	3601      	adds	r6, #1
 8009750:	4798      	blx	r3
 8009752:	e7f2      	b.n	800973a <__libc_init_array+0x1e>
 8009754:	08009958 	.word	0x08009958
 8009758:	08009958 	.word	0x08009958
 800975c:	08009958 	.word	0x08009958
 8009760:	0800995c 	.word	0x0800995c

08009764 <_init>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	bf00      	nop
 8009768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976a:	bc08      	pop	{r3}
 800976c:	469e      	mov	lr, r3
 800976e:	4770      	bx	lr

08009770 <_fini>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	bf00      	nop
 8009774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009776:	bc08      	pop	{r3}
 8009778:	469e      	mov	lr, r3
 800977a:	4770      	bx	lr
