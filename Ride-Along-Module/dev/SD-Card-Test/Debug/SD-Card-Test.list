
SD-Card-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000d  20000000  080097d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  20000010  080097e1  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000e4  080097e1  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fa29  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000222b  00000000  00000000  0002fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e68  00000000  00000000  00031c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000d50  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002cfa3  00000000  00000000  00033850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000107e2  00000000  00000000  000607f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011762e  00000000  00000000  00070fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00188603  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003aa4  00000000  00000000  00188654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	080095e0 	.word	0x080095e0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	080095e0 	.word	0x080095e0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800028e:	2300      	movs	r3, #0
 8000290:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8000292:	f000 f86b 	bl	800036c <BSP_SD_IsDetected>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	d001      	beq.n	80002a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800029c:	2302      	movs	r3, #2
 800029e:	e005      	b.n	80002ac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <BSP_SD_Init+0x2c>)
 80002a2:	f004 fe29 	bl	8004ef8 <HAL_SD_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
    //{
    //  sd_state = MSD_ERROR;
    //}
  }

  return sd_state;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000002c 	.word	0x2000002c

080002b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint8_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80002c6:	2300      	movs	r3, #0
 80002c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	68f9      	ldr	r1, [r7, #12]
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <BSP_SD_ReadBlocks+0x38>)
 80002d6:	f004 ff2f 	bl	8005138 <HAL_SD_ReadBlocks>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80002e0:	2301      	movs	r3, #1
 80002e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint8_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af02      	add	r7, sp, #8
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
 8000300:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000302:	2300      	movs	r3, #0
 8000304:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	68f9      	ldr	r1, [r7, #12]
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <BSP_SD_WriteBlocks+0x38>)
 8000312:	f005 f89b 	bl	800544c <HAL_SD_WriteBlocks>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800031c:	2301      	movs	r3, #1
 800031e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8000320:	7dfb      	ldrb	r3, [r7, #23]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000002c 	.word	0x2000002c

08000330 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <BSP_SD_GetCardState+0x1c>)
 8000336:	f005 fdb7 	bl	8005ea8 <HAL_SD_GetCardState>
 800033a:	4603      	mov	r3, r0
 800033c:	2b04      	cmp	r3, #4
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
}
 8000346:	4618      	mov	r0, r3
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c

08000350 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	4803      	ldr	r0, [pc, #12]	; (8000368 <BSP_SD_GetCardInfo+0x18>)
 800035c:	f005 fc66 	bl	8005c2c <HAL_SD_GetCardInfo>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	2000002c 	.word	0x2000002c

0800036c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000372:	2301      	movs	r3, #1
 8000374:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	b2db      	uxtb	r3, r3
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 fb28 	bl	80009e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <main+0xf0>)
 8000396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800039a:	4a37      	ldr	r2, [pc, #220]	; (8000478 <main+0xf0>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <main+0xf0>)
 80003a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003aa:	f003 0204 	and.w	r2, r3, #4
 80003ae:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80003b2:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80003bc:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80003c0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f865 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f8d3 	bl	8000570 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80003ca:	f000 f8af 	bl	800052c <MX_SDMMC1_SD_Init>

	UINT bytesWritten;


  // Link driver
  if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80003ce:	492b      	ldr	r1, [pc, #172]	; (800047c <main+0xf4>)
 80003d0:	482b      	ldr	r0, [pc, #172]	; (8000480 <main+0xf8>)
 80003d2:	f009 f8c9 	bl	8009568 <FATFS_LinkDriver>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14b      	bne.n	8000474 <main+0xec>
  {
		char label[12];
		DWORD serialNumber;
		fileResult = f_mount(&SDFatFs, SDPath, 1);
 80003dc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80003e0:	2201      	movs	r2, #1
 80003e2:	4926      	ldr	r1, [pc, #152]	; (800047c <main+0xf4>)
 80003e4:	4618      	mov	r0, r3
 80003e6:	f008 fc4d 	bl	8008c84 <f_mount>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f887 367f 	strb.w	r3, [r7, #1663]	; 0x67f
		if (fileResult != FR_OK)
 80003f0:	f897 367f 	ldrb.w	r3, [r7, #1663]	; 0x67f
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <main+0x74>
		{
			Error_Handler();
 80003f8:	f000 f8e4 	bl	80005c4 <Error_Handler>
		}

		FIL file;
		fileResult = f_open(&file, "0:hello2.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	220a      	movs	r2, #10
 8000400:	4920      	ldr	r1, [pc, #128]	; (8000484 <main+0xfc>)
 8000402:	4618      	mov	r0, r3
 8000404:	f008 fc84 	bl	8008d10 <f_open>
 8000408:	4603      	mov	r3, r0
 800040a:	f887 367f 	strb.w	r3, [r7, #1663]	; 0x67f
		if (fileResult != FR_OK)
 800040e:	f897 367f 	ldrb.w	r3, [r7, #1663]	; 0x67f
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <main+0x92>
		{
			Error_Handler();
 8000416:	f000 f8d5 	bl	80005c4 <Error_Handler>
		}

		const char* fileContents = "Hello, Aidan!\n";
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <main+0x100>)
 800041c:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
		fileResult = f_write(&file, fileContents, strlen(fileContents), &bytesWritten);
 8000420:	f8d7 0678 	ldr.w	r0, [r7, #1656]	; 0x678
 8000424:	f7ff ff28 	bl	8000278 <strlen>
 8000428:	4602      	mov	r2, r0
 800042a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800042e:	1d38      	adds	r0, r7, #4
 8000430:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8000434:	f008 fe2c 	bl	8009090 <f_write>
 8000438:	4603      	mov	r3, r0
 800043a:	f887 367f 	strb.w	r3, [r7, #1663]	; 0x67f
		if (fileResult != FR_OK || bytesWritten != strlen(fileContents))
 800043e:	f897 367f 	ldrb.w	r3, [r7, #1663]	; 0x67f
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10b      	bne.n	800045e <main+0xd6>
 8000446:	f8d7 0678 	ldr.w	r0, [r7, #1656]	; 0x678
 800044a:	f7ff ff15 	bl	8000278 <strlen>
 800044e:	4602      	mov	r2, r0
 8000450:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8000454:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	429a      	cmp	r2, r3
 800045c:	d001      	beq.n	8000462 <main+0xda>
		{
			Error_Handler();
 800045e:	f000 f8b1 	bl	80005c4 <Error_Handler>
		}

		f_close(&file);
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f009 f809 	bl	800947c <f_close>
		f_mount(NULL, "", 1);
 800046a:	2201      	movs	r2, #1
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <main+0x104>)
 800046e:	2000      	movs	r0, #0
 8000470:	f008 fc08 	bl	8008c84 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000474:	e7fe      	b.n	8000474 <main+0xec>
 8000476:	bf00      	nop
 8000478:	46020c00 	.word	0x46020c00
 800047c:	200000a8 	.word	0x200000a8
 8000480:	08009660 	.word	0x08009660
 8000484:	080095f8 	.word	0x080095f8
 8000488:	08009608 	.word	0x08009608
 800048c:	08009618 	.word	0x08009618

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b09e      	sub	sp, #120	; 0x78
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	2260      	movs	r2, #96	; 0x60
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f009 f896 	bl	80095d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80004b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80004b8:	f000 fdf8 	bl	80010ac <HAL_PWREx_ControlVoltageScaling>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80004c2:	f000 f87f 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80004c6:	2330      	movs	r3, #48	; 0x30
 80004c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004d4:	2310      	movs	r3, #16
 80004d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80004d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004de:	2300      	movs	r3, #0
 80004e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	f107 0318 	add.w	r3, r7, #24
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fe6c 	bl	80011c4 <HAL_RCC_OscConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f2:	f000 f867 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	231f      	movs	r3, #31
 80004f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fd32 	bl	8001f7c <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800051e:	f000 f851 	bl	80005c4 <Error_Handler>
  }
}
 8000522:	bf00      	nop
 8000524:	3778      	adds	r7, #120	; 0x78
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <MX_SDMMC1_SD_Init+0x40>)
 8000534:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 59;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 8000550:	223b      	movs	r2, #59	; 0x3b
 8000552:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_SDMMC1_SD_Init+0x3c>)
 8000556:	f004 fccf 	bl	8004ef8 <HAL_SD_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000560:	f000 f830 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000002c 	.word	0x2000002c
 800056c:	420c8000 	.word	0x420c8000

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0x50>)
 8000578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_GPIO_Init+0x50>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x50>)
 8000588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_GPIO_Init+0x50>)
 8000596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <MX_GPIO_Init+0x50>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_GPIO_Init+0x50>)
 80005a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	46020c00 	.word	0x46020c00

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SD_CheckStatus+0x38>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80005e0:	f7ff fea6 	bl	8000330 <BSP_SD_GetCardState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d107      	bne.n	80005fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <SD_CheckStatus+0x38>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f023 0301 	bic.w	r3, r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <SD_CheckStatus+0x38>)
 80005f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80005fa:	4b03      	ldr	r3, [pc, #12]	; (8000608 <SD_CheckStatus+0x38>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000000 	.word	0x20000000

0800060c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <SD_initialize+0x38>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800061c:	f7ff fe34 	bl	8000288 <BSP_SD_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffd1 	bl	80005d0 <SD_CheckStatus>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <SD_initialize+0x38>)
 8000634:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8000636:	4b03      	ldr	r3, [pc, #12]	; (8000644 <SD_initialize+0x38>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000

08000648 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffbb 	bl	80005d0 <SD_CheckStatus>
 800065a:	4603      	mov	r3, r0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint8_t*)buff,
 8000678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	68b8      	ldr	r0, [r7, #8]
 8000682:	f7ff fe19 	bl	80002b8 <BSP_SD_ReadBlocks>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d107      	bne.n	800069c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800068c:	bf00      	nop
 800068e:	f7ff fe4f 	bl	8000330 <BSP_SD_GetCardState>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1fa      	bne.n	800068e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800069c:	7dfb      	ldrb	r3, [r7, #23]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint8_t*)buff,
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	68b8      	ldr	r0, [r7, #8]
 80006c4:	f7ff fe16 	bl	80002f4 <BSP_SD_WriteBlocks>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d107      	bne.n	80006de <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80006ce:	bf00      	nop
 80006d0:	f7ff fe2e 	bl	8000330 <BSP_SD_GetCardState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1fa      	bne.n	80006d0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80006de:	7dfb      	ldrb	r3, [r7, #23]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	603a      	str	r2, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	460b      	mov	r3, r1
 80006f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SD_ioctl+0xac>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SD_ioctl+0x28>
 800070c:	2303      	movs	r3, #3
 800070e:	e03c      	b.n	800078a <SD_ioctl+0xa2>

  switch (cmd)
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d834      	bhi.n	8000780 <SD_ioctl+0x98>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <SD_ioctl+0x34>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	0800072d 	.word	0x0800072d
 8000720:	08000735 	.word	0x08000735
 8000724:	0800074d 	.word	0x0800074d
 8000728:	08000767 	.word	0x08000767
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8000732:	e028      	b.n	8000786 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fe09 	bl	8000350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800073e:	6a3a      	ldr	r2, [r7, #32]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800074a:	e01c      	b.n	8000786 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fdfd 	bl	8000350 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	b29a      	uxth	r2, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8000764:	e00f      	b.n	8000786 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fdf0 	bl	8000350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	0a5a      	lsrs	r2, r3, #9
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800077e:	e002      	b.n	8000786 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8000780:	2304      	movs	r3, #4
 8000782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8000786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800078a:	4618      	mov	r0, r3
 800078c:	3730      	adds	r7, #48	; 0x30
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0bc      	sub	sp, #240	; 0xf0
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	22c0      	movs	r2, #192	; 0xc0
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 ff01 	bl	80095d0 <memset>
  if(hsd->Instance==SDMMC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a3a      	ldr	r2, [pc, #232]	; (80008bc <HAL_SD_MspInit+0x114>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d16d      	bne.n	80008b4 <HAL_SD_MspInit+0x10c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CLK48;
 80007d8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_CLK48;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 ff97 	bl	8002728 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_SD_MspInit+0x5c>
    {
      Error_Handler();
 8000800:	f7ff fee0 	bl	80005c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800080a:	4a2d      	ldr	r2, [pc, #180]	; (80008c0 <HAL_SD_MspInit+0x118>)
 800080c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000810:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800081a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <HAL_SD_MspInit+0x118>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_SD_MspInit+0x118>)
 8000852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800085e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000878:	230c      	movs	r3, #12
 800087a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000882:	4619      	mov	r1, r3
 8000884:	480f      	ldr	r0, [pc, #60]	; (80008c4 <HAL_SD_MspInit+0x11c>)
 8000886:	f000 fa39 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800088a:	2304      	movs	r3, #4
 800088c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008a2:	230c      	movs	r3, #12
 80008a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <HAL_SD_MspInit+0x120>)
 80008b0:	f000 fa24 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	37f0      	adds	r7, #240	; 0xf0
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	420c8000 	.word	0x420c8000
 80008c0:	46020c00 	.word	0x46020c00
 80008c4:	42020800 	.word	0x42020800
 80008c8:	42020c00 	.word	0x42020c00

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f8c8 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <SystemInit+0x68>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <SystemInit+0x68>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <SystemInit+0x6c>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <SystemInit+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x6c>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <SystemInit+0x6c>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <SystemInit+0x6c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <SystemInit+0x6c>)
 8000952:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000956:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800095a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SystemInit+0x6c>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SystemInit+0x6c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a09      	ldr	r2, [pc, #36]	; (800098c <SystemInit+0x6c>)
 8000968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800096c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <SystemInit+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SystemInit+0x68>)
 8000976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097a:	609a      	str	r2, [r3, #8]
  #endif
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	46020c00 	.word	0x46020c00

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000994:	f7ff ffc4 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009be:	f008 fde3 	bl	8009588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fce1 	bl	8000388 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000000d 	.word	0x2000000d
  ldr r2, =_sidata
 80009d4:	080097d4 	.word	0x080097d4
  ldr r2, =_sbss
 80009d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009dc:	200000e4 	.word	0x200000e4

080009e0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_Init+0x4c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_Init+0x4c>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f94f 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80009fa:	f001 fcb1 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 80009fe:	4602      	mov	r2, r0
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_Init+0x50>)
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	f003 030f 	and.w	r3, r3, #15
 8000a08:	490b      	ldr	r1, [pc, #44]	; (8000a38 <HAL_Init+0x54>)
 8000a0a:	5ccb      	ldrb	r3, [r1, r3]
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_Init+0x58>)
 8000a12:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a14:	200f      	movs	r0, #15
 8000a16:	f000 f813 	bl	8000a40 <HAL_InitTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff feb8 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000
 8000a34:	46020c00 	.word	0x46020c00
 8000a38:	08009674 	.word	0x08009674
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_InitTick+0x60>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e021      	b.n	8000a98 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_InitTick+0x64>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_InitTick+0x60>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f939 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	f000 f911 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x68>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000000c 	.word	0x2000000c
 8000aa4:	20000004 	.word	0x20000004
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	200000ac 	.word	0x200000ac

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000ac 	.word	0x200000ac

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000000c 	.word	0x2000000c

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff5e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffb2 	bl	8000c54 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d0e:	e1ba      	b.n	8001086 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 81aa 	beq.w	8001080 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a55      	ldr	r2, [pc, #340]	; (8000e84 <HAL_GPIO_Init+0x188>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d15d      	bne.n	8000df0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000d64:	4a48      	ldr	r2, [pc, #288]	; (8000e88 <HAL_GPIO_Init+0x18c>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d6c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000d6e:	4a46      	ldr	r2, [pc, #280]	; (8000e88 <HAL_GPIO_Init+0x18c>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	3208      	adds	r2, #8
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220b      	movs	r2, #11
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	3208      	adds	r2, #8
 8000dba:	69f9      	ldr	r1, [r7, #28]
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e067      	b.n	8000ec0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x104>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b12      	cmp	r3, #18
 8000dfe:	d145      	bne.n	8000e8c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	f003 020f 	and.w	r2, r3, #15
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	69f9      	ldr	r1, [r7, #28]
 8000e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0203 	and.w	r2, r3, #3
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e01e      	b.n	8000ec0 <HAL_GPIO_Init+0x1c4>
 8000e82:	bf00      	nop
 8000e84:	46020000 	.word	0x46020000
 8000e88:	080096cc 	.word	0x080096cc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	2b11      	cmp	r3, #17
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b12      	cmp	r3, #18
 8000ede:	d130      	bne.n	8000f42 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000f16:	2201      	movs	r2, #1
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	f003 0201 	and.w	r2, r3, #1
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d07c      	beq.n	8001080 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f86:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0a9a      	lsrs	r2, r3, #10
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_GPIO_Init+0x3ac>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	f002 0203 	and.w	r2, r2, #3
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	4093      	lsls	r3, r2
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000fc2:	4938      	ldr	r1, [pc, #224]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3318      	adds	r3, #24
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000fd0:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000ff4:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	4013      	ands	r3, r2
 8001008:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8001026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800102a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	4013      	ands	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001058:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	4013      	ands	r3, r2
 8001062:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	f47f ae3d 	bne.w	8000d10 <HAL_GPIO_Init+0x14>
  }
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3724      	adds	r7, #36	; 0x24
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	46022000 	.word	0x46022000
 80010a8:	002f7f7f 	.word	0x002f7f7f

080010ac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80010b4:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d10b      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d905      	bls.n	80010da <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e057      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d90a      	bls.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	4a2a      	ldr	r2, [pc, #168]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	60d3      	str	r3, [r2, #12]
 80010fa:	e007      	b.n	800110c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001104:	4925      	ldr	r1, [pc, #148]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	099b      	lsrs	r3, r3, #6
 8001118:	2232      	movs	r2, #50	; 0x32
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800112a:	e002      	b.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3b01      	subs	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x98>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f3      	bne.n	800112c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01b      	beq.n	8001182 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	099b      	lsrs	r3, r3, #6
 8001156:	2232      	movs	r2, #50	; 0x32
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	099b      	lsrs	r3, r3, #6
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001168:	e002      	b.n	8001170 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f3      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e000      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	46020800 	.word	0x46020800
 80011a0:	20000004 	.word	0x20000004
 80011a4:	10624dd3 	.word	0x10624dd3

080011a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	46020800 	.word	0x46020800

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	f000 bec8 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4b99      	ldr	r3, [pc, #612]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e8:	4b96      	ldr	r3, [pc, #600]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 816c 	beq.w	80014d8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_RCC_OscConfig+0x52>
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	2b0c      	cmp	r3, #12
 800120a:	f040 80de 	bne.w	80013ca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	2b01      	cmp	r3, #1
 8001212:	f040 80da 	bne.w	80013ca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f000 bea5 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001228:	4b86      	ldr	r3, [pc, #536]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_RCC_OscConfig+0x7a>
 8001234:	4b83      	ldr	r3, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800123c:	e005      	b.n	800124a <HAL_RCC_OscConfig+0x86>
 800123e:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001244:	041b      	lsls	r3, r3, #16
 8001246:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800124a:	4293      	cmp	r3, r2
 800124c:	d255      	bcs.n	80012fa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10a      	bne.n	800126a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	4618      	mov	r0, r3
 800125a:	f001 f9df 	bl	800261c <RCC_SetFlashLatencyFromMSIRange>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	f000 be82 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	4a75      	ldr	r2, [pc, #468]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001274:	6093      	str	r3, [r2, #8]
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	4970      	ldr	r1, [pc, #448]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001284:	4313      	orrs	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001290:	d309      	bcc.n	80012a6 <HAL_RCC_OscConfig+0xe2>
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f023 021f 	bic.w	r2, r3, #31
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4969      	ldr	r1, [pc, #420]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
 80012a4:	e07e      	b.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da0a      	bge.n	80012c4 <HAL_RCC_OscConfig+0x100>
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	4961      	ldr	r1, [pc, #388]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	60cb      	str	r3, [r1, #12]
 80012c2:	e06f      	b.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012cc:	d30a      	bcc.n	80012e4 <HAL_RCC_OscConfig+0x120>
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	029b      	lsls	r3, r3, #10
 80012dc:	4959      	ldr	r1, [pc, #356]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	60cb      	str	r3, [r1, #12]
 80012e2:	e05f      	b.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
 80012e4:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	03db      	lsls	r3, r3, #15
 80012f2:	4954      	ldr	r1, [pc, #336]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
 80012f8:	e054      	b.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80012fa:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001300:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001304:	6093      	str	r3, [r2, #8]
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	494c      	ldr	r1, [pc, #304]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001320:	d309      	bcc.n	8001336 <HAL_RCC_OscConfig+0x172>
 8001322:	4b48      	ldr	r3, [pc, #288]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f023 021f 	bic.w	r2, r3, #31
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4945      	ldr	r1, [pc, #276]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001330:	4313      	orrs	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
 8001334:	e028      	b.n	8001388 <HAL_RCC_OscConfig+0x1c4>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	2b00      	cmp	r3, #0
 800133c:	da0a      	bge.n	8001354 <HAL_RCC_OscConfig+0x190>
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	015b      	lsls	r3, r3, #5
 800134c:	493d      	ldr	r1, [pc, #244]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800134e:	4313      	orrs	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
 8001352:	e019      	b.n	8001388 <HAL_RCC_OscConfig+0x1c4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d30a      	bcc.n	8001374 <HAL_RCC_OscConfig+0x1b0>
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4935      	ldr	r1, [pc, #212]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800136e:	4313      	orrs	r3, r2
 8001370:	60cb      	str	r3, [r1, #12]
 8001372:	e009      	b.n	8001388 <HAL_RCC_OscConfig+0x1c4>
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	03db      	lsls	r3, r3, #15
 8001382:	4930      	ldr	r1, [pc, #192]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f942 	bl	800261c <RCC_SetFlashLatencyFromMSIRange>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	f000 bde5 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80013a4:	f001 f8e4 	bl	8002570 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_RCC_OscConfig+0x284>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb47 	bl	8000a40 <HAL_InitTick>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80013b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 808a 	beq.w	80014d6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80013c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c6:	f000 bdd2 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d066      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80013de:	f7ff fb79 	bl	8000ad4 <HAL_GetTick>
 80013e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80013e4:	e009      	b.n	80013fa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb75 	bl	8000ad4 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d902      	bls.n	80013fa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f000 bdba 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ef      	beq.n	80013e6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800140c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001410:	6093      	str	r3, [r2, #8]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	4909      	ldr	r1, [pc, #36]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800142c:	d30e      	bcc.n	800144c <HAL_RCC_OscConfig+0x288>
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f023 021f 	bic.w	r2, r3, #31
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4902      	ldr	r1, [pc, #8]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800143c:	4313      	orrs	r3, r2
 800143e:	60cb      	str	r3, [r1, #12]
 8001440:	e04a      	b.n	80014d8 <HAL_RCC_OscConfig+0x314>
 8001442:	bf00      	nop
 8001444:	46020c00 	.word	0x46020c00
 8001448:	20000008 	.word	0x20000008
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	da0a      	bge.n	800146a <HAL_RCC_OscConfig+0x2a6>
 8001454:	4b98      	ldr	r3, [pc, #608]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	015b      	lsls	r3, r3, #5
 8001462:	4995      	ldr	r1, [pc, #596]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e036      	b.n	80014d8 <HAL_RCC_OscConfig+0x314>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001472:	d30a      	bcc.n	800148a <HAL_RCC_OscConfig+0x2c6>
 8001474:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	029b      	lsls	r3, r3, #10
 8001482:	498d      	ldr	r1, [pc, #564]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
 8001488:	e026      	b.n	80014d8 <HAL_RCC_OscConfig+0x314>
 800148a:	4b8b      	ldr	r3, [pc, #556]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	03db      	lsls	r3, r3, #15
 8001498:	4987      	ldr	r1, [pc, #540]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	60cb      	str	r3, [r1, #12]
 800149e:	e01b      	b.n	80014d8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80014a0:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a84      	ldr	r2, [pc, #528]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80014ac:	f7ff fb12 	bl	8000ad4 <HAL_GetTick>
 80014b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80014b2:	e009      	b.n	80014c8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b4:	f7ff fb0e 	bl	8000ad4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d902      	bls.n	80014c8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f000 bd53 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80014c8:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ef      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
 80014d4:	e000      	b.n	80014d8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 808b 	beq.w	80015fc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x334>
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d17d      	bne.n	80015fc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	f000 bd34 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x35a>
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a68      	ldr	r2, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e041      	b.n	80015a2 <HAL_RCC_OscConfig+0x3de>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x38a>
 8001528:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a62      	ldr	r2, [pc, #392]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a5c      	ldr	r2, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e029      	b.n	80015a2 <HAL_RCC_OscConfig+0x3de>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001556:	d112      	bne.n	800157e <HAL_RCC_OscConfig+0x3ba>
 8001558:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a56      	ldr	r2, [pc, #344]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a53      	ldr	r2, [pc, #332]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e011      	b.n	80015a2 <HAL_RCC_OscConfig+0x3de>
 800157e:	4b4e      	ldr	r3, [pc, #312]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d014      	beq.n	80015d4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa93 	bl	8000ad4 <HAL_GetTick>
 80015ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b0:	e009      	b.n	80015c6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fa8f 	bl	8000ad4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d902      	bls.n	80015c6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f000 bcd4 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0ef      	beq.n	80015b2 <HAL_RCC_OscConfig+0x3ee>
 80015d2:	e013      	b.n	80015fc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80015d4:	f7ff fa7e 	bl	8000ad4 <HAL_GetTick>
 80015d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015da:	e009      	b.n	80015f0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fa7a 	bl	8000ad4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d902      	bls.n	80015f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f000 bcbf 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ef      	bne.n	80015dc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05f      	beq.n	80016c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	2b04      	cmp	r3, #4
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x456>
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	2b0c      	cmp	r3, #12
 8001612:	d114      	bne.n	800163e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	2b02      	cmp	r3, #2
 8001618:	d111      	bne.n	800163e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 bca3 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	4920      	ldr	r1, [pc, #128]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800163c:	e044      	b.n	80016c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d024      	beq.n	8001690 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001652:	f7ff fa3f 	bl	8000ad4 <HAL_GetTick>
 8001656:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	e009      	b.n	800166e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fa3b 	bl	8000ad4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d902      	bls.n	800166e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	f000 bc80 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ef      	beq.n	800165a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	490b      	ldr	r1, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	610b      	str	r3, [r1, #16]
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800169c:	f7ff fa1a 	bl	8000ad4 <HAL_GetTick>
 80016a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fa16 	bl	8000ad4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d904      	bls.n	80016bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f000 bc5b 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
 80016b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016bc:	4baf      	ldr	r3, [pc, #700]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ed      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80c8 	beq.w	8001866 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016dc:	4ba7      	ldr	r3, [pc, #668]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d111      	bne.n	800170e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4ba4      	ldr	r3, [pc, #656]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f0:	4aa2      	ldr	r2, [pc, #648]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80016fa:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001708:	2301      	movs	r3, #1
 800170a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800170e:	4b9c      	ldr	r3, [pc, #624]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d119      	bne.n	800174e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800171a:	4b99      	ldr	r3, [pc, #612]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff f9d5 	bl	8000ad4 <HAL_GetTick>
 800172a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800172c:	e009      	b.n	8001742 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff f9d1 	bl	8000ad4 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d902      	bls.n	8001742 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	f000 bc16 	b.w	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001742:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ef      	beq.n	800172e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d05f      	beq.n	8001816 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800175c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	429a      	cmp	r2, r3
 800176a:	d037      	beq.n	80017dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e3f4      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800178e:	4b7b      	ldr	r3, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001794:	4a79      	ldr	r2, [pc, #484]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001796:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800179a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800179e:	f7ff f999 	bl	8000ad4 <HAL_GetTick>
 80017a2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff f995 	bl	8000ad4 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e3da      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017b8:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80017ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ef      	bne.n	80017a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80017c6:	4b6d      	ldr	r3, [pc, #436]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80017c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4969      	ldr	r1, [pc, #420]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80017dc:	4b67      	ldr	r3, [pc, #412]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80017de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017e2:	4a66      	ldr	r2, [pc, #408]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 80017e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80017ec:	f7ff f972 	bl	8000ad4 <HAL_GetTick>
 80017f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f96e 	bl	8000ad4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e3b3      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800180c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x630>
 8001814:	e01b      	b.n	800184e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001816:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800181e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001822:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001826:	f7ff f955 	bl	8000ad4 <HAL_GetTick>
 800182a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff f951 	bl	8000ad4 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b05      	cmp	r3, #5
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e396      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001840:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800184e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185c:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8111 	beq.w	8001a96 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188e:	4a3b      	ldr	r2, [pc, #236]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d118      	bne.n	80018ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	4a30      	ldr	r2, [pc, #192]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c4:	f7ff f906 	bl	8000ad4 <HAL_GetTick>
 80018c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018cc:	f7ff f902 	bl	8000ad4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e347      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_OscConfig+0x7bc>)
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01f      	beq.n	8001936 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001922:	e018      	b.n	8001956 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001934:	e00f      	b.n	8001956 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 8001948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x7b8>)
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d057      	beq.n	8001a0e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800195e:	f7ff f8b9 	bl	8000ad4 <HAL_GetTick>
 8001962:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001964:	e00e      	b.n	8001984 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff f8b5 	bl	8000ad4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d905      	bls.n	8001984 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e2f8      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
 800197c:	46020c00 	.word	0x46020c00
 8001980:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001984:	4b9c      	ldr	r3, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0e9      	beq.n	8001966 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800199e:	4b96      	ldr	r3, [pc, #600]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 80019a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a4:	4a94      	ldr	r2, [pc, #592]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 80019a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff f890 	bl	8000ad4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e2d3      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019c6:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 80019c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ed      	beq.n	80019b0 <HAL_RCC_OscConfig+0x7ec>
 80019d4:	e053      	b.n	8001a7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 80019d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019dc:	4a86      	ldr	r2, [pc, #536]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 80019de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff f874 	bl	8000ad4 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e2b7      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019fe:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ed      	bne.n	80019e8 <HAL_RCC_OscConfig+0x824>
 8001a0c:	e037      	b.n	8001a7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f861 	bl	8000ad4 <HAL_GetTick>
 8001a12:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff f85d 	bl	8000ad4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e2a0      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ed      	bne.n	8001a16 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01a      	beq.n	8001a7e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a48:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a4e:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff f83b 	bl	8000ad4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e27e      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ed      	bne.n	8001a5a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d036      	beq.n	8001b10 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d019      	beq.n	8001ade <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ab6:	f7ff f80d 	bl	8000ad4 <HAL_GetTick>
 8001aba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001abe:	f7ff f809 	bl	8000ad4 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e24e      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x8fa>
 8001adc:	e018      	b.n	8001b10 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a45      	ldr	r2, [pc, #276]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001aea:	f7fe fff3 	bl	8000ad4 <HAL_GetTick>
 8001aee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af2:	f7fe ffef 	bl	8000ad4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e234      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d036      	beq.n	8001b8a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d019      	beq.n	8001b58 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a33      	ldr	r2, [pc, #204]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b30:	f7fe ffd0 	bl	8000ad4 <HAL_GetTick>
 8001b34:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b38:	f7fe ffcc 	bl	8000ad4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e211      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x974>
 8001b56:	e018      	b.n	8001b8a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b64:	f7fe ffb6 	bl	8000ad4 <HAL_GetTick>
 8001b68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b6c:	f7fe ffb2 	bl	8000ad4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1f7      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07f      	beq.n	8001c96 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d062      	beq.n	8001c64 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba8:	6093      	str	r3, [r2, #8]
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001bc4:	d309      	bcc.n	8001bda <HAL_RCC_OscConfig+0xa16>
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f023 021f 	bic.w	r2, r3, #31
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60cb      	str	r3, [r1, #12]
 8001bd8:	e02a      	b.n	8001c30 <HAL_RCC_OscConfig+0xa6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da0c      	bge.n	8001bfc <HAL_RCC_OscConfig+0xa38>
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	015b      	lsls	r3, r3, #5
 8001bf0:	4901      	ldr	r1, [pc, #4]	; (8001bf8 <HAL_RCC_OscConfig+0xa34>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
 8001bf6:	e01b      	b.n	8001c30 <HAL_RCC_OscConfig+0xa6c>
 8001bf8:	46020c00 	.word	0x46020c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c04:	d30a      	bcc.n	8001c1c <HAL_RCC_OscConfig+0xa58>
 8001c06:	4ba1      	ldr	r3, [pc, #644]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	499d      	ldr	r1, [pc, #628]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0xa6c>
 8001c1c:	4b9b      	ldr	r3, [pc, #620]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	03db      	lsls	r3, r3, #15
 8001c2a:	4998      	ldr	r1, [pc, #608]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001c30:	4b96      	ldr	r3, [pc, #600]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a95      	ldr	r2, [pc, #596]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c36:	f043 0310 	orr.w	r3, r3, #16
 8001c3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c3c:	f7fe ff4a 	bl	8000ad4 <HAL_GetTick>
 8001c40:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c44:	f7fe ff46 	bl	8000ad4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e18b      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c56:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xa80>
 8001c62:	e018      	b.n	8001c96 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a88      	ldr	r2, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c6a:	f023 0310 	bic.w	r3, r3, #16
 8001c6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c70:	f7fe ff30 	bl	8000ad4 <HAL_GetTick>
 8001c74:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c78:	f7fe ff2c 	bl	8000ad4 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e171      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c8a:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8166 	beq.w	8001f6c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca6:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	f000 80f2 	beq.w	8001e98 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	f040 80c5 	bne.w	8001e48 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cca:	f7fe ff03 	bl	8000ad4 <HAL_GetTick>
 8001cce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe feff 	bl	8000ad4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e144      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ce4:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d111      	bne.n	8001d22 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d04:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <HAL_RCC_OscConfig+0xccc>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d2e:	d102      	bne.n	8001d36 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d36:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <HAL_RCC_OscConfig+0xccc>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_RCC_OscConfig+0xccc>)
 8001d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d40:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001d42:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d56:	3a01      	subs	r2, #1
 8001d58:	0212      	lsls	r2, r2, #8
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d60:	430a      	orrs	r2, r1
 8001d62:	494a      	ldr	r1, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	628b      	str	r3, [r1, #40]	; 0x28
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6c:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_RCC_OscConfig+0xcd0>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d74:	3a01      	subs	r2, #1
 8001d76:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	0252      	lsls	r2, r2, #9
 8001d82:	b292      	uxth	r2, r2
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d8a:	3a01      	subs	r2, #1
 8001d8c:	0412      	lsls	r2, r2, #16
 8001d8e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	0612      	lsls	r2, r2, #24
 8001d9c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001da0:	430a      	orrs	r2, r1
 8001da2:	493a      	ldr	r1, [pc, #232]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dae:	f023 0310 	bic.w	r3, r3, #16
 8001db2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f023 020c 	bic.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	492d      	ldr	r1, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0xccc>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <HAL_RCC_OscConfig+0xccc>)
 8001dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001df0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e12:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e20:	f7fe fe58 	bl	8000ad4 <HAL_GetTick>
 8001e24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe fe54 	bl	8000ad4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e099      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xc64>
 8001e46:	e091      	b.n	8001f6c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e54:	f7fe fe3e 	bl	8000ad4 <HAL_GetTick>
 8001e58:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe fe3a 	bl	8000ad4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <HAL_RCC_OscConfig+0xcc8>)
 8001e80:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001e84:	f023 0303 	bic.w	r3, r3, #3
 8001e88:	6293      	str	r3, [r2, #40]	; 0x28
 8001e8a:	e06f      	b.n	8001f6c <HAL_RCC_OscConfig+0xda8>
 8001e8c:	46020c00 	.word	0x46020c00
 8001e90:	46020800 	.word	0x46020800
 8001e94:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001e98:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d039      	beq.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0203 	and.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d132      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d129      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d122      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11a      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	0a5b      	lsrs	r3, r3, #9
 8001eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d111      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	0c1b      	lsrs	r3, r3, #16
 8001f00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d108      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	0e1b      	lsrs	r3, r3, #24
 8001f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e024      	b.n	8001f6e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d01a      	beq.n	8001f6c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001f3c:	f023 0310 	bic.w	r3, r3, #16
 8001f40:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fdc7 	bl	8000ad4 <HAL_GetTick>
 8001f46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001f48:	bf00      	nop
 8001f4a:	f7fe fdc3 	bl	8000ad4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d0f9      	beq.n	8001f4a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_RCC_OscConfig+0xdb4>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3738      	adds	r7, #56	; 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	46020c00 	.word	0x46020c00

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e1d9      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b9b      	ldr	r3, [pc, #620]	; (8002200 <HAL_RCC_ClockConfig+0x284>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b98      	ldr	r3, [pc, #608]	; (8002200 <HAL_RCC_ClockConfig+0x284>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	4996      	ldr	r1, [pc, #600]	; (8002200 <HAL_RCC_ClockConfig+0x284>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b94      	ldr	r3, [pc, #592]	; (8002200 <HAL_RCC_ClockConfig+0x284>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e1c1      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001fdc:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	4986      	ldr	r1, [pc, #536]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002008:	429a      	cmp	r2, r3
 800200a:	d909      	bls.n	8002020 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800200c:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	497a      	ldr	r1, [pc, #488]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 800201c:	4313      	orrs	r3, r2
 800201e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002038:	429a      	cmp	r2, r3
 800203a:	d908      	bls.n	800204e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b71      	ldr	r3, [pc, #452]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	496e      	ldr	r1, [pc, #440]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 800204a:	4313      	orrs	r3, r2
 800204c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d010      	beq.n	800207c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b69      	ldr	r3, [pc, #420]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	429a      	cmp	r2, r3
 8002068:	d908      	bls.n	800207c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800206a:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4963      	ldr	r1, [pc, #396]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002078:	4313      	orrs	r3, r2
 800207a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80d2 	beq.w	800222e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d143      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b5b      	ldr	r3, [pc, #364]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d110      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 80020b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80020c6:	f7fe fd05 	bl	8000ad4 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_ClockConfig+0x28c>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00f      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80020da:	f7fe fcfb 	bl	8000ad4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e12b      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_ClockConfig+0x28c>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e112      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e106      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0fa      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0f2      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4926      	ldr	r1, [pc, #152]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002170:	f7fe fcb0 	bl	8000ad4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d112      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fca8 	bl	8000ad4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0d6      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d1ee      	bne.n	8002180 <HAL_RCC_ClockConfig+0x204>
 80021a2:	e044      	b.n	800222e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d112      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ae:	f7fe fc91 	bl	8000ad4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0bf      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d1ee      	bne.n	80021ae <HAL_RCC_ClockConfig+0x232>
 80021d0:	e02d      	b.n	800222e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d123      	bne.n	8002222 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fc7a 	bl	8000ad4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0a8      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <HAL_RCC_ClockConfig+0x288>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1ee      	bne.n	80021dc <HAL_RCC_ClockConfig+0x260>
 80021fe:	e016      	b.n	800222e <HAL_RCC_ClockConfig+0x2b2>
 8002200:	40022000 	.word	0x40022000
 8002204:	46020c00 	.word	0x46020c00
 8002208:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe fc62 	bl	8000ad4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e090      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d1ee      	bne.n	800220c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	429a      	cmp	r2, r3
 8002248:	d208      	bcs.n	800225c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f023 020f 	bic.w	r2, r3, #15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	493d      	ldr	r1, [pc, #244]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_RCC_ClockConfig+0x3d4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d210      	bcs.n	800228c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCC_ClockConfig+0x3d4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4937      	ldr	r1, [pc, #220]	; (8002350 <HAL_RCC_ClockConfig+0x3d4>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCC_ClockConfig+0x3d4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e05b      	b.n	8002344 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d208      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4925      	ldr	r1, [pc, #148]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d012      	beq.n	80022ec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d209      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4919      	ldr	r1, [pc, #100]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002304:	429a      	cmp	r2, r3
 8002306:	d208      	bcs.n	800231a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	490d      	ldr	r1, [pc, #52]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x3d0>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	490a      	ldr	r1, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x3d8>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x3dc>)
 8002332:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x3e0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fb81 	bl	8000a40 <HAL_InitTick>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]

  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	46020c00 	.word	0x46020c00
 8002350:	40022000 	.word	0x40022000
 8002354:	08009674 	.word	0x08009674
 8002358:	20000004 	.word	0x20000004
 800235c:	20000008 	.word	0x20000008

08002360 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	4b7b      	ldr	r3, [pc, #492]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002378:	4b78      	ldr	r3, [pc, #480]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x34>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d121      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d11e      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002394:	4b71      	ldr	r3, [pc, #452]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80023a0:	4b6e      	ldr	r3, [pc, #440]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a6:	0b1b      	lsrs	r3, r3, #12
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e005      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	0f1b      	lsrs	r3, r3, #28
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023bc:	4a68      	ldr	r2, [pc, #416]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d110      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d0:	e00d      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d2:	4b62      	ldr	r3, [pc, #392]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023de:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	e004      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023ea:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	f040 80ac 	bne.w	800254e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002400:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3301      	adds	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800241a:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	08db      	lsrs	r3, r3, #3
 8002420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002432:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8086 	beq.w	800254a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d003      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0xec>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d022      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x130>
 800244a:	e043      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002568 <HAL_RCC_GetSysClockFreq+0x208>
 800245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800246e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002472:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800256c <HAL_RCC_GetSysClockFreq+0x20c>
 8002476:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800247e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002482:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800248e:	e046      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002568 <HAL_RCC_GetSysClockFreq+0x208>
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80024b6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800256c <HAL_RCC_GetSysClockFreq+0x20c>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80024d2:	e024      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024fc:	ed97 6a01 	vldr	s12, [r7, #4]
 8002500:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800256c <HAL_RCC_GetSysClockFreq+0x20c>
 8002504:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002508:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800250c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002510:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800251c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002528:	3301      	adds	r3, #1
 800252a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002536:	edd7 6a07 	vldr	s13, [r7, #28]
 800253a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002542:	ee17 3a90 	vmov	r3, s15
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	e001      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800254e:	6a3b      	ldr	r3, [r7, #32]
}
 8002550:	4618      	mov	r0, r3
 8002552:	372c      	adds	r7, #44	; 0x2c
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	46020c00 	.word	0x46020c00
 8002560:	0800968c 	.word	0x0800968c
 8002564:	00f42400 	.word	0x00f42400
 8002568:	4b742400 	.word	0x4b742400
 800256c:	46000000 	.word	0x46000000

08002570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002574:	f7ff fef4 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_RCC_GetHCLKFreq+0x28>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	4906      	ldr	r1, [pc, #24]	; (800259c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800258c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002590:	681b      	ldr	r3, [r3, #0]
}
 8002592:	4618      	mov	r0, r3
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	46020c00 	.word	0x46020c00
 800259c:	08009674 	.word	0x08009674
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80025a8:	f7ff ffe2 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	46020c00 	.word	0x46020c00
 80025c8:	08009684 	.word	0x08009684

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80025d0:	f7ff ffce 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	46020c00 	.word	0x46020c00
 80025f0:	08009684 	.word	0x08009684

080025f4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80025f8:	f7ff ffba 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK3Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	46020c00 	.word	0x46020c00
 8002618:	08009684 	.word	0x08009684

0800261c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002624:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002632:	f7fe fdb9 	bl	80011a8 <HAL_PWREx_GetVoltageRange>
 8002636:	6178      	str	r0, [r7, #20]
 8002638:	e019      	b.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800263c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002640:	4a37      	ldr	r2, [pc, #220]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002658:	f7fe fda6 	bl	80011a8 <HAL_PWREx_GetVoltageRange>
 800265c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002664:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002674:	d003      	beq.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800267c:	d109      	bne.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002684:	d202      	bcs.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002686:	2301      	movs	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800268a:	e033      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002690:	e030      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002698:	d208      	bcs.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d102      	bne.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80026a2:	2303      	movs	r3, #3
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e025      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e035      	b.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b2:	d90f      	bls.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026c0:	d902      	bls.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	e015      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80026c8:	2301      	movs	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e012      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e00f      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026da:	d109      	bne.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d102      	bne.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e004      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80026ea:	2302      	movs	r3, #2
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	e001      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80026f0:	2301      	movs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 020f 	bic.w	r2, r3, #15
 80026fc:	4909      	ldr	r1, [pc, #36]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	46020c00 	.word	0x46020c00
 8002724:	40022000 	.word	0x40022000

08002728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b0b6      	sub	sp, #216	; 0xd8
 800272e:	af00      	add	r7, sp, #0
 8002730:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002734:	2300      	movs	r3, #0
 8002736:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800273a:	2300      	movs	r3, #0
 800273c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f002 0401 	and.w	r4, r2, #1
 800274c:	2500      	movs	r5, #0
 800274e:	ea54 0305 	orrs.w	r3, r4, r5
 8002752:	d00b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002754:	4bc5      	ldr	r3, [pc, #788]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275a:	f023 0103 	bic.w	r1, r3, #3
 800275e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002764:	4ac1      	ldr	r2, [pc, #772]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002766:	430b      	orrs	r3, r1
 8002768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800276c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f002 0804 	and.w	r8, r2, #4
 8002778:	f04f 0900 	mov.w	r9, #0
 800277c:	ea58 0309 	orrs.w	r3, r8, r9
 8002780:	d00b      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002782:	4bba      	ldr	r3, [pc, #744]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002788:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800278c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	4ab6      	ldr	r2, [pc, #728]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002794:	430b      	orrs	r3, r1
 8002796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f002 0a08 	and.w	sl, r2, #8
 80027a6:	f04f 0b00 	mov.w	fp, #0
 80027aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80027ae:	d00b      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80027b0:	4bae      	ldr	r3, [pc, #696]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4aaa      	ldr	r2, [pc, #680]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027c2:	430b      	orrs	r3, r1
 80027c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f002 0310 	and.w	r3, r2, #16
 80027d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80027e2:	460b      	mov	r3, r1
 80027e4:	4313      	orrs	r3, r2
 80027e6:	d00b      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80027e8:	4ba0      	ldr	r3, [pc, #640]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	4a9c      	ldr	r2, [pc, #624]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027fa:	430b      	orrs	r3, r1
 80027fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f002 0320 	and.w	r3, r2, #32
 800280c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002816:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800281a:	460b      	mov	r3, r1
 800281c:	4313      	orrs	r3, r2
 800281e:	d00b      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002826:	f023 0107 	bic.w	r1, r3, #7
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002830:	4a8e      	ldr	r2, [pc, #568]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002832:	430b      	orrs	r3, r1
 8002834:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800284e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002852:	460b      	mov	r3, r1
 8002854:	4313      	orrs	r3, r2
 8002856:	d00b      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002858:	4b84      	ldr	r3, [pc, #528]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002868:	4a80      	ldr	r2, [pc, #512]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800286a:	430b      	orrs	r3, r1
 800286c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800287c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002886:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800288a:	460b      	mov	r3, r1
 800288c:	4313      	orrs	r3, r2
 800288e:	d00b      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002890:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800289e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a0:	4a72      	ldr	r2, [pc, #456]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80028a2:	430b      	orrs	r3, r1
 80028a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80028b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80028c2:	460b      	mov	r3, r1
 80028c4:	4313      	orrs	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d8:	4a64      	ldr	r2, [pc, #400]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80028da:	430b      	orrs	r3, r1
 80028dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80028ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80028fa:	460b      	mov	r3, r1
 80028fc:	4313      	orrs	r3, r2
 80028fe:	d00b      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002900:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002906:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800290a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800292e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002932:	460b      	mov	r3, r1
 8002934:	4313      	orrs	r3, r2
 8002936:	d00b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002938:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800293e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800294a:	430b      	orrs	r3, r1
 800294c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800295c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002966:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800296a:	460b      	mov	r3, r1
 800296c:	4313      	orrs	r3, r2
 800296e:	d00b      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002970:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800297a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800297e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002980:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002982:	430b      	orrs	r3, r1
 8002984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002994:	67bb      	str	r3, [r7, #120]	; 0x78
 8002996:	2300      	movs	r3, #0
 8002998:	67fb      	str	r3, [r7, #124]	; 0x7c
 800299a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d00b      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80029a4:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029b6:	430b      	orrs	r3, r1
 80029b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80029c8:	673b      	str	r3, [r7, #112]	; 0x70
 80029ca:	2300      	movs	r3, #0
 80029cc:	677b      	str	r3, [r7, #116]	; 0x74
 80029ce:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80029d2:	460b      	mov	r3, r1
 80029d4:	4313      	orrs	r3, r2
 80029d6:	d04f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80029d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d02d      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d827      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d02b      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d823      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d006      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d81f      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d011      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002a00:	e01a      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002a0e:	e01a      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a14:	3308      	adds	r3, #8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f93e 	bl	8004c98 <RCCEx_PLL2_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002a22:	e010      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a28:	332c      	adds	r3, #44	; 0x2c
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 f9cc 	bl	8004dc8 <RCCEx_PLL3_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002a36:	e006      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8002a40:	bf00      	nop
 8002a42:	e000      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8002a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a46:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d110      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a54:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a60:	4a02      	ldr	r2, [pc, #8]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a62:	430b      	orrs	r3, r1
 8002a64:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002a68:	e006      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002a6a:	bf00      	nop
 8002a6c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a70:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002a74:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a86:	2300      	movs	r3, #0
 8002a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4313      	orrs	r3, r2
 8002a92:	d046      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a9c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002aa2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002aa6:	d821      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aac:	d022      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab2:	d81b      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002ab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ab8:	d01c      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002aba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002abe:	d815      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac4:	d008      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aca:	d80f      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d011      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d00e      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002ad6:	e009      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002adc:	3308      	adds	r3, #8
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 f8da 	bl	8004c98 <RCCEx_PLL2_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002aea:	e004      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002af2:	e000      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8002af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002afe:	4bb6      	ldr	r3, [pc, #728]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b10:	4ab1      	ldr	r2, [pc, #708]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002b12:	430b      	orrs	r3, r1
 8002b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002b1e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b30:	2300      	movs	r3, #0
 8002b32:	667b      	str	r3, [r7, #100]	; 0x64
 8002b34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	d03e      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d81d      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b8f 	.word	0x08002b8f
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b73 	.word	0x08002b73
 8002b5c:	08002b8f 	.word	0x08002b8f
 8002b60:	08002b8f 	.word	0x08002b8f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b64:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	4a9b      	ldr	r2, [pc, #620]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002b70:	e00e      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b76:	332c      	adds	r3, #44	; 0x2c
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 f925 	bl	8004dc8 <RCCEx_PLL3_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002b84:	e004      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002b8c:	e000      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8002b8e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002b90:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002b98:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002b9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b9e:	f023 0107 	bic.w	r1, r3, #7
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002baa:	4a8b      	ldr	r2, [pc, #556]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002bb2:	e003      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002bb8:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bca:	2300      	movs	r3, #0
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	d04a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be4:	d028      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bea:	d821      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf0:	d024      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf6:	d81b      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfc:	d00e      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c02:	d815      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d110      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	4a71      	ldr	r2, [pc, #452]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002c1a:	e012      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c20:	332c      	adds	r3, #44	; 0x2c
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 f8d0 	bl	8004dc8 <RCCEx_PLL3_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002c2e:	e008      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8002c38:	bf00      	nop
 8002c3a:	e002      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8002c40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002c42:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c50:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	4a5e      	ldr	r2, [pc, #376]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c66:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002c6a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c80:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002c84:	460b      	mov	r3, r1
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f000 80ba 	beq.w	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d113      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	4a4c      	ldr	r2, [pc, #304]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002cc8:	4b44      	ldr	r3, [pc, #272]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	4a43      	ldr	r2, [pc, #268]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd4:	f7fd fefe 	bl	8000ad4 <HAL_GetTick>
 8002cd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fd fef9 	bl	8000ad4 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002cf4:	e005      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ed      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8002d02:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d16a      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d023      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d24:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01b      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d44:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d019      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fd feae 	bl	8000ad4 <HAL_GetTick>
 8002d78:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7c:	e00d      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fd fea9 	bl	8000ad4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d88:	1ad2      	subs	r2, r2, r3
 8002d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d903      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8002d98:	e006      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ea      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8002da8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002dca:	e00d      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dcc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002dd0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8002dd4:	e008      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8002dd6:	bf00      	nop
 8002dd8:	46020c00 	.word	0x46020c00
 8002ddc:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002de4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002de8:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4bb2      	ldr	r3, [pc, #712]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df6:	4ab1      	ldr	r2, [pc, #708]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e0e:	2300      	movs	r3, #0
 8002e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002e16:	460b      	mov	r3, r1
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	d042      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8002e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002e28:	d022      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002e2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002e2e:	d81b      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e34:	d011      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x732>
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3a:	d815      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d019      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e44:	d110      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 ff23 	bl	8004c98 <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002e58:	e00d      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5a:	4b98      	ldr	r3, [pc, #608]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	4a97      	ldr	r2, [pc, #604]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002e66:	e006      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002e6e:	e002      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8002e70:	bf00      	nop
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8002e74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002e76:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8002e7e:	4b8f      	ldr	r3, [pc, #572]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e84:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e90:	4a8a      	ldr	r2, [pc, #552]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002e92:	430b      	orrs	r3, r1
 8002e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e98:	e003      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002e9e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002eae:	643b      	str	r3, [r7, #64]	; 0x40
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	d02d      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed0:	d804      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d007      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8002ee2:	e004      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e002      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8002ee8:	bf00      	nop
 8002eea:	e000      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8002eec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002eee:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002ef6:	4b71      	ldr	r3, [pc, #452]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002efc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4a6c      	ldr	r2, [pc, #432]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002f16:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f28:	2300      	movs	r3, #0
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002f30:	460b      	mov	r3, r1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	d00c      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8002f36:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f3c:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f48:	4a5c      	ldr	r2, [pc, #368]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8002f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	2300      	movs	r3, #0
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
 8002f62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002f66:	460b      	mov	r3, r1
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	d019      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8002f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f78:	d105      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f7a:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	4a4f      	ldr	r2, [pc, #316]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8002f86:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f8c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8002f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	d00c      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fce:	493b      	ldr	r1, [pc, #236]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002fec:	460b      	mov	r3, r1
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	d00c      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002ff2:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003004:	492d      	ldr	r1, [pc, #180]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800300c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003022:	460b      	mov	r3, r1
 8003024:	4313      	orrs	r3, r2
 8003026:	d00c      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800302a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800302e:	f023 0218 	bic.w	r2, r3, #24
 8003032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800303a:	4920      	ldr	r1, [pc, #128]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003058:	460b      	mov	r3, r1
 800305a:	4313      	orrs	r3, r2
 800305c:	d034      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800305e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003062:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800306a:	d105      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003076:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800307c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003084:	d108      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800308a:	3308      	adds	r3, #8
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fe03 	bl	8004c98 <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8003098:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10f      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80030a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030b2:	4902      	ldr	r1, [pc, #8]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80030ba:	e005      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80030bc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80030c4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80030c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80030de:	460b      	mov	r3, r1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	d03a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80030e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030f0:	d00e      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80030f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030f6:	d815      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d017      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003100:	d110      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800310e:	e00e      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003114:	3308      	adds	r3, #8
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fdbe 	bl	8004c98 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003122:	e004      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 800312c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800312e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003148:	4915      	ldr	r1, [pc, #84]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003150:	e003      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003156:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800315a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003170:	460b      	mov	r3, r1
 8003172:	4313      	orrs	r3, r2
 8003174:	d00c      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800317c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003188:	4905      	ldr	r1, [pc, #20]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003190:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8003194:	4618      	mov	r0, r3
 8003196:	37d8      	adds	r7, #216	; 0xd8
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319e:	bf00      	nop
 80031a0:	46020c00 	.word	0x46020c00

080031a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80031ac:	4bad      	ldr	r3, [pc, #692]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80031b6:	4bab      	ldr	r3, [pc, #684]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80031c0:	4ba8      	ldr	r3, [pc, #672]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3301      	adds	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80031ce:	4ba5      	ldr	r3, [pc, #660]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80031da:	4ba2      	ldr	r3, [pc, #648]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8123 	beq.w	8003444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d062      	beq.n	80032ca <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b03      	cmp	r3, #3
 8003208:	f200 8081 	bhi.w	800330e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d024      	beq.n	800325c <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d17a      	bne.n	800330e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003468 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b8e      	ldr	r3, [pc, #568]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800346c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800325a:	e08f      	b.n	800337c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800325c:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003268:	4b7e      	ldr	r3, [pc, #504]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	0f1b      	lsrs	r3, r3, #28
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	e006      	b.n	8003282 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003274:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	0f1b      	lsrs	r3, r3, #28
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	4a7b      	ldr	r2, [pc, #492]	; (8003470 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ac:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800346c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80032b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c8:	e058      	b.n	800337c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003468 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80032d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800346c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80032f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80032f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80032fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003300:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800330c:	e036      	b.n	800337c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800330e:	4b55      	ldr	r3, [pc, #340]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800331a:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0f1b      	lsrs	r3, r3, #28
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003326:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	0f1b      	lsrs	r3, r3, #28
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	4a4e      	ldr	r2, [pc, #312]	; (8003470 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a02 	vldr	s12, [r7, #8]
 800335e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800346c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800337a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	0a5b      	lsrs	r3, r3, #9
 800338e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800339a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800339e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80033a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ae:	ee17 2a90 	vmov	r2, s15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e002      	b.n	80033be <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d017      	beq.n	80033fa <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80033ca:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80033dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80033e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f0:	ee17 2a90 	vmov	r2, s15
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d017      	beq.n	800343c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800340c:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800341e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003422:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003426:	edd7 6a07 	vldr	s13, [r7, #28]
 800342a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800342e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003432:	ee17 2a90 	vmov	r2, s15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800343a:	e00c      	b.n	8003456 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
}
 8003442:	e008      	b.n	8003456 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
}
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	46020c00 	.word	0x46020c00
 8003468:	4b742400 	.word	0x4b742400
 800346c:	46000000 	.word	0x46000000
 8003470:	0800968c 	.word	0x0800968c

08003474 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800347c:	4bad      	ldr	r3, [pc, #692]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003486:	4bab      	ldr	r3, [pc, #684]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003490:	4ba8      	ldr	r3, [pc, #672]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3301      	adds	r3, #1
 800349c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800349e:	4ba5      	ldr	r3, [pc, #660]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80034aa:	4ba2      	ldr	r3, [pc, #648]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	08db      	lsrs	r3, r3, #3
 80034b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8123 	beq.w	8003714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d062      	beq.n	800359a <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	f200 8081 	bhi.w	80035de <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d024      	beq.n	800352c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d17a      	bne.n	80035de <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80034f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fa:	4b8e      	ldr	r3, [pc, #568]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800350a:	ed97 6a02 	vldr	s12, [r7, #8]
 800350e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003512:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003516:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800351a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800352a:	e08f      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800352c:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003538:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	0f1b      	lsrs	r3, r3, #28
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	e006      	b.n	8003552 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003544:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	0f1b      	lsrs	r3, r3, #28
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	4a7b      	ldr	r2, [pc, #492]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003578:	ed97 6a02 	vldr	s12, [r7, #8]
 800357c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003598:	e058      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80035a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80035bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80035c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80035c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80035cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80035d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035dc:	e036      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80035de:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 80035ea:	4b52      	ldr	r3, [pc, #328]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0f1b      	lsrs	r3, r3, #28
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80035f6:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	0f1b      	lsrs	r3, r3, #28
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	4a4e      	ldr	r2, [pc, #312]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362a:	ed97 6a02 	vldr	s12, [r7, #8]
 800362e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364a:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800364c:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d017      	beq.n	8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	0a5b      	lsrs	r3, r3, #9
 800365e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800366a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800366e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003672:	edd7 6a07 	vldr	s13, [r7, #28]
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367e:	ee17 2a90 	vmov	r2, s15
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e002      	b.n	800368e <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d017      	beq.n	80036ca <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80036ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80036b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c0:	ee17 2a90 	vmov	r2, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80036d0:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	0e1b      	lsrs	r3, r3, #24
 80036e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80036ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80036f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003702:	ee17 2a90 	vmov	r2, s15
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800370a:	e00c      	b.n	8003726 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
}
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
}
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	46020c00 	.word	0x46020c00
 8003738:	4b742400 	.word	0x4b742400
 800373c:	46000000 	.word	0x46000000
 8003740:	0800968c 	.word	0x0800968c

08003744 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800374c:	4bad      	ldr	r3, [pc, #692]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003754:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003756:	4bab      	ldr	r3, [pc, #684]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003760:	4ba8      	ldr	r3, [pc, #672]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3301      	adds	r3, #1
 800376c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800376e:	4ba5      	ldr	r3, [pc, #660]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800377a:	4ba2      	ldr	r3, [pc, #648]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	08db      	lsrs	r3, r3, #3
 8003780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8123 	beq.w	80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d062      	beq.n	800386a <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	f200 8081 	bhi.w	80038ae <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d024      	beq.n	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d17a      	bne.n	80038ae <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b8e      	ldr	r3, [pc, #568]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80037fa:	e08f      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80037fc:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8003808:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0f1b      	lsrs	r3, r3, #28
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	e006      	b.n	8003822 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	0f1b      	lsrs	r3, r3, #28
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a7b      	ldr	r2, [pc, #492]	; (8003a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003848:	ed97 6a02 	vldr	s12, [r7, #8]
 800384c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003868:	e058      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003874:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387c:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800388c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003890:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003894:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003898:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800389c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80038a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ac:	e036      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80038ae:	4b55      	ldr	r3, [pc, #340]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80038ba:	4b52      	ldr	r3, [pc, #328]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0f1b      	lsrs	r3, r3, #28
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80038c6:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	0f1b      	lsrs	r3, r3, #28
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fe:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800391a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003928:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	0a5b      	lsrs	r3, r3, #9
 800392e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800393a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003942:	edd7 6a07 	vldr	s13, [r7, #28]
 8003946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 2a90 	vmov	r2, s15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e002      	b.n	800395e <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d017      	beq.n	800399a <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800397c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003980:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 2a90 	vmov	r2, s15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	0e1b      	lsrs	r3, r3, #24
 80039b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80039be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039c2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80039c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d2:	ee17 2a90 	vmov	r2, s15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80039da:	e00c      	b.n	80039f6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	46020c00 	.word	0x46020c00
 8003a08:	4b742400 	.word	0x4b742400
 8003a0c:	46000000 	.word	0x46000000
 8003a10:	0800968c 	.word	0x0800968c

08003a14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a22:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003a26:	430b      	orrs	r3, r1
 8003a28:	d145      	bne.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003a2a:	4b9b      	ldr	r3, [pc, #620]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003a36:	4b98      	ldr	r3, [pc, #608]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d108      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d104      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
 8003a52:	f001 b912 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003a56:	4b90      	ldr	r3, [pc, #576]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a64:	d114      	bne.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6c:	d110      	bne.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003a6e:	4b8a      	ldr	r3, [pc, #552]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7c:	d103      	bne.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003a7e:	23fa      	movs	r3, #250	; 0xfa
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003a82:	f001 b8fa 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8003a86:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003a8c:	f001 b8f5 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003a90:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9c:	d107      	bne.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa4:	d103      	bne.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aaa:	f001 b8e6 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab2:	f001 b8e2 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aba:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	d151      	bne.n	8003b66 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003ac2:	4b75      	ldr	r3, [pc, #468]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ac8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d035      	beq.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d841      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d02a      	beq.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2b60      	cmp	r3, #96	; 0x60
 8003ae4:	d83b      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d009      	beq.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d835      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d012      	beq.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003afe:	e02e      	b.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fb4d 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b0e:	f001 b8b4 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b12:	f107 0318 	add.w	r3, r7, #24
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fcac 	bl	8003474 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b20:	f001 b8ab 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fe0b 	bl	8003744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b32:	f001 b8a2 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003b36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003b3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b3c:	f001 b89d 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b40:	4b55      	ldr	r3, [pc, #340]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4c:	d103      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8003b4e:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003b52:	f001 b892 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b5a:	f001 b88e 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b62:	f001 b88a 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8003b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	d126      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003b72:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003b74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003b7e:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	f001 b870 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bae:	d103      	bne.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8003bb0:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb4:	f001 b861 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
 8003bbc:	f001 b85d 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8003bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc4:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	d171      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003bcc:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bde:	d034      	beq.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003be6:	d853      	bhi.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bee:	d00b      	beq.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf6:	d84b      	bhi.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c04:	d009      	beq.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8003c06:	e043      	b.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fac9 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c16:	f001 b830 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c1a:	f107 0318 	add.w	r3, r7, #24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fc28 	bl	8003474 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c28:	f001 b827 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c38:	d103      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003c3e:	f001 b81c 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c46:	f001 b818 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d118      	bne.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0e1b      	lsrs	r3, r3, #24
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	0e1b      	lsrs	r3, r3, #24
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003c84:	f000 bff9 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c8c:	f000 bff5 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c94:	f000 bff1 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8003c98:	46020c00 	.word	0x46020c00
 8003c9c:	0007a120 	.word	0x0007a120
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200
 8003ca8:	02dc6c00 	.word	0x02dc6c00
 8003cac:	0800968c 	.word	0x0800968c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cb4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	d17f      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003cbc:	4ba8      	ldr	r3, [pc, #672]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d165      	bne.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003cce:	4ba4      	ldr	r3, [pc, #656]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ce0:	d034      	beq.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ce8:	d853      	bhi.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf8:	d84b      	bhi.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8003d08:	e043      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fa48 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003d18:	f000 bfaf 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d1c:	f107 0318 	add.w	r3, r7, #24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fba7 	bl	8003474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003d2a:	f000 bfa6 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003d2e:	4b8c      	ldr	r3, [pc, #560]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3a:	d103      	bne.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8003d3c:	4b89      	ldr	r3, [pc, #548]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003d40:	f000 bf9b 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003d48:	f000 bf97 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003d4c:	4b84      	ldr	r3, [pc, #528]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d118      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003d58:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8003d64:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	0e1b      	lsrs	r3, r3, #24
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	e006      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8003d70:	4b7b      	ldr	r3, [pc, #492]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	0e1b      	lsrs	r3, r3, #24
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	4a7a      	ldr	r2, [pc, #488]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003d86:	f000 bf78 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003d8e:	f000 bf74 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003d96:	f000 bf70 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da0:	d108      	bne.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f9fc 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	f000 bf63 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
 8003db8:	f000 bf5f 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8003dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc0:	1e51      	subs	r1, r2, #1
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	d136      	bne.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003dc6:	4b66      	ldr	r3, [pc, #408]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7fe fbf8 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003ddc:	6378      	str	r0, [r7, #52]	; 0x34
 8003dde:	f000 bf4c 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d104      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003de8:	f7fe faba 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003dec:	6378      	str	r0, [r7, #52]	; 0x34
 8003dee:	f000 bf44 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003df2:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d103      	bne.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8003e06:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0a:	f000 bf36 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d104      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
 8003e28:	f000 bf27 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e30:	f000 bf23 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8003e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e38:	1f11      	subs	r1, r2, #4
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	d136      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e3e:	4b48      	ldr	r3, [pc, #288]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe fba8 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003e54:	6378      	str	r0, [r7, #52]	; 0x34
 8003e56:	f000 bf10 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d104      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003e60:	f7fe fa7e 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003e64:	6378      	str	r0, [r7, #52]	; 0x34
 8003e66:	f000 bf08 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d106      	bne.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d103      	bne.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
 8003e82:	f000 befa 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003e86:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	d104      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea0:	f000 beeb 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea8:	f000 bee7 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8003eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb0:	f1a2 0108 	sub.w	r1, r2, #8
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	d136      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003eca:	f7fe fb6b 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003ece:	6378      	str	r0, [r7, #52]	; 0x34
 8003ed0:	f000 bed3 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d104      	bne.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fa41 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003ede:	6378      	str	r0, [r7, #52]	; 0x34
 8003ee0:	f000 becb 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d103      	bne.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
 8003efc:	f000 bebd 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	2bc0      	cmp	r3, #192	; 0xc0
 8003f12:	d104      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8003f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	f000 beae 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
 8003f22:	f000 beaa 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8003f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2a:	f1a2 0110 	sub.w	r1, r2, #16
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	d141      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003f44:	f7fe fb2e 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003f48:	6378      	str	r0, [r7, #52]	; 0x34
 8003f4a:	f000 be96 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe fa03 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003f5a:	6378      	str	r0, [r7, #52]	; 0x34
 8003f5c:	f000 be8d 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8003f60:	46020c00 	.word	0x46020c00
 8003f64:	02dc6c00 	.word	0x02dc6c00
 8003f68:	0800968c 	.word	0x0800968c
 8003f6c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003f70:	4baa      	ldr	r3, [pc, #680]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d103      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8003f86:	4ba6      	ldr	r3, [pc, #664]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	f000 be76 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003f8e:	4ba3      	ldr	r3, [pc, #652]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d108      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa2:	d104      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8003fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003faa:	f000 be66 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb2:	f000 be62 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8003fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fba:	f1a2 0120 	sub.w	r1, r2, #32
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	d158      	bne.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fc2:	4b96      	ldr	r3, [pc, #600]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8003fd4:	f7fe fb0e 	bl	80025f4 <HAL_RCC_GetPCLK3Freq>
 8003fd8:	6378      	str	r0, [r7, #52]	; 0x34
 8003fda:	f000 be4e 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d104      	bne.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003fe4:	f7fe f9bc 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003fe8:	6378      	str	r0, [r7, #52]	; 0x34
 8003fea:	f000 be46 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003fee:	4b8b      	ldr	r3, [pc, #556]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d106      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d103      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8004002:	4b87      	ldr	r3, [pc, #540]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	f000 be38 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800400a:	4b84      	ldr	r3, [pc, #528]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800400c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d107      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	2b03      	cmp	r3, #3
 800401c:	d104      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
 8004024:	f000 be29 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004028:	4b7c      	ldr	r3, [pc, #496]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b20      	cmp	r3, #32
 8004032:	d11b      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	2b04      	cmp	r3, #4
 8004038:	d118      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800403a:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8004046:	4b75      	ldr	r3, [pc, #468]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	0e1b      	lsrs	r3, r3, #24
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	0e1b      	lsrs	r3, r3, #24
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	4a70      	ldr	r2, [pc, #448]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	f000 be07 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
 8004070:	f000 be03 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004078:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800407c:	430b      	orrs	r3, r1
 800407e:	d16c      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004080:	4b66      	ldr	r3, [pc, #408]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004086:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800408a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d104      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004094:	f7fe f964 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8004098:	6378      	str	r0, [r7, #52]	; 0x34
 800409a:	f000 bdee 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d108      	bne.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040a6:	f107 0318 	add.w	r3, r7, #24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f9e2 	bl	8003474 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
 80040b4:	f000 bde1 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80040be:	f7fe fa57 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80040c2:	6378      	str	r0, [r7, #52]	; 0x34
 80040c4:	f000 bdd9 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040ce:	d122      	bne.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80040d0:	4b52      	ldr	r3, [pc, #328]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d118      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80040e8:	4b4c      	ldr	r3, [pc, #304]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	0e1b      	lsrs	r3, r3, #24
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	e006      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80040f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	4a48      	ldr	r2, [pc, #288]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
 800410a:	f000 bdb6 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
 8004112:	f000 bdb2 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004116:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004122:	d107      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800412a:	d103      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 800412c:	4b3c      	ldr	r3, [pc, #240]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
 8004130:	f000 bda3 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004134:	4b39      	ldr	r3, [pc, #228]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004140:	d107      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004148:	d103      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 800414a:	4b35      	ldr	r3, [pc, #212]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
 800414e:	f000 bd94 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
 8004156:	f000 bd90 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800415a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800415e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004162:	430b      	orrs	r3, r1
 8004164:	d160      	bne.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004166:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004168:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	2b04      	cmp	r3, #4
 8004176:	d84c      	bhi.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041b9 	.word	0x080041b9
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a7 	.word	0x080041a7
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041cd 	.word	0x080041cd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff f803 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a2:	f000 bd6a 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041a6:	f107 030c 	add.w	r3, r7, #12
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff faca 	bl	8003744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041b4:	f000 bd61 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80041b8:	f7fe f9da 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80041bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80041be:	f000 bd5c 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80041c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80041c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041c8:	f000 bd57 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d118      	bne.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	4a09      	ldr	r2, [pc, #36]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004206:	f000 bd38 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800420e:	f000 bd34 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004216:	f000 bd30 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800421a:	bf00      	nop
 800421c:	46020c00 	.word	0x46020c00
 8004220:	00f42400 	.word	0x00f42400
 8004224:	0800968c 	.word	0x0800968c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422c:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004230:	430b      	orrs	r3, r1
 8004232:	d167      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004234:	4ba0      	ldr	r3, [pc, #640]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800423a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800423e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004246:	d036      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800424e:	d855      	bhi.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004256:	d029      	beq.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800425e:	d84d      	bhi.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004266:	d013      	beq.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426e:	d845      	bhi.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2b00      	cmp	r3, #0
 8004274:	d015      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d13e      	bne.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800427e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe ff8e 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800428c:	f000 bcf5 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fa55 	bl	8003744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800429e:	f000 bcec 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80042a2:	f7fe f965 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80042a6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80042a8:	f000 bce7 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80042ac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042b2:	f000 bce2 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80042b6:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d118      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042c2:	4b7d      	ldr	r3, [pc, #500]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80042ce:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80042da:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80042dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	0e1b      	lsrs	r3, r3, #24
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	4a74      	ldr	r2, [pc, #464]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80042ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80042f0:	f000 bcc3 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f8:	f000 bcbf 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004300:	f000 bcbb 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004308:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800430c:	430b      	orrs	r3, r1
 800430e:	d14c      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004316:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800431a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004322:	f7fe f93f 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8004326:	6378      	str	r0, [r7, #52]	; 0x34
 8004328:	f000 bca7 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d104      	bne.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004334:	f7fe f814 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8004338:	6378      	str	r0, [r7, #52]	; 0x34
 800433a:	f000 bc9e 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800433e:	4b5e      	ldr	r3, [pc, #376]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d107      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d103      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8004354:	4b5a      	ldr	r3, [pc, #360]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004356:	637b      	str	r3, [r7, #52]	; 0x34
 8004358:	f000 bc8f 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800435c:	4b56      	ldr	r3, [pc, #344]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d11c      	bne.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436e:	d118      	bne.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004370:	4b51      	ldr	r3, [pc, #324]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800437c:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	e006      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8004388:	4b4b      	ldr	r3, [pc, #300]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800438a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	0e1b      	lsrs	r3, r3, #24
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	4a49      	ldr	r2, [pc, #292]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	f000 bc6c 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	f000 bc68 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80043aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ae:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80043b2:	430b      	orrs	r3, r1
 80043b4:	d14c      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80043b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7fe f8ec 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 80043cc:	6378      	str	r0, [r7, #52]	; 0x34
 80043ce:	f000 bc54 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d8:	d104      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043da:	f7fd ffc1 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 80043de:	6378      	str	r0, [r7, #52]	; 0x34
 80043e0:	f000 bc4b 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f0:	d107      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f8:	d103      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
 80043fe:	f000 bc3c 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b20      	cmp	r3, #32
 800440c:	d11c      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004414:	d118      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0e1b      	lsrs	r3, r3, #24
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	e006      	b.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	0e1b      	lsrs	r3, r3, #24
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	f000 bc19 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
 800444c:	f000 bc15 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004454:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004458:	430b      	orrs	r3, r1
 800445a:	d157      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800445e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004466:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2bc0      	cmp	r3, #192	; 0xc0
 800446c:	d02a      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2bc0      	cmp	r3, #192	; 0xc0
 8004472:	d848      	bhi.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d00d      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2b80      	cmp	r3, #128	; 0x80
 800447e:	d842      	bhi.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d011      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800448c:	e03b      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800448e:	f7fe f8b1 	bl	80025f4 <HAL_RCC_GetPCLK3Freq>
 8004492:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004494:	e3f1      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	d102      	bne.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044a8:	e3e7      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044ae:	e3e4      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80044b0:	f7fd ff56 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 80044b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80044b6:	e3e0      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80044b8:	46020c00 	.word	0x46020c00
 80044bc:	0800968c 	.word	0x0800968c
 80044c0:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80044c4:	4ba3      	ldr	r3, [pc, #652]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d117      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80044d0:	4ba0      	ldr	r3, [pc, #640]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80044dc:	4b9d      	ldr	r3, [pc, #628]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	0e1b      	lsrs	r3, r3, #24
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	e006      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80044e8:	4b9a      	ldr	r3, [pc, #616]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80044ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	0e1b      	lsrs	r3, r3, #24
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	4a98      	ldr	r2, [pc, #608]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80044f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044fe:	e3bc      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004504:	e3b9      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800450a:	e3b6      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800450c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004510:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004514:	430b      	orrs	r3, r1
 8004516:	d147      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004518:	4b8e      	ldr	r3, [pc, #568]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800451a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800451e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004522:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800452a:	f7fe f83b 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 800452e:	6378      	str	r0, [r7, #52]	; 0x34
 8004530:	e3a3      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004538:	d103      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800453a:	f7fd ff11 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800453e:	6378      	str	r0, [r7, #52]	; 0x34
 8004540:	e39b      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004542:	4b84      	ldr	r3, [pc, #528]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454e:	d106      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004556:	d102      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8004558:	4b80      	ldr	r3, [pc, #512]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	e38d      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800455e:	4b7d      	ldr	r3, [pc, #500]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b20      	cmp	r3, #32
 8004568:	d11b      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004570:	d117      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004572:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 800457e:	4b75      	ldr	r3, [pc, #468]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0e1b      	lsrs	r3, r3, #24
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800458a:	4b72      	ldr	r3, [pc, #456]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800458c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	0e1b      	lsrs	r3, r3, #24
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	4a6f      	ldr	r2, [pc, #444]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
 80045a0:	e36b      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
 80045a6:	e368      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80045a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ac:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80045b0:	430b      	orrs	r3, r1
 80045b2:	d164      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80045b4:	4b67      	ldr	r3, [pc, #412]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80045b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d120      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80045c6:	4b63      	ldr	r3, [pc, #396]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d117      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045d2:	4b60      	ldr	r3, [pc, #384]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80045de:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0e1b      	lsrs	r3, r3, #24
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	e006      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80045ea:	4b5a      	ldr	r3, [pc, #360]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80045ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	0e1b      	lsrs	r3, r3, #24
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80045fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004600:	e33b      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
 8004606:	e338      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004608:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800460a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800460e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004616:	d112      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d10e      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004620:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462e:	d102      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8004630:	23fa      	movs	r3, #250	; 0xfa
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004634:	e321      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004636:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800463c:	e31d      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800463e:	4b45      	ldr	r3, [pc, #276]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d106      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004652:	d102      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8004654:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	e30f      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800465a:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800465c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d107      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466e:	d103      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8004670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	e300      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
 800467c:	e2fd      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800467e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004682:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004686:	430b      	orrs	r3, r1
 8004688:	d16a      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800468a:	4b32      	ldr	r3, [pc, #200]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800468c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004694:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d120      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d117      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046a8:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	0e1b      	lsrs	r3, r3, #24
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	e006      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	0e1b      	lsrs	r3, r3, #24
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80046d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
 80046d6:	e2d0      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	e2cd      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ec:	d112      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f4:	d10e      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80046f6:	4b17      	ldr	r3, [pc, #92]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80046f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004704:	d102      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8004706:	23fa      	movs	r3, #250	; 0xfa
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800470a:	e2b6      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800470c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004712:	e2b2      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004720:	d106      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d102      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	e2a4      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d107      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004744:	d103      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
 800474c:	e295      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
 8004752:	e292      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004754:	46020c00 	.word	0x46020c00
 8004758:	0800968c 	.word	0x0800968c
 800475c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004764:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004768:	430b      	orrs	r3, r1
 800476a:	d147      	bne.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800476c:	4b9a      	ldr	r3, [pc, #616]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800476e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004772:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004776:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800477e:	f7fd ff11 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8004782:	6378      	str	r0, [r7, #52]	; 0x34
 8004784:	e279      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004786:	4b94      	ldr	r3, [pc, #592]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004794:	d112      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800479c:	d10e      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800479e:	4b8e      	ldr	r3, [pc, #568]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80047a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ac:	d102      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 80047ae:	23fa      	movs	r3, #250	; 0xfa
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80047b2:	e262      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80047b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80047ba:	e25e      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80047bc:	4b86      	ldr	r3, [pc, #536]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c8:	d106      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047d0:	d102      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 80047d2:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
 80047d6:	e250      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80047d8:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80047da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d107      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047ec:	d103      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 80047ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
 80047f4:	e241      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	e23e      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80047fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004800:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004804:	430b      	orrs	r3, r1
 8004806:	d12d      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004808:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800480a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800480e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004812:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004814:	4b70      	ldr	r3, [pc, #448]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004820:	d105      	bne.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8004828:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	e225      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004834:	d107      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fcb2 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
 8004844:	e219      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484c:	d107      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800484e:	f107 0318 	add.w	r3, r7, #24
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fe0e 	bl	8003474 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
 800485c:	e20d      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
 8004862:	e20a      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004868:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800486c:	430b      	orrs	r3, r1
 800486e:	d156      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004870:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004876:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004882:	d028      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800488a:	d845      	bhi.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004892:	d013      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489a:	d83d      	bhi.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a8:	d004      	beq.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 80048aa:	e035      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fd fe8e 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80048b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80048b2:	e1e2      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80048b4:	f7fd fd54 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 80048b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80048ba:	e1de      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048bc:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d102      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 80048ca:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80048cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80048ce:	e1d4      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048d4:	e1d1      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d117      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0e1b      	lsrs	r3, r3, #24
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80048fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	0e1b      	lsrs	r3, r3, #24
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	4a35      	ldr	r2, [pc, #212]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004910:	e1b3      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004916:	e1b0      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800491c:	e1ad      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800491e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004922:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004926:	430b      	orrs	r3, r1
 8004928:	d15c      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800492a:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800492c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004934:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800493c:	d028      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004944:	d845      	bhi.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800494c:	d013      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004954:	d83d      	bhi.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004962:	d004      	beq.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8004964:	e035      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004966:	f7fd fe1d 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 800496a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800496c:	e185      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800496e:	f7fd fcf7 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8004972:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004974:	e181      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d102      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004988:	e177      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800498e:	e174      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d117      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	0e1b      	lsrs	r3, r3, #24
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	e006      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80049b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80049c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80049ca:	e156      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d0:	e153      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d6:	e150      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80049d8:	46020c00 	.word	0x46020c00
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	0800968c 	.word	0x0800968c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80049e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e8:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80049ec:	430b      	orrs	r3, r1
 80049ee:	d176      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80049f0:	4ba4      	ldr	r3, [pc, #656]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80049f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049f6:	f003 0318 	and.w	r3, r3, #24
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	2b18      	cmp	r3, #24
 8004a00:	d86a      	bhi.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a6d 	.word	0x08004a6d
 8004a0c:	08004ad9 	.word	0x08004ad9
 8004a10:	08004ad9 	.word	0x08004ad9
 8004a14:	08004ad9 	.word	0x08004ad9
 8004a18:	08004ad9 	.word	0x08004ad9
 8004a1c:	08004ad9 	.word	0x08004ad9
 8004a20:	08004ad9 	.word	0x08004ad9
 8004a24:	08004ad9 	.word	0x08004ad9
 8004a28:	08004a75 	.word	0x08004a75
 8004a2c:	08004ad9 	.word	0x08004ad9
 8004a30:	08004ad9 	.word	0x08004ad9
 8004a34:	08004ad9 	.word	0x08004ad9
 8004a38:	08004ad9 	.word	0x08004ad9
 8004a3c:	08004ad9 	.word	0x08004ad9
 8004a40:	08004ad9 	.word	0x08004ad9
 8004a44:	08004ad9 	.word	0x08004ad9
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004ad9 	.word	0x08004ad9
 8004a50:	08004ad9 	.word	0x08004ad9
 8004a54:	08004ad9 	.word	0x08004ad9
 8004a58:	08004ad9 	.word	0x08004ad9
 8004a5c:	08004ad9 	.word	0x08004ad9
 8004a60:	08004ad9 	.word	0x08004ad9
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004a97 	.word	0x08004a97
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004a6c:	f7fd fdc2 	bl	80025f4 <HAL_RCC_GetPCLK3Freq>
 8004a70:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a72:	e102      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004a74:	f7fd fc74 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8004a78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a7a:	e0fe      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a7c:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a88:	d102      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8004a8a:	4b7f      	ldr	r3, [pc, #508]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a8e:	e0f4      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a94:	e0f1      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a96:	4b7b      	ldr	r3, [pc, #492]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d117      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004aa2:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8004aae:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0e1b      	lsrs	r3, r3, #24
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	e006      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8004aba:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	0e1b      	lsrs	r3, r3, #24
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	4a70      	ldr	r2, [pc, #448]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8004aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ad0:	e0d3      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ad6:	e0d0      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004adc:	e0cd      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8004ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	d155      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004aea:	4b66      	ldr	r3, [pc, #408]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004af0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004afc:	d013      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b04:	d844      	bhi.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b0c:	d013      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b14:	d83c      	bhi.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d014      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b22:	d014      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8004b24:	e034      	b.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b26:	f107 0318 	add.w	r3, r7, #24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fca2 	bl	8003474 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b34:	e0a1      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fb32 	bl	80031a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b44:	e099      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fd fc0b 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8004b4a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004b4c:	e095      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b4e:	4b4d      	ldr	r3, [pc, #308]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d117      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8004b66:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0e1b      	lsrs	r3, r3, #24
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	e006      	b.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8004b72:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	0e1b      	lsrs	r3, r3, #24
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	4a42      	ldr	r2, [pc, #264]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8004b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b88:	e077      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b8e:	e074      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b94:	e071      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8004b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	d131      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004bae:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d106      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc8:	e057      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd8:	d112      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be0:	d10e      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf0:	d102      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8004bf2:	23fa      	movs	r3, #250	; 0xfa
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bf6:	e040      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004bf8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bfe:	e03c      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
 8004c04:	e039      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8004c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c0a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	d131      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004c1e:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
 8004c36:	e020      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c44:	d106      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
 8004c52:	e012      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d106      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c68:	d102      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6e:	e004      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
 8004c74:	e001      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3738      	adds	r7, #56	; 0x38
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	46020c00 	.word	0x46020c00
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	0800968c 	.word	0x0800968c
 8004c90:	02dc6c00 	.word	0x02dc6c00
 8004c94:	016e3600 	.word	0x016e3600

08004c98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004ca0:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a46      	ldr	r2, [pc, #280]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004caa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cac:	f7fb ff12 	bl	8000ad4 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb2:	e008      	b.n	8004cc6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cb4:	f7fb ff0e 	bl	8000ad4 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e077      	b.n	8004db6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6811      	ldr	r1, [r2, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6852      	ldr	r2, [r2, #4]
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	0212      	lsls	r2, r2, #8
 8004cea:	430a      	orrs	r2, r1
 8004cec:	4934      	ldr	r1, [pc, #208]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004cf2:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <RCCEx_PLL2_Config+0x12c>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6892      	ldr	r2, [r2, #8]
 8004cfe:	3a01      	subs	r2, #1
 8004d00:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68d2      	ldr	r2, [r2, #12]
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	0252      	lsls	r2, r2, #9
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	4311      	orrs	r1, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6912      	ldr	r2, [r2, #16]
 8004d14:	3a01      	subs	r2, #1
 8004d16:	0412      	lsls	r2, r2, #16
 8004d18:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6952      	ldr	r2, [r2, #20]
 8004d22:	3a01      	subs	r2, #1
 8004d24:	0612      	lsls	r2, r2, #24
 8004d26:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	4924      	ldr	r1, [pc, #144]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f023 020c 	bic.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4920      	ldr	r1, [pc, #128]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	491c      	ldr	r1, [pc, #112]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004d52:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	69d2      	ldr	r2, [r2, #28]
 8004d6e:	00d2      	lsls	r2, r2, #3
 8004d70:	4913      	ldr	r1, [pc, #76]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d7c:	f043 0310 	orr.w	r3, r3, #16
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d8e:	f7fb fea1 	bl	8000ad4 <HAL_GetTick>
 8004d92:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d96:	f7fb fe9d 	bl	8000ad4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e006      	b.n	8004db6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <RCCEx_PLL2_Config+0x128>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0

}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	46020c00 	.word	0x46020c00
 8004dc4:	80800000 	.word	0x80800000

08004dc8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004dd0:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a46      	ldr	r2, [pc, #280]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ddc:	f7fb fe7a 	bl	8000ad4 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de2:	e008      	b.n	8004df6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004de4:	f7fb fe76 	bl	8000ad4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e077      	b.n	8004ee6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df6:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004e02:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6811      	ldr	r1, [r2, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	3a01      	subs	r2, #1
 8004e18:	0212      	lsls	r2, r2, #8
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	4934      	ldr	r1, [pc, #208]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	630b      	str	r3, [r1, #48]	; 0x30
 8004e22:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	4b33      	ldr	r3, [pc, #204]	; (8004ef4 <RCCEx_PLL3_Config+0x12c>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68d2      	ldr	r2, [r2, #12]
 8004e38:	3a01      	subs	r2, #1
 8004e3a:	0252      	lsls	r2, r2, #9
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	4311      	orrs	r1, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6912      	ldr	r2, [r2, #16]
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0412      	lsls	r2, r2, #16
 8004e48:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6952      	ldr	r2, [r2, #20]
 8004e52:	3a01      	subs	r2, #1
 8004e54:	0612      	lsls	r2, r2, #24
 8004e56:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	4924      	ldr	r1, [pc, #144]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004e62:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f023 020c 	bic.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	4920      	ldr	r1, [pc, #128]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	491c      	ldr	r1, [pc, #112]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e88:	f023 0310 	bic.w	r3, r3, #16
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e8e:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	69d2      	ldr	r2, [r2, #28]
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	4913      	ldr	r1, [pc, #76]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004eac:	f043 0310 	orr.w	r3, r3, #16
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ebe:	f7fb fe09 	bl	8000ad4 <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec4:	e008      	b.n	8004ed8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec6:	f7fb fe05 	bl	8000ad4 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e006      	b.n	8004ee6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <RCCEx_PLL3_Config+0x128>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	46020c00 	.word	0x46020c00
 8004ef4:	80800000 	.word	0x80800000

08004ef8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e075      	b.n	8004ff6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fb fc43 	bl	80007a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2204      	movs	r2, #4
 8004f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f868 	bl	8005000 <HAL_SD_InitCard>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e05d      	b.n	8004ff6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fdb5 	bl	8005ab0 <HAL_SD_GetCardStatus>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e052      	b.n	8004ff6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004f50:	7e3b      	ldrb	r3, [r7, #24]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004f56:	7e7b      	ldrb	r3, [r7, #25]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d10a      	bne.n	8004f7a <HAL_SD_Init+0x82>
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <HAL_SD_Init+0x78>
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f76:	659a      	str	r2, [r3, #88]	; 0x58
 8004f78:	e00b      	b.n	8004f92 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d104      	bne.n	8004f8c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f88:	659a      	str	r2, [r3, #88]	; 0x58
 8004f8a:	e002      	b.n	8004f92 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fe73 	bl	8005c84 <HAL_SD_ConfigWideBusOperation>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e026      	b.n	8004ff6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004fa8:	f7fb fd94 	bl	8000ad4 <HAL_GetTick>
 8004fac:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004fae:	e011      	b.n	8004fd4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004fb0:	f7fb fd90 	bl	8000ad4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fbe:	d109      	bne.n	8004fd4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fc6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 ff67 	bl	8005ea8 <HAL_SD_GetCardState>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d1e7      	bne.n	8004fb0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3728      	adds	r7, #40	; 0x28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b08d      	sub	sp, #52	; 0x34
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005018:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	f7fe fcf8 	bl	8003a14 <HAL_RCCEx_GetPeriphCLKFreq>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800503a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e070      	b.n	8005122 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	4a39      	ldr	r2, [pc, #228]	; (800512c <HAL_SD_InitCard+0x12c>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681c      	ldr	r4, [r3, #0]
 8005052:	466a      	mov	r2, sp
 8005054:	f107 0318 	add.w	r3, r7, #24
 8005058:	e893 0003 	ldmia.w	r3, {r0, r1}
 800505c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005060:	f107 030c 	add.w	r3, r7, #12
 8005064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005066:	4620      	mov	r0, r4
 8005068:	f001 faf8 	bl	800665c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fb3b 	bl	80066ec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800508e:	4a28      	ldr	r2, [pc, #160]	; (8005130 <HAL_SD_InitCard+0x130>)
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	3301      	adds	r3, #1
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fd27 	bl	8000aec <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fff0 	bl	8006084 <SD_PowerON>
 80050a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e02e      	b.n	8005122 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 ff0f 	bl	8005ee8 <SD_InitCard>
 80050ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e01b      	b.n	8005122 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 fb90 	bl	8006818 <SDMMC_CmdBlockLength>
 80050f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <HAL_SD_InitCard+0x134>)
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	372c      	adds	r7, #44	; 0x2c
 8005126:	46bd      	mov	sp, r7
 8005128:	bd90      	pop	{r4, r7, pc}
 800512a:	bf00      	nop
 800512c:	014f8b59 	.word	0x014f8b59
 8005130:	00012110 	.word	0x00012110
 8005134:	1fe00fff 	.word	0x1fe00fff

08005138 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b092      	sub	sp, #72	; 0x48
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005146:	f7fb fcc5 	bl	8000ad4 <HAL_GetTick>
 800514a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e167      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	f040 815a 	bne.w	800542c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800517e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	441a      	add	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	429a      	cmp	r2, r3
 800518a:	d907      	bls.n	800519c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e14e      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2203      	movs	r2, #3
 80051a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2200      	movs	r2, #0
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d002      	beq.n	80051ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	025b      	lsls	r3, r3, #9
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	025b      	lsls	r3, r3, #9
 80051c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80051c6:	2390      	movs	r3, #144	; 0x90
 80051c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051ca:	2302      	movs	r3, #2
 80051cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f107 0214 	add.w	r2, r7, #20
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f001 faed 	bl	80067c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d90a      	bls.n	8005212 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2202      	movs	r2, #2
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fb4b 	bl	80068a4 <SDMMC_CmdReadMultiBlock>
 800520e:	6478      	str	r0, [r7, #68]	; 0x44
 8005210:	e009      	b.n	8005226 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fb1d 	bl	800685e <SDMMC_CmdReadSingleBlock>
 8005224:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005228:	2b00      	cmp	r3, #0
 800522a:	d012      	beq.n	8005252 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a84      	ldr	r2, [pc, #528]	; (8005444 <HAL_SD_ReadBlocks+0x30c>)
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523a:	431a      	orrs	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0f3      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005256:	e058      	b.n	800530a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d033      	beq.n	80052ce <HAL_SD_ReadBlocks+0x196>
 8005266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005268:	2b1f      	cmp	r3, #31
 800526a:	d930      	bls.n	80052ce <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800526c:	2300      	movs	r3, #0
 800526e:	643b      	str	r3, [r7, #64]	; 0x40
 8005270:	e027      	b.n	80052c2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f001 fa1a 	bl	80066b0 <SDMMC_ReadFIFO>
 800527c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	3301      	adds	r3, #1
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	3301      	adds	r3, #1
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	3301      	adds	r3, #1
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	0e1b      	lsrs	r3, r3, #24
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b8:	3301      	adds	r3, #1
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	3301      	adds	r3, #1
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	2b07      	cmp	r3, #7
 80052c6:	d9d4      	bls.n	8005272 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	3b20      	subs	r3, #32
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80052ce:	f7fb fc01 	bl	8000ad4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052da:	429a      	cmp	r2, r3
 80052dc:	d902      	bls.n	80052e4 <HAL_SD_ReadBlocks+0x1ac>
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d112      	bne.n	800530a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a56      	ldr	r2, [pc, #344]	; (8005444 <HAL_SD_ReadBlocks+0x30c>)
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e097      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005314:	2b00      	cmp	r3, #0
 8005316:	d09f      	beq.n	8005258 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005326:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d022      	beq.n	800537c <HAL_SD_ReadBlocks+0x244>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d91f      	bls.n	800537c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	2b03      	cmp	r3, #3
 8005342:	d01b      	beq.n	800537c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fb15 	bl	8006978 <SDMMC_CmdStopTransfer>
 800534e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005352:	2b00      	cmp	r3, #0
 8005354:	d012      	beq.n	800537c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <HAL_SD_ReadBlocks+0x30c>)
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e05e      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d012      	beq.n	80053b0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <HAL_SD_ReadBlocks+0x30c>)
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	f043 0208 	orr.w	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e044      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d012      	beq.n	80053e4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a20      	ldr	r2, [pc, #128]	; (8005444 <HAL_SD_ReadBlocks+0x30c>)
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	f043 0202 	orr.w	r2, r3, #2
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e02a      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <HAL_SD_ReadBlocks+0x30c>)
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e010      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <HAL_SD_ReadBlocks+0x310>)
 800541e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e006      	b.n	800543a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3748      	adds	r7, #72	; 0x48
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	1fe00fff 	.word	0x1fe00fff
 8005448:	18000f3a 	.word	0x18000f3a

0800544c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b092      	sub	sp, #72	; 0x48
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800545a:	f7fb fb3b 	bl	8000ad4 <HAL_GetTick>
 800545e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e16b      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	f040 815e 	bne.w	8005748 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	429a      	cmp	r2, r3
 800549e:	d907      	bls.n	80054b0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e152      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2203      	movs	r2, #3
 80054b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2200      	movs	r2, #0
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d002      	beq.n	80054ce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	025b      	lsls	r3, r3, #9
 80054d8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80054da:	2390      	movs	r3, #144	; 0x90
 80054dc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f107 0218 	add.w	r2, r7, #24
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f963 	bl	80067c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005508:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d90a      	bls.n	8005526 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fa07 	bl	8006930 <SDMMC_CmdWriteMultiBlock>
 8005522:	6478      	str	r0, [r7, #68]	; 0x44
 8005524:	e009      	b.n	800553a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2210      	movs	r2, #16
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005532:	4618      	mov	r0, r3
 8005534:	f001 f9d9 	bl	80068ea <SDMMC_CmdWriteSingleBlock>
 8005538:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800553a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a86      	ldr	r2, [pc, #536]	; (8005760 <HAL_SD_WriteBlocks+0x314>)
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554e:	431a      	orrs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0f7      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800556a:	e05c      	b.n	8005626 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d037      	beq.n	80055ea <HAL_SD_WriteBlocks+0x19e>
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	2b1f      	cmp	r3, #31
 800557e:	d934      	bls.n	80055ea <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005580:	2300      	movs	r3, #0
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
 8005584:	e02b      	b.n	80055de <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	3301      	adds	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	021a      	lsls	r2, r3, #8
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	3301      	adds	r3, #1
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	041a      	lsls	r2, r3, #16
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	3301      	adds	r3, #1
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	061a      	lsls	r2, r3, #24
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	3301      	adds	r3, #1
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f107 0214 	add.w	r2, r7, #20
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 f879 	bl	80066ca <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80055d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055da:	3301      	adds	r3, #1
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
 80055de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e0:	2b07      	cmp	r3, #7
 80055e2:	d9d0      	bls.n	8005586 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80055e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e6:	3b20      	subs	r3, #32
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80055ea:	f7fb fa73 	bl	8000ad4 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d902      	bls.n	8005600 <HAL_SD_WriteBlocks+0x1b4>
 80055fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d112      	bne.n	8005626 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a56      	ldr	r2, [pc, #344]	; (8005760 <HAL_SD_WriteBlocks+0x314>)
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560e:	431a      	orrs	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e097      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005630:	2b00      	cmp	r3, #0
 8005632:	d09b      	beq.n	800556c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005642:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d022      	beq.n	8005698 <HAL_SD_WriteBlocks+0x24c>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d91f      	bls.n	8005698 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	2b03      	cmp	r3, #3
 800565e:	d01b      	beq.n	8005698 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f987 	bl	8006978 <SDMMC_CmdStopTransfer>
 800566a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800566c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566e:	2b00      	cmp	r3, #0
 8005670:	d012      	beq.n	8005698 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <HAL_SD_WriteBlocks+0x314>)
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e05e      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d012      	beq.n	80056cc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <HAL_SD_WriteBlocks+0x314>)
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	f043 0208 	orr.w	r2, r3, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e044      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a20      	ldr	r2, [pc, #128]	; (8005760 <HAL_SD_WriteBlocks+0x314>)
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	f043 0202 	orr.w	r2, r3, #2
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e02a      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a13      	ldr	r2, [pc, #76]	; (8005760 <HAL_SD_WriteBlocks+0x314>)
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	f043 0210 	orr.w	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e010      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <HAL_SD_WriteBlocks+0x318>)
 800573a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e006      	b.n	8005756 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3748      	adds	r7, #72	; 0x48
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	1fe00fff 	.word	0x1fe00fff
 8005764:	18000f3a 	.word	0x18000f3a

08005768 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	0f9b      	lsrs	r3, r3, #30
 8005778:	b2da      	uxtb	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	0e9b      	lsrs	r3, r3, #26
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	b2da      	uxtb	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005794:	0e1b      	lsrs	r3, r3, #24
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	b2da      	uxtb	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c8:	0d1b      	lsrs	r3, r3, #20
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e6:	0bdb      	lsrs	r3, r3, #15
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f8:	0b9b      	lsrs	r3, r3, #14
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	b2da      	uxtb	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580a:	0b5b      	lsrs	r3, r3, #13
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	b2da      	uxtb	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	0b1b      	lsrs	r3, r3, #12
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	b2da      	uxtb	r2, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2200      	movs	r2, #0
 800582e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d163      	bne.n	8005900 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	009a      	lsls	r2, r3, #2
 800583e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005842:	4013      	ands	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005848:	0f92      	lsrs	r2, r2, #30
 800584a:	431a      	orrs	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005854:	0edb      	lsrs	r3, r3, #27
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	b2da      	uxtb	r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005866:	0e1b      	lsrs	r3, r3, #24
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	b2da      	uxtb	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005878:	0d5b      	lsrs	r3, r3, #21
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	b2da      	uxtb	r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588a:	0c9b      	lsrs	r3, r3, #18
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	b2da      	uxtb	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589c:	0bdb      	lsrs	r3, r3, #15
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	7e1b      	ldrb	r3, [r3, #24]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	3302      	adds	r3, #2
 80058c0:	2201      	movs	r2, #1
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058ca:	fb03 f202 	mul.w	r2, r3, r2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	7a1b      	ldrb	r3, [r3, #8]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2201      	movs	r2, #1
 80058de:	409a      	lsls	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058ec:	0a52      	lsrs	r2, r2, #9
 80058ee:	fb03 f202 	mul.w	r2, r3, r2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
 80058fe:	e031      	b.n	8005964 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	2b01      	cmp	r3, #1
 8005906:	d11d      	bne.n	8005944 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	431a      	orrs	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	3301      	adds	r3, #1
 8005924:	029a      	lsls	r2, r3, #10
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005938:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
 8005942:	e00f      	b.n	8005964 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a58      	ldr	r2, [pc, #352]	; (8005aac <HAL_SD_GetCardCSD+0x344>)
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e09d      	b.n	8005aa0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005968:	0b9b      	lsrs	r3, r3, #14
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597a:	09db      	lsrs	r3, r3, #7
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005982:	b2da      	uxtb	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005992:	b2da      	uxtb	r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599c:	0fdb      	lsrs	r3, r3, #31
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a8:	0f5b      	lsrs	r3, r3, #29
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ba:	0e9b      	lsrs	r3, r3, #26
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059cc:	0d9b      	lsrs	r3, r3, #22
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059de:	0d5b      	lsrs	r3, r3, #21
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a0e:	0bdb      	lsrs	r3, r3, #15
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a22:	0b9b      	lsrs	r3, r3, #14
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a36:	0b5b      	lsrs	r3, r3, #13
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4a:	0b1b      	lsrs	r3, r3, #12
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a5e:	0a9b      	lsrs	r3, r3, #10
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	1fe00fff 	.word	0x1fe00fff

08005ab0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b094      	sub	sp, #80	; 0x50
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d101      	bne.n	8005ad0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0a7      	b.n	8005c20 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb62 	bl	80061a0 <SD_SendSDStatus>
 8005adc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a4f      	ldr	r2, [pc, #316]	; (8005c28 <HAL_SD_GetCardStatus+0x178>)
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005b06:	e070      	b.n	8005bea <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	099b      	lsrs	r3, r3, #6
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	0e1b      	lsrs	r3, r3, #24
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	061a      	lsls	r2, r3, #24
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b4e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b58:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0e1b      	lsrs	r3, r3, #24
 8005b5e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	0d1b      	lsrs	r3, r3, #20
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	0a9b      	lsrs	r3, r3, #10
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fe10 	bl	8006818 <SDMMC_CmdBlockLength>
 8005bf8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <HAL_SD_GetCardStatus+0x178>)
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005c1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3750      	adds	r7, #80	; 0x50
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	1fe00fff 	.word	0x1fe00fff

08005c2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b08d      	sub	sp, #52	; 0x34
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2203      	movs	r2, #3
 8005c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d02e      	beq.n	8005d02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005caa:	d106      	bne.n	8005cba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8005cb8:	e029      	b.n	8005d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb64 	bl	8006390 <SD_WideBus_Enable>
 8005cc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8005cd6:	e01a      	b.n	8005d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fba1 	bl	8006426 <SD_WideBus_Disable>
 8005ce4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8005cf2:	e00c      	b.n	8005d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8005d00:	e005      	b.n	8005d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a5f      	ldr	r2, [pc, #380]	; (8005e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d24:	e096      	b.n	8005e54 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005d26:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005d2a:	f04f 0100 	mov.w	r1, #0
 8005d2e:	f7fd fe71 	bl	8003a14 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d32:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8083 	beq.w	8005e42 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4950      	ldr	r1, [pc, #320]	; (8005e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005d5a:	fba1 1303 	umull	r1, r3, r1, r3
 8005d5e:	0e1b      	lsrs	r3, r3, #24
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d303      	bcc.n	8005d6c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e05a      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d74:	d103      	bne.n	8005d7e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e051      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d126      	bne.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10e      	bne.n	8005dae <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4a43      	ldr	r2, [pc, #268]	; (8005ea0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d906      	bls.n	8005da6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	0e5b      	lsrs	r3, r3, #25
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e03d      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e039      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dba:	4a39      	ldr	r2, [pc, #228]	; (8005ea0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d906      	bls.n	8005dce <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4a36      	ldr	r2, [pc, #216]	; (8005e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	0e5b      	lsrs	r3, r3, #25
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e029      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e025      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10e      	bne.n	8005dfc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4a30      	ldr	r2, [pc, #192]	; (8005ea4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d906      	bls.n	8005df4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005dea:	fba2 2303 	umull	r2, r3, r2, r3
 8005dee:	0e1b      	lsrs	r3, r3, #24
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e016      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e012      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d906      	bls.n	8005e1c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	0e1b      	lsrs	r3, r3, #24
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e002      	b.n	8005e22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681c      	ldr	r4, [r3, #0]
 8005e26:	466a      	mov	r2, sp
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e30:	e882 0003 	stmia.w	r2, {r0, r1}
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fc0e 	bl	800665c <SDMMC_Init>
 8005e40:	e008      	b.n	8005e54 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fcdb 	bl	8006818 <SDMMC_CmdBlockLength>
 8005e62:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	372c      	adds	r7, #44	; 0x2c
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd90      	pop	{r4, r7, pc}
 8005e98:	1fe00fff 	.word	0x1fe00fff
 8005e9c:	55e63b89 	.word	0x55e63b89
 8005ea0:	02faf080 	.word	0x02faf080
 8005ea4:	017d7840 	.word	0x017d7840

08005ea8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa40 	bl	8006340 <SD_SendStatus>
 8005ec0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	0a5b      	lsrs	r3, r3, #9
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ede:	693b      	ldr	r3, [r7, #16]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b090      	sub	sp, #64	; 0x40
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005ef4:	f7fa fdee 	bl	8000ad4 <HAL_GetTick>
 8005ef8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fc05 	bl	800670e <SDMMC_GetPowerState>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f0e:	e0b5      	b.n	800607c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d02e      	beq.n	8005f76 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fe50 	bl	8006bc2 <SDMMC_CmdSendCID>
 8005f22:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <SD_InitCard+0x46>
    {
      return errorstate;
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	e0a6      	b.n	800607c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fc30 	bl	800679a <SDMMC_GetResponse>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2104      	movs	r1, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fc27 	bl	800679a <SDMMC_GetResponse>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2108      	movs	r1, #8
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fc1e 	bl	800679a <SDMMC_GetResponse>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	210c      	movs	r1, #12
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fc15 	bl	800679a <SDMMC_GetResponse>
 8005f70:	4602      	mov	r2, r0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d01d      	beq.n	8005fba <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8005f7e:	e019      	b.n	8005fb4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f107 020a 	add.w	r2, r7, #10
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fe58 	bl	8006c40 <SDMMC_CmdSetRelAdd>
 8005f90:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <SD_InitCard+0xb4>
      {
        return errorstate;
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	e06f      	b.n	800607c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8005f9c:	f7fa fd9a 	bl	8000ad4 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3287 	movw	r2, #4999	; 0x1387
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d902      	bls.n	8005fb4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8005fae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fb2:	e063      	b.n	800607c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8005fb4:	897b      	ldrh	r3, [r7, #10]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0e2      	beq.n	8005f80 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d036      	beq.n	8006030 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f000 fe12 	bl	8006c00 <SDMMC_CmdSendCSD>
 8005fdc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <SD_InitCard+0x100>
    {
      return errorstate;
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	e049      	b.n	800607c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fbd3 	bl	800679a <SDMMC_GetResponse>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2104      	movs	r1, #4
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fbca 	bl	800679a <SDMMC_GetResponse>
 8006006:	4602      	mov	r2, r0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2108      	movs	r1, #8
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fbc1 	bl	800679a <SDMMC_GetResponse>
 8006018:	4602      	mov	r2, r0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	210c      	movs	r1, #12
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fbb8 	bl	800679a <SDMMC_GetResponse>
 800602a:	4602      	mov	r2, r0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2104      	movs	r1, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fbaf 	bl	800679a <SDMMC_GetResponse>
 800603c:	4603      	mov	r3, r0
 800603e:	0d1a      	lsrs	r2, r3, #20
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006044:	f107 030c 	add.w	r3, r7, #12
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fb8c 	bl	8005768 <HAL_SD_GetCardCSD>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006056:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800605a:	e00f      	b.n	800607c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 fcc1 	bl	80069f0 <SDMMC_CmdSelDesel>
 800606e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <SD_InitCard+0x192>
  {
    return errorstate;
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	e000      	b.n	800607c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3740      	adds	r7, #64	; 0x40
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fcca 	bl	8006a36 <SDMMC_CmdGoIdleState>
 80060a2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	e072      	b.n	8006194 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fcdd 	bl	8006a72 <SDMMC_CmdOperCond>
 80060b8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c0:	d10d      	bne.n	80060de <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fcb2 	bl	8006a36 <SDMMC_CmdGoIdleState>
 80060d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <SD_PowerON+0x60>
    {
      return errorstate;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	e05a      	b.n	8006194 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d137      	bne.n	800615c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fcdd 	bl	8006ab2 <SDMMC_CmdAppCommand>
 80060f8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02d      	beq.n	800615c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006104:	e046      	b.n	8006194 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fcd0 	bl	8006ab2 <SDMMC_CmdAppCommand>
 8006112:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <SD_PowerON+0x9a>
    {
      return errorstate;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	e03a      	b.n	8006194 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	491e      	ldr	r1, [pc, #120]	; (800619c <SD_PowerON+0x118>)
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fce7 	bl	8006af8 <SDMMC_CmdAppOperCommand>
 800612a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006136:	e02d      	b.n	8006194 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb2b 	bl	800679a <SDMMC_GetResponse>
 8006144:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	0fdb      	lsrs	r3, r3, #31
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <SD_PowerON+0xce>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <SD_PowerON+0xd0>
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]

    count++;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	3301      	adds	r3, #1
 800615a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006162:	4293      	cmp	r3, r2
 8006164:	d802      	bhi.n	800616c <SD_PowerON+0xe8>
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0cc      	beq.n	8006106 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006172:	4293      	cmp	r3, r2
 8006174:	d902      	bls.n	800617c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800617a:	e00b      	b.n	8006194 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	c1100000 	.word	0xc1100000

080061a0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061aa:	f7fa fc93 	bl	8000ad4 <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 faed 	bl	800679a <SDMMC_GetResponse>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ca:	d102      	bne.n	80061d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061d0:	e0b0      	b.n	8006334 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2140      	movs	r1, #64	; 0x40
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fb1d 	bl	8006818 <SDMMC_CmdBlockLength>
 80061de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	e0a0      	b.n	8006334 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	041b      	lsls	r3, r3, #16
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f000 fc57 	bl	8006ab2 <SDMMC_CmdAppCommand>
 8006204:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	e08d      	b.n	8006334 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800621c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006222:	2360      	movs	r3, #96	; 0x60
 8006224:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006226:	2302      	movs	r3, #2
 8006228:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800622e:	2301      	movs	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f107 0208 	add.w	r2, r7, #8
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fabf 	bl	80067c0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fd3f 	bl	8006cca <SDMMC_CmdStatusRegister>
 800624c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02b      	beq.n	80062ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	e069      	b.n	8006334 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800626e:	2300      	movs	r3, #0
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	e00d      	b.n	8006290 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fa19 	bl	80066b0 <SDMMC_ReadFIFO>
 800627e:	4602      	mov	r2, r0
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	601a      	str	r2, [r3, #0]
        pData++;
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	3304      	adds	r3, #4
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	3301      	adds	r3, #1
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	2b07      	cmp	r3, #7
 8006294:	d9ee      	bls.n	8006274 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006296:	f7fa fc1d 	bl	8000ad4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a4:	d102      	bne.n	80062ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80062a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062aa:	e043      	b.n	8006334 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0d2      	beq.n	8006260 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80062c8:	2308      	movs	r3, #8
 80062ca:	e033      	b.n	8006334 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80062da:	2302      	movs	r3, #2
 80062dc:	e02a      	b.n	8006334 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d017      	beq.n	800631c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80062ec:	2320      	movs	r3, #32
 80062ee:	e021      	b.n	8006334 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 f9db 	bl	80066b0 <SDMMC_ReadFIFO>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	601a      	str	r2, [r3, #0]
    pData++;
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	3304      	adds	r3, #4
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006306:	f7fa fbe5 	bl	8000ad4 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006314:	d102      	bne.n	800631c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006316:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800631a:	e00b      	b.n	8006334 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e2      	bne.n	80062f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a03      	ldr	r2, [pc, #12]	; (800633c <SD_SendSDStatus+0x19c>)
 8006330:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3730      	adds	r7, #48	; 0x30
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	18000f3a 	.word	0x18000f3a

08006340 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006354:	e018      	b.n	8006388 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	041b      	lsls	r3, r3, #16
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fc8e 	bl	8006c84 <SDMMC_CmdSendStatus>
 8006368:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e009      	b.n	8006388 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fa0d 	bl	800679a <SDMMC_GetResponse>
 8006380:	4602      	mov	r2, r0
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f9f7 	bl	800679a <SDMMC_GetResponse>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b6:	d102      	bne.n	80063be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063bc:	e02f      	b.n	800641e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063be:	f107 030c 	add.w	r3, r7, #12
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f879 	bl	80064bc <SD_FindSCR>
 80063ca:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	e023      	b.n	800641e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01c      	beq.n	800641a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f000 fb60 	bl	8006ab2 <SDMMC_CmdAppCommand>
 80063f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	e00f      	b.n	800641e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2102      	movs	r1, #2
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fb97 	bl	8006b38 <SDMMC_CmdBusWidth>
 800640a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	e003      	b.n	800641e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006416:	2300      	movs	r3, #0
 8006418:	e001      	b.n	800641e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800641a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2100      	movs	r1, #0
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f9ac 	bl	800679a <SDMMC_GetResponse>
 8006442:	4603      	mov	r3, r0
 8006444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800644c:	d102      	bne.n	8006454 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800644e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006452:	e02f      	b.n	80064b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006454:	f107 030c 	add.w	r3, r7, #12
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f82e 	bl	80064bc <SD_FindSCR>
 8006460:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	e023      	b.n	80064b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01c      	beq.n	80064b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f000 fb15 	bl	8006ab2 <SDMMC_CmdAppCommand>
 8006488:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	e00f      	b.n	80064b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fb4c 	bl	8006b38 <SDMMC_CmdBusWidth>
 80064a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	e003      	b.n	80064b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e001      	b.n	80064b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08e      	sub	sp, #56	; 0x38
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80064c6:	f7fa fb05 	bl	8000ad4 <HAL_GetTick>
 80064ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80064d0:	2300      	movs	r3, #0
 80064d2:	60bb      	str	r3, [r7, #8]
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2108      	movs	r1, #8
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f998 	bl	8006818 <SDMMC_CmdBlockLength>
 80064e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	e0ad      	b.n	8006650 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f000 fad6 	bl	8006ab2 <SDMMC_CmdAppCommand>
 8006506:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <SD_FindSCR+0x56>
  {
    return errorstate;
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	e09e      	b.n	8006650 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006516:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006518:	2308      	movs	r3, #8
 800651a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800651c:	2330      	movs	r3, #48	; 0x30
 800651e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006520:	2302      	movs	r3, #2
 8006522:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006524:	2300      	movs	r3, #0
 8006526:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006528:	2301      	movs	r3, #1
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f107 0210 	add.w	r2, r7, #16
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f942 	bl	80067c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fb1c 	bl	8006b7e <SDMMC_CmdSendSCR>
 8006546:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d027      	beq.n	800659e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	e07e      	b.n	8006650 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <SD_FindSCR+0xcc>
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	d110      	bne.n	8006588 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f8a0 	bl	80066b0 <SDMMC_ReadFIFO>
 8006570:	4603      	mov	r3, r0
 8006572:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f899 	bl	80066b0 <SDMMC_ReadFIFO>
 800657e:	4603      	mov	r3, r0
 8006580:	60fb      	str	r3, [r7, #12]
      index++;
 8006582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006584:	3301      	adds	r3, #1
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006588:	f7fa faa4 	bl	8000ad4 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006596:	d102      	bne.n	800659e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800659c:	e058      	b.n	8006650 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a4:	f240 532a 	movw	r3, #1322	; 0x52a
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0d1      	beq.n	8006552 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2208      	movs	r2, #8
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80065c4:	2308      	movs	r3, #8
 80065c6:	e043      	b.n	8006650 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2202      	movs	r2, #2
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	e036      	b.n	8006650 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2220      	movs	r2, #32
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80065f8:	2320      	movs	r3, #32
 80065fa:	e029      	b.n	8006650 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <SD_FindSCR+0x19c>)
 8006602:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	061a      	lsls	r2, r3, #24
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006610:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800661a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	0e1b      	lsrs	r3, r3, #24
 8006620:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	601a      	str	r2, [r3, #0]
    scr++;
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	3304      	adds	r3, #4
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	061a      	lsls	r2, r3, #24
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006638:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006642:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3738      	adds	r7, #56	; 0x38
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	18000f3a 	.word	0x18000f3a

0800665c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800665c:	b084      	sub	sp, #16
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	f107 001c 	add.w	r0, r7, #28
 800666a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006672:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006674:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006676:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800667a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800667e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8006682:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <SDMMC_Init+0x50>)
 8006690:	4013      	ands	r3, r2
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	b004      	add	sp, #16
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	ffc02c00 	.word	0xffc02c00

080066b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f043 0203 	orr.w	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0303 	and.w	r3, r3, #3
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800674a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8006750:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006756:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <SDMMC_SendCommand+0x50>)
 8006764:	4013      	ands	r3, r2
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	fffee0c0 	.word	0xfffee0c0

08006780 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	b2db      	uxtb	r3, r3
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3314      	adds	r3, #20
 80067a8:	461a      	mov	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80067e6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80067ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80067f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800680a:	2300      	movs	r3, #0

}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006826:	2310      	movs	r3, #16
 8006828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800682a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800682e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800683a:	f107 0308 	add.w	r3, r7, #8
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ff73 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006846:	f241 3288 	movw	r2, #5000	; 0x1388
 800684a:	2110      	movs	r1, #16
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fa5f 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006854:	69fb      	ldr	r3, [r7, #28]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b088      	sub	sp, #32
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800686c:	2311      	movs	r3, #17
 800686e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800687a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800687e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff ff50 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800688c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006890:	2111      	movs	r1, #17
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa3c 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800689a:	69fb      	ldr	r3, [r7, #28]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80068b2:	2312      	movs	r3, #18
 80068b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068c6:	f107 0308 	add.w	r3, r7, #8
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff2d 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80068d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d6:	2112      	movs	r1, #18
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa19 	bl	8006d10 <SDMMC_GetCmdResp1>
 80068de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068e0:	69fb      	ldr	r3, [r7, #28]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b088      	sub	sp, #32
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80068f8:	2318      	movs	r3, #24
 80068fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800690a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800690c:	f107 0308 	add.w	r3, r7, #8
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ff0a 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006918:	f241 3288 	movw	r2, #5000	; 0x1388
 800691c:	2118      	movs	r1, #24
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9f6 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006926:	69fb      	ldr	r3, [r7, #28]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800693e:	2319      	movs	r3, #25
 8006940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800694c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006952:	f107 0308 	add.w	r3, r7, #8
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fee7 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800695e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006962:	2119      	movs	r1, #25
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9d3 	bl	8006d10 <SDMMC_GetCmdResp1>
 800696a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006984:	230c      	movs	r3, #12
 8006986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800698c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006996:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069b0:	f107 0308 	add.w	r3, r7, #8
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff feb8 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80069bc:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <SDMMC_CmdStopTransfer+0x74>)
 80069be:	210c      	movs	r1, #12
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f9a5 	bl	8006d10 <SDMMC_GetCmdResp1>
 80069c6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069da:	d101      	bne.n	80069e0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80069e0:	69fb      	ldr	r3, [r7, #28]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	05f5e100 	.word	0x05f5e100

080069f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80069fe:	2307      	movs	r3, #7
 8006a00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fe87 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a22:	2107      	movs	r1, #7
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f973 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b088      	sub	sp, #32
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff fe66 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fb97 	bl	8007194 <SDMMC_GetCmdError>
 8006a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a68:	69fb      	ldr	r3, [r7, #28]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a80:	2308      	movs	r3, #8
 8006a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a94:	f107 0308 	add.w	r3, r7, #8
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff fe46 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fb29 	bl	80070f8 <SDMMC_GetCmdResp7>
 8006aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b088      	sub	sp, #32
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006ac0:	2337      	movs	r3, #55	; 0x37
 8006ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fe26 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae4:	2137      	movs	r1, #55	; 0x37
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f912 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aee:	69fb      	ldr	r3, [r7, #28]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006b06:	2329      	movs	r3, #41	; 0x29
 8006b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fe03 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa2e 	bl	8006f88 <SDMMC_GetCmdResp3>
 8006b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006b46:	2306      	movs	r3, #6
 8006b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b5a:	f107 0308 	add.w	r3, r7, #8
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fde3 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	2106      	movs	r1, #6
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8cf 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b74:	69fb      	ldr	r3, [r7, #28]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006b8a:	2333      	movs	r3, #51	; 0x33
 8006b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b9e:	f107 0308 	add.w	r3, r7, #8
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fdc1 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bae:	2133      	movs	r1, #51	; 0x33
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f8ad 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b088      	sub	sp, #32
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006be0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff fd9f 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f980 	bl	8006ef4 <SDMMC_GetCmdResp2>
 8006bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006c0e:	2309      	movs	r3, #9
 8006c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fd7f 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f960 	bl	8006ef4 <SDMMC_GetCmdResp2>
 8006c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c36:	69fb      	ldr	r3, [r7, #28]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fd5f 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	2103      	movs	r1, #3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9c8 	bl	8007008 <SDMMC_GetCmdResp6>
 8006c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c92:	230d      	movs	r3, #13
 8006c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ca6:	f107 0308 	add.w	r3, r7, #8
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fd3d 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	210d      	movs	r1, #13
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f829 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b088      	sub	sp, #32
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006cd6:	230d      	movs	r3, #13
 8006cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ce8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fd1b 	bl	800672c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfa:	210d      	movs	r1, #13
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f807 	bl	8006d10 <SDMMC_GetCmdResp1>
 8006d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d04:	69fb      	ldr	r3, [r7, #28]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d1e:	4b70      	ldr	r3, [pc, #448]	; (8006ee0 <SDMMC_GetCmdResp1+0x1d0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a70      	ldr	r2, [pc, #448]	; (8006ee4 <SDMMC_GetCmdResp1+0x1d4>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	0a5a      	lsrs	r2, r3, #9
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	fb02 f303 	mul.w	r3, r2, r3
 8006d30:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	1e5a      	subs	r2, r3, #1
 8006d36:	61fa      	str	r2, [r7, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d40:	e0c9      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4b67      	ldr	r3, [pc, #412]	; (8006ee8 <SDMMC_GetCmdResp1+0x1d8>)
 8006d4c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0ef      	beq.n	8006d32 <SDMMC_GetCmdResp1+0x22>
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1ea      	bne.n	8006d32 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d6e:	2304      	movs	r3, #4
 8006d70:	e0b1      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0a6      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a58      	ldr	r2, [pc, #352]	; (8006eec <SDMMC_GetCmdResp1+0x1dc>)
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fcf6 	bl	8006780 <SDMMC_GetCommandResponse>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d001      	beq.n	8006da2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e099      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006da2:	2100      	movs	r1, #0
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fcf8 	bl	800679a <SDMMC_GetResponse>
 8006daa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <SDMMC_GetCmdResp1+0x1e0>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e08d      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	da02      	bge.n	8006dc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dc4:	e087      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006dd0:	2340      	movs	r3, #64	; 0x40
 8006dd2:	e080      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006dde:	2380      	movs	r3, #128	; 0x80
 8006de0:	e079      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006df0:	e071      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e00:	e069      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e10:	e061      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e20:	e059      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e30:	e051      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e40:	e049      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e50:	e041      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e60:	e039      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e70:	e031      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e80:	e029      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e90:	e021      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ea0:	e019      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006eb0:	e011      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ebc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ec0:	e009      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006ecc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ed0:	e001      	b.n	8006ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000004 	.word	0x20000004
 8006ee4:	10624dd3 	.word	0x10624dd3
 8006ee8:	00200045 	.word	0x00200045
 8006eec:	002000c5 	.word	0x002000c5
 8006ef0:	fdffe008 	.word	0xfdffe008

08006ef4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006efc:	4b1f      	ldr	r3, [pc, #124]	; (8006f7c <SDMMC_GetCmdResp2+0x88>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1f      	ldr	r2, [pc, #124]	; (8006f80 <SDMMC_GetCmdResp2+0x8c>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	0a5b      	lsrs	r3, r3, #9
 8006f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	60fa      	str	r2, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f20:	e026      	b.n	8006f70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ef      	beq.n	8006f12 <SDMMC_GetCmdResp2+0x1e>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1ea      	bne.n	8006f12 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f4e:	2304      	movs	r3, #4
 8006f50:	e00e      	b.n	8006f70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e003      	b.n	8006f70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <SDMMC_GetCmdResp2+0x90>)
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20000004 	.word	0x20000004
 8006f80:	10624dd3 	.word	0x10624dd3
 8006f84:	002000c5 	.word	0x002000c5

08006f88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <SDMMC_GetCmdResp3+0x74>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1a      	ldr	r2, [pc, #104]	; (8007000 <SDMMC_GetCmdResp3+0x78>)
 8006f96:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9a:	0a5b      	lsrs	r3, r3, #9
 8006f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa0:	fb02 f303 	mul.w	r3, r2, r3
 8006fa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1e5a      	subs	r2, r3, #1
 8006faa:	60fa      	str	r2, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb4:	e01b      	b.n	8006fee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0ef      	beq.n	8006fa6 <SDMMC_GetCmdResp3+0x1e>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1ea      	bne.n	8006fa6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fe2:	2304      	movs	r3, #4
 8006fe4:	e003      	b.n	8006fee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a06      	ldr	r2, [pc, #24]	; (8007004 <SDMMC_GetCmdResp3+0x7c>)
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000004 	.word	0x20000004
 8007000:	10624dd3 	.word	0x10624dd3
 8007004:	002000c5 	.word	0x002000c5

08007008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	460b      	mov	r3, r1
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007016:	4b35      	ldr	r3, [pc, #212]	; (80070ec <SDMMC_GetCmdResp6+0xe4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a35      	ldr	r2, [pc, #212]	; (80070f0 <SDMMC_GetCmdResp6+0xe8>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	0a5b      	lsrs	r3, r3, #9
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	1e5a      	subs	r2, r3, #1
 8007030:	61fa      	str	r2, [r7, #28]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800703a:	e052      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007040:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ef      	beq.n	800702c <SDMMC_GetCmdResp6+0x24>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1ea      	bne.n	800702c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2204      	movs	r2, #4
 8007066:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007068:	2304      	movs	r3, #4
 800706a:	e03a      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800707e:	2301      	movs	r3, #1
 8007080:	e02f      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fb7c 	bl	8006780 <SDMMC_GetCommandResponse>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	4293      	cmp	r3, r2
 8007090:	d001      	beq.n	8007096 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007092:	2301      	movs	r3, #1
 8007094:	e025      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <SDMMC_GetCmdResp6+0xec>)
 800709a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fb7b 	bl	800679a <SDMMC_GetResponse>
 80070a4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	0c1b      	lsrs	r3, r3, #16
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e011      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070cc:	e009      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070dc:	e001      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3720      	adds	r7, #32
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000004 	.word	0x20000004
 80070f0:	10624dd3 	.word	0x10624dd3
 80070f4:	002000c5 	.word	0x002000c5

080070f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007100:	4b22      	ldr	r3, [pc, #136]	; (800718c <SDMMC_GetCmdResp7+0x94>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a22      	ldr	r2, [pc, #136]	; (8007190 <SDMMC_GetCmdResp7+0x98>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	0a5b      	lsrs	r3, r3, #9
 800710c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1e5a      	subs	r2, r3, #1
 800711a:	60fa      	str	r2, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007124:	e02c      	b.n	8007180 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0ef      	beq.n	8007116 <SDMMC_GetCmdResp7+0x1e>
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1ea      	bne.n	8007116 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2204      	movs	r2, #4
 8007150:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007152:	2304      	movs	r3, #4
 8007154:	e014      	b.n	8007180 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007168:	2301      	movs	r3, #1
 800716a:	e009      	b.n	8007180 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2240      	movs	r2, #64	; 0x40
 800717c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800717e:	2300      	movs	r3, #0

}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000004 	.word	0x20000004
 8007190:	10624dd3 	.word	0x10624dd3

08007194 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800719c:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <SDMMC_GetCmdError+0x50>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <SDMMC_GetCmdError+0x54>)
 80071a2:	fba2 2303 	umull	r2, r3, r2, r3
 80071a6:	0a5b      	lsrs	r3, r3, #9
 80071a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	1e5a      	subs	r2, r3, #1
 80071b6:	60fa      	str	r2, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071c0:	e009      	b.n	80071d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f1      	beq.n	80071b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a06      	ldr	r2, [pc, #24]	; (80071ec <SDMMC_GetCmdError+0x58>)
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20000004 	.word	0x20000004
 80071e8:	10624dd3 	.word	0x10624dd3
 80071ec:	002000c5 	.word	0x002000c5

080071f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	4a08      	ldr	r2, [pc, #32]	; (8007220 <disk_status+0x30>)
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	79fa      	ldrb	r2, [r7, #7]
 8007208:	4905      	ldr	r1, [pc, #20]	; (8007220 <disk_status+0x30>)
 800720a:	440a      	add	r2, r1
 800720c:	7a12      	ldrb	r2, [r2, #8]
 800720e:	4610      	mov	r0, r2
 8007210:	4798      	blx	r3
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	200000d8 	.word	0x200000d8

08007224 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	4a0e      	ldr	r2, [pc, #56]	; (8007270 <disk_initialize+0x4c>)
 8007236:	5cd3      	ldrb	r3, [r2, r3]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d114      	bne.n	8007266 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	4a0c      	ldr	r2, [pc, #48]	; (8007270 <disk_initialize+0x4c>)
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	79fa      	ldrb	r2, [r7, #7]
 800724a:	4909      	ldr	r1, [pc, #36]	; (8007270 <disk_initialize+0x4c>)
 800724c:	440a      	add	r2, r1
 800724e:	7a12      	ldrb	r2, [r2, #8]
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	4a03      	ldr	r2, [pc, #12]	; (8007270 <disk_initialize+0x4c>)
 8007262:	2101      	movs	r1, #1
 8007264:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	200000d8 	.word	0x200000d8

08007274 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <disk_read+0x3c>)
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	689c      	ldr	r4, [r3, #8]
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	4a07      	ldr	r2, [pc, #28]	; (80072b0 <disk_read+0x3c>)
 8007294:	4413      	add	r3, r2
 8007296:	7a18      	ldrb	r0, [r3, #8]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	47a0      	blx	r4
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}
 80072ae:	bf00      	nop
 80072b0:	200000d8 	.word	0x200000d8

080072b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <disk_write+0x3c>)
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68dc      	ldr	r4, [r3, #12]
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <disk_write+0x3c>)
 80072d4:	4413      	add	r3, r2
 80072d6:	7a18      	ldrb	r0, [r3, #8]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	47a0      	blx	r4
 80072e0:	4603      	mov	r3, r0
 80072e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd90      	pop	{r4, r7, pc}
 80072ee:	bf00      	nop
 80072f0:	200000d8 	.word	0x200000d8

080072f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	603a      	str	r2, [r7, #0]
 80072fe:	71fb      	strb	r3, [r7, #7]
 8007300:	460b      	mov	r3, r1
 8007302:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	4a09      	ldr	r2, [pc, #36]	; (800732c <disk_ioctl+0x38>)
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	79fa      	ldrb	r2, [r7, #7]
 8007312:	4906      	ldr	r1, [pc, #24]	; (800732c <disk_ioctl+0x38>)
 8007314:	440a      	add	r2, r1
 8007316:	7a10      	ldrb	r0, [r2, #8]
 8007318:	79b9      	ldrb	r1, [r7, #6]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
  return res;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200000d8 	.word	0x200000d8

08007330 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3301      	adds	r3, #1
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007340:	89fb      	ldrh	r3, [r7, #14]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	b21a      	sxth	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b21b      	sxth	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b21b      	sxth	r3, r3
 8007350:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007352:	89fb      	ldrh	r3, [r7, #14]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3303      	adds	r3, #3
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	3202      	adds	r2, #2
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	3201      	adds	r2, #1
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
	return rv;
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	887a      	ldrh	r2, [r7, #2]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	887b      	ldrh	r3, [r7, #2]
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	887a      	ldrh	r2, [r7, #2]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00d      	beq.n	800746a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	1c53      	adds	r3, r2, #1
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1c59      	adds	r1, r3, #1
 8007458:	6179      	str	r1, [r7, #20]
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3b01      	subs	r3, #1
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f1      	bne.n	800744e <mem_cpy+0x1a>
	}
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007476:	b480      	push	{r7}
 8007478:	b087      	sub	sp, #28
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	617a      	str	r2, [r7, #20]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3b01      	subs	r3, #1
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f3      	bne.n	8007486 <mem_set+0x10>
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80074ac:	b480      	push	{r7}
 80074ae:	b089      	sub	sp, #36	; 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	61fa      	str	r2, [r7, #28]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	4619      	mov	r1, r3
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	61ba      	str	r2, [r7, #24]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	1acb      	subs	r3, r1, r3
 80074d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3b01      	subs	r3, #1
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <mem_cmp+0x40>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0eb      	beq.n	80074c4 <mem_cmp+0x18>

	return r;
 80074ec:	697b      	ldr	r3, [r7, #20]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3724      	adds	r7, #36	; 0x24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007504:	e002      	b.n	800750c <chk_chr+0x12>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3301      	adds	r3, #1
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <chk_chr+0x26>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	4293      	cmp	r3, r2
 800751e:	d1f2      	bne.n	8007506 <chk_chr+0xc>
	return *str;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	781b      	ldrb	r3, [r3, #0]
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e029      	b.n	8007598 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007544:	4a27      	ldr	r2, [pc, #156]	; (80075e4 <chk_lock+0xb4>)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	4413      	add	r3, r2
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01d      	beq.n	800758e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007552:	4a24      	ldr	r2, [pc, #144]	; (80075e4 <chk_lock+0xb4>)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	4413      	add	r3, r2
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d116      	bne.n	8007592 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007564:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <chk_lock+0xb4>)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	4413      	add	r3, r2
 800756c:	3304      	adds	r3, #4
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007574:	429a      	cmp	r2, r3
 8007576:	d10c      	bne.n	8007592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007578:	4a1a      	ldr	r2, [pc, #104]	; (80075e4 <chk_lock+0xb4>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	4413      	add	r3, r2
 8007580:	3308      	adds	r3, #8
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007588:	429a      	cmp	r2, r3
 800758a:	d102      	bne.n	8007592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800758c:	e007      	b.n	800759e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800758e:	2301      	movs	r3, #1
 8007590:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d9d2      	bls.n	8007544 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d109      	bne.n	80075b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <chk_lock+0x80>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d101      	bne.n	80075b4 <chk_lock+0x84>
 80075b0:	2300      	movs	r3, #0
 80075b2:	e010      	b.n	80075d6 <chk_lock+0xa6>
 80075b4:	2312      	movs	r3, #18
 80075b6:	e00e      	b.n	80075d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <chk_lock+0xa0>
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <chk_lock+0xb4>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4413      	add	r3, r2
 80075c6:	330c      	adds	r3, #12
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ce:	d101      	bne.n	80075d4 <chk_lock+0xa4>
 80075d0:	2310      	movs	r3, #16
 80075d2:	e000      	b.n	80075d6 <chk_lock+0xa6>
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	200000b8 	.word	0x200000b8

080075e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	e002      	b.n	80075fa <enq_lock+0x12>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3301      	adds	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d806      	bhi.n	800760e <enq_lock+0x26>
 8007600:	4a09      	ldr	r2, [pc, #36]	; (8007628 <enq_lock+0x40>)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4413      	add	r3, r2
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f2      	bne.n	80075f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b02      	cmp	r3, #2
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	200000b8 	.word	0x200000b8

0800762c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	e01f      	b.n	800767c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800763c:	4a41      	ldr	r2, [pc, #260]	; (8007744 <inc_lock+0x118>)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4413      	add	r3, r2
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d113      	bne.n	8007676 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800764e:	4a3d      	ldr	r2, [pc, #244]	; (8007744 <inc_lock+0x118>)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	3304      	adds	r3, #4
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800765e:	429a      	cmp	r2, r3
 8007660:	d109      	bne.n	8007676 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007662:	4a38      	ldr	r2, [pc, #224]	; (8007744 <inc_lock+0x118>)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	4413      	add	r3, r2
 800766a:	3308      	adds	r3, #8
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007672:	429a      	cmp	r2, r3
 8007674:	d006      	beq.n	8007684 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d9dc      	bls.n	800763c <inc_lock+0x10>
 8007682:	e000      	b.n	8007686 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007684:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d132      	bne.n	80076f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <inc_lock+0x6c>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d806      	bhi.n	80076ac <inc_lock+0x80>
 800769e:	4a29      	ldr	r2, [pc, #164]	; (8007744 <inc_lock+0x118>)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	4413      	add	r3, r2
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f2      	bne.n	8007692 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d101      	bne.n	80076b6 <inc_lock+0x8a>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e040      	b.n	8007738 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4922      	ldr	r1, [pc, #136]	; (8007744 <inc_lock+0x118>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	440b      	add	r3, r1
 80076c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	491e      	ldr	r1, [pc, #120]	; (8007744 <inc_lock+0x118>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	440b      	add	r3, r1
 80076d0:	3304      	adds	r3, #4
 80076d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	491a      	ldr	r1, [pc, #104]	; (8007744 <inc_lock+0x118>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	440b      	add	r3, r1
 80076e0:	3308      	adds	r3, #8
 80076e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80076e4:	4a17      	ldr	r2, [pc, #92]	; (8007744 <inc_lock+0x118>)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	4413      	add	r3, r2
 80076ec:	330c      	adds	r3, #12
 80076ee:	2200      	movs	r2, #0
 80076f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <inc_lock+0xe0>
 80076f8:	4a12      	ldr	r2, [pc, #72]	; (8007744 <inc_lock+0x118>)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	4413      	add	r3, r2
 8007700:	330c      	adds	r3, #12
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <inc_lock+0xe0>
 8007708:	2300      	movs	r3, #0
 800770a:	e015      	b.n	8007738 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <inc_lock+0xf8>
 8007712:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <inc_lock+0x118>)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	4413      	add	r3, r2
 800771a:	330c      	adds	r3, #12
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	3301      	adds	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	e001      	b.n	8007728 <inc_lock+0xfc>
 8007724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007728:	4906      	ldr	r1, [pc, #24]	; (8007744 <inc_lock+0x118>)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	440b      	add	r3, r1
 8007730:	330c      	adds	r3, #12
 8007732:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	200000b8 	.word	0x200000b8

08007748 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3b01      	subs	r3, #1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d825      	bhi.n	80077a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800775c:	4a17      	ldr	r2, [pc, #92]	; (80077bc <dec_lock+0x74>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	4413      	add	r3, r2
 8007764:	330c      	adds	r3, #12
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007770:	d101      	bne.n	8007776 <dec_lock+0x2e>
 8007772:	2300      	movs	r3, #0
 8007774:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007776:	89fb      	ldrh	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <dec_lock+0x3a>
 800777c:	89fb      	ldrh	r3, [r7, #14]
 800777e:	3b01      	subs	r3, #1
 8007780:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007782:	4a0e      	ldr	r2, [pc, #56]	; (80077bc <dec_lock+0x74>)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	4413      	add	r3, r2
 800778a:	330c      	adds	r3, #12
 800778c:	89fa      	ldrh	r2, [r7, #14]
 800778e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007790:	89fb      	ldrh	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <dec_lock+0x5a>
 8007796:	4a09      	ldr	r2, [pc, #36]	; (80077bc <dec_lock+0x74>)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	4413      	add	r3, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	737b      	strb	r3, [r7, #13]
 80077a6:	e001      	b.n	80077ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80077a8:	2302      	movs	r3, #2
 80077aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80077ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	200000b8 	.word	0x200000b8

080077c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e010      	b.n	80077f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80077ce:	4a0d      	ldr	r2, [pc, #52]	; (8007804 <clear_lock+0x44>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	4413      	add	r3, r2
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d105      	bne.n	80077ea <clear_lock+0x2a>
 80077de:	4a09      	ldr	r2, [pc, #36]	; (8007804 <clear_lock+0x44>)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	4413      	add	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d9eb      	bls.n	80077ce <clear_lock+0xe>
	}
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	200000b8 	.word	0x200000b8

08007808 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d034      	beq.n	8007886 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	7858      	ldrb	r0, [r3, #1]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800782c:	2301      	movs	r3, #1
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	f7ff fd40 	bl	80072b4 <disk_write>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <sync_window+0x38>
			res = FR_DISK_ERR;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
 800783e:	e022      	b.n	8007886 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	429a      	cmp	r2, r3
 8007854:	d217      	bcs.n	8007886 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	789b      	ldrb	r3, [r3, #2]
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	e010      	b.n	8007880 <sync_window+0x78>
					wsect += fs->fsize;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4413      	add	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7858      	ldrb	r0, [r3, #1]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007872:	2301      	movs	r3, #1
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	f7ff fd1d 	bl	80072b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3b01      	subs	r3, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d8eb      	bhi.n	800785e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d01b      	beq.n	80078e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ffad 	bl	8007808 <sync_window>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d113      	bne.n	80078e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7858      	ldrb	r0, [r3, #1]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078c2:	2301      	movs	r3, #1
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	f7ff fcd5 	bl	8007274 <disk_read>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff ff87 	bl	8007808 <sync_window>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d158      	bne.n	80079b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d148      	bne.n	800799e <sync_fs+0xb2>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	791b      	ldrb	r3, [r3, #4]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d144      	bne.n	800799e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3330      	adds	r3, #48	; 0x30
 8007918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fda9 	bl	8007476 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3330      	adds	r3, #48	; 0x30
 8007928:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800792c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fd38 	bl	80073a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3330      	adds	r3, #48	; 0x30
 800793a:	4921      	ldr	r1, [pc, #132]	; (80079c0 <sync_fs+0xd4>)
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff fd4d 	bl	80073dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3330      	adds	r3, #48	; 0x30
 8007946:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800794a:	491e      	ldr	r1, [pc, #120]	; (80079c4 <sync_fs+0xd8>)
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff fd45 	bl	80073dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3330      	adds	r3, #48	; 0x30
 8007956:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7ff fd3b 	bl	80073dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3330      	adds	r3, #48	; 0x30
 800796a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7ff fd31 	bl	80073dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7858      	ldrb	r0, [r3, #1]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	2301      	movs	r3, #1
 8007994:	f7ff fc8e 	bl	80072b4 <disk_write>
			fs->fsi_flag = 0;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2200      	movs	r2, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fca4 	bl	80072f4 <disk_ioctl>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <sync_fs+0xca>
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	41615252 	.word	0x41615252
 80079c4:	61417272 	.word	0x61417272

080079c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	3b02      	subs	r3, #2
 80079d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	3b02      	subs	r3, #2
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d301      	bcc.n	80079e8 <clust2sect+0x20>
 80079e4:	2300      	movs	r3, #0
 80079e6:	e008      	b.n	80079fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	895b      	ldrh	r3, [r3, #10]
 80079ec:	461a      	mov	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	fb03 f202 	mul.w	r2, r3, r2
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	4413      	add	r3, r2
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d904      	bls.n	8007a26 <get_fat+0x20>
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d302      	bcc.n	8007a2c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007a26:	2301      	movs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	e08f      	b.n	8007b4c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d062      	beq.n	8007b00 <get_fat+0xfa>
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	dc7c      	bgt.n	8007b38 <get_fat+0x132>
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d002      	beq.n	8007a48 <get_fat+0x42>
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d042      	beq.n	8007acc <get_fat+0xc6>
 8007a46:	e077      	b.n	8007b38 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	0a5b      	lsrs	r3, r3, #9
 8007a5e:	4413      	add	r3, r2
 8007a60:	4619      	mov	r1, r3
 8007a62:	6938      	ldr	r0, [r7, #16]
 8007a64:	f7ff ff14 	bl	8007890 <move_window>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d167      	bne.n	8007b3e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	60fa      	str	r2, [r7, #12]
 8007a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	0a5b      	lsrs	r3, r3, #9
 8007a8a:	4413      	add	r3, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6938      	ldr	r0, [r7, #16]
 8007a90:	f7ff fefe 	bl	8007890 <move_window>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d153      	bne.n	8007b42 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <get_fat+0xbc>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	091b      	lsrs	r3, r3, #4
 8007ac0:	e002      	b.n	8007ac8 <get_fat+0xc2>
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac8:	617b      	str	r3, [r7, #20]
			break;
 8007aca:	e03f      	b.n	8007b4c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6938      	ldr	r0, [r7, #16]
 8007ada:	f7ff fed9 	bl	8007890 <move_window>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d130      	bne.n	8007b46 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007af2:	4413      	add	r3, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fc1b 	bl	8007330 <ld_word>
 8007afa:	4603      	mov	r3, r0
 8007afc:	617b      	str	r3, [r7, #20]
			break;
 8007afe:	e025      	b.n	8007b4c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	09db      	lsrs	r3, r3, #7
 8007b08:	4413      	add	r3, r2
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6938      	ldr	r0, [r7, #16]
 8007b0e:	f7ff febf 	bl	8007890 <move_window>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d118      	bne.n	8007b4a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b26:	4413      	add	r3, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fc19 	bl	8007360 <ld_dword>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b34:	617b      	str	r3, [r7, #20]
			break;
 8007b36:	e009      	b.n	8007b4c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e006      	b.n	8007b4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b3e:	bf00      	nop
 8007b40:	e004      	b.n	8007b4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b42:	bf00      	nop
 8007b44:	e002      	b.n	8007b4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b4a:	bf00      	nop
		}
	}

	return val;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b56:	b590      	push	{r4, r7, lr}
 8007b58:	b089      	sub	sp, #36	; 0x24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b62:	2302      	movs	r3, #2
 8007b64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	f240 80d2 	bls.w	8007d12 <put_fat+0x1bc>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	f080 80cc 	bcs.w	8007d12 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	f000 8096 	beq.w	8007cb0 <put_fat+0x15a>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	f300 80cd 	bgt.w	8007d24 <put_fat+0x1ce>
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d002      	beq.n	8007b94 <put_fat+0x3e>
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d06e      	beq.n	8007c70 <put_fat+0x11a>
 8007b92:	e0c7      	b.n	8007d24 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1a      	ldr	r2, [r3, #32]
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	0a5b      	lsrs	r3, r3, #9
 8007baa:	4413      	add	r3, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fe6e 	bl	8007890 <move_window>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bb8:	7ffb      	ldrb	r3, [r7, #31]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 80ab 	bne.w	8007d16 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	1c59      	adds	r1, r3, #1
 8007bca:	61b9      	str	r1, [r7, #24]
 8007bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd0:	4413      	add	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00d      	beq.n	8007bfa <put_fat+0xa4>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b25b      	sxtb	r3, r3
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	b25a      	sxtb	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	b25b      	sxtb	r3, r3
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b25b      	sxtb	r3, r3
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	e001      	b.n	8007bfe <put_fat+0xa8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	0a5b      	lsrs	r3, r3, #9
 8007c10:	4413      	add	r3, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fe3b 	bl	8007890 <move_window>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c1e:	7ffb      	ldrb	r3, [r7, #31]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d17a      	bne.n	8007d1a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c30:	4413      	add	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <put_fat+0xf0>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	091b      	lsrs	r3, r3, #4
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	e00e      	b.n	8007c64 <put_fat+0x10e>
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b25b      	sxtb	r3, r3
 8007c4c:	f023 030f 	bic.w	r3, r3, #15
 8007c50:	b25a      	sxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	0a1b      	lsrs	r3, r3, #8
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b25b      	sxtb	r3, r3
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	70da      	strb	r2, [r3, #3]
			break;
 8007c6e:	e059      	b.n	8007d24 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	4413      	add	r3, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff fe07 	bl	8007890 <move_window>
 8007c82:	4603      	mov	r3, r0
 8007c84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d148      	bne.n	8007d1e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007c9a:	4413      	add	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	b292      	uxth	r2, r2
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fb7f 	bl	80073a6 <st_word>
			fs->wflag = 1;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	70da      	strb	r2, [r3, #3]
			break;
 8007cae:	e039      	b.n	8007d24 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	09db      	lsrs	r3, r3, #7
 8007cb8:	4413      	add	r3, r2
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fde7 	bl	8007890 <move_window>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cc6:	7ffb      	ldrb	r3, [r7, #31]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d12a      	bne.n	8007d22 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ce0:	4413      	add	r3, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fb3c 	bl	8007360 <ld_dword>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007cee:	4323      	orrs	r3, r4
 8007cf0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007d00:	4413      	add	r3, r2
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff fb69 	bl	80073dc <st_dword>
			fs->wflag = 1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	70da      	strb	r2, [r3, #3]
			break;
 8007d10:	e008      	b.n	8007d24 <put_fat+0x1ce>
		}
	}
 8007d12:	bf00      	nop
 8007d14:	e006      	b.n	8007d24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007d16:	bf00      	nop
 8007d18:	e004      	b.n	8007d24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007d1a:	bf00      	nop
 8007d1c:	e002      	b.n	8007d24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007d22:	bf00      	nop
	return res;
 8007d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3724      	adds	r7, #36	; 0x24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd90      	pop	{r4, r7, pc}

08007d2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b088      	sub	sp, #32
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d904      	bls.n	8007d54 <remove_chain+0x26>
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d301      	bcc.n	8007d58 <remove_chain+0x2a>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e04b      	b.n	8007df0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00c      	beq.n	8007d78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	69b8      	ldr	r0, [r7, #24]
 8007d66:	f7ff fef6 	bl	8007b56 <put_fat>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d6e:	7ffb      	ldrb	r3, [r7, #31]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <remove_chain+0x4a>
 8007d74:	7ffb      	ldrb	r3, [r7, #31]
 8007d76:	e03b      	b.n	8007df0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff fe43 	bl	8007a06 <get_fat>
 8007d80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d031      	beq.n	8007dec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <remove_chain+0x64>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e02e      	b.n	8007df0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d98:	d101      	bne.n	8007d9e <remove_chain+0x70>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e028      	b.n	8007df0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d9e:	2200      	movs	r2, #0
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	69b8      	ldr	r0, [r7, #24]
 8007da4:	f7ff fed7 	bl	8007b56 <put_fat>
 8007da8:	4603      	mov	r3, r0
 8007daa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007dac:	7ffb      	ldrb	r3, [r7, #31]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <remove_chain+0x88>
 8007db2:	7ffb      	ldrb	r3, [r7, #31]
 8007db4:	e01c      	b.n	8007df0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	3b02      	subs	r3, #2
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d20b      	bcs.n	8007ddc <remove_chain+0xae>
			fs->free_clst++;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	791b      	ldrb	r3, [r3, #4]
 8007dd2:	f043 0301 	orr.w	r3, r3, #1
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d3c6      	bcc.n	8007d78 <remove_chain+0x4a>
 8007dea:	e000      	b.n	8007dee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007dec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3720      	adds	r7, #32
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <create_chain+0x2c>
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d31b      	bcc.n	8007e5c <create_chain+0x64>
 8007e24:	2301      	movs	r3, #1
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	e018      	b.n	8007e5c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff fdea 	bl	8007a06 <get_fat>
 8007e32:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d801      	bhi.n	8007e3e <create_chain+0x46>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e070      	b.n	8007f20 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e44:	d101      	bne.n	8007e4a <create_chain+0x52>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	e06a      	b.n	8007f20 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d201      	bcs.n	8007e58 <create_chain+0x60>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	e063      	b.n	8007f20 <create_chain+0x128>
		scl = clst;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	3301      	adds	r3, #1
 8007e64:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d307      	bcc.n	8007e80 <create_chain+0x88>
				ncl = 2;
 8007e70:	2302      	movs	r3, #2
 8007e72:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d901      	bls.n	8007e80 <create_chain+0x88>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e04f      	b.n	8007f20 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e80:	69f9      	ldr	r1, [r7, #28]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fdbf 	bl	8007a06 <get_fat>
 8007e88:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00e      	beq.n	8007eae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d003      	beq.n	8007e9e <create_chain+0xa6>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e9c:	d101      	bne.n	8007ea2 <create_chain+0xaa>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	e03e      	b.n	8007f20 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d1da      	bne.n	8007e60 <create_chain+0x68>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e038      	b.n	8007f20 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007eae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb4:	69f9      	ldr	r1, [r7, #28]
 8007eb6:	6938      	ldr	r0, [r7, #16]
 8007eb8:	f7ff fe4d 	bl	8007b56 <put_fat>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <create_chain+0xe2>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d006      	beq.n	8007eda <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6938      	ldr	r0, [r7, #16]
 8007ed2:	f7ff fe40 	bl	8007b56 <put_fat>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d116      	bne.n	8007f0e <create_chain+0x116>
		fs->last_clst = ncl;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	691a      	ldr	r2, [r3, #16]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	3b02      	subs	r3, #2
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d804      	bhi.n	8007efe <create_chain+0x106>
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	791b      	ldrb	r3, [r3, #4]
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	711a      	strb	r2, [r3, #4]
 8007f0c:	e007      	b.n	8007f1e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d102      	bne.n	8007f1a <create_chain+0x122>
 8007f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f18:	e000      	b.n	8007f1c <create_chain+0x124>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f1e:	69fb      	ldr	r3, [r7, #28]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	0a5b      	lsrs	r3, r3, #9
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	8952      	ldrh	r2, [r2, #10]
 8007f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	613a      	str	r2, [r7, #16]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <clmt_clust+0x3a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e010      	b.n	8007f84 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d307      	bcc.n	8007f7a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3304      	adds	r3, #4
 8007f76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f78:	e7e9      	b.n	8007f4e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007f7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4413      	add	r3, r2
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fa6:	d204      	bcs.n	8007fb2 <dir_sdi+0x22>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f003 031f 	and.w	r3, r3, #31
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e063      	b.n	800807e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <dir_sdi+0x46>
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d902      	bls.n	8007fd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10c      	bne.n	8007ff6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	8912      	ldrh	r2, [r2, #8]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d301      	bcc.n	8007fec <dir_sdi+0x5c>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e048      	b.n	800807e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	61da      	str	r2, [r3, #28]
 8007ff4:	e029      	b.n	800804a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	895b      	ldrh	r3, [r3, #10]
 8007ffa:	025b      	lsls	r3, r3, #9
 8007ffc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ffe:	e019      	b.n	8008034 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6979      	ldr	r1, [r7, #20]
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fcfe 	bl	8007a06 <get_fat>
 800800a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008012:	d101      	bne.n	8008018 <dir_sdi+0x88>
 8008014:	2301      	movs	r3, #1
 8008016:	e032      	b.n	800807e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d904      	bls.n	8008028 <dir_sdi+0x98>
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	429a      	cmp	r2, r3
 8008026:	d301      	bcc.n	800802c <dir_sdi+0x9c>
 8008028:	2302      	movs	r3, #2
 800802a:	e028      	b.n	800807e <dir_sdi+0xee>
			ofs -= csz;
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	429a      	cmp	r2, r3
 800803a:	d2e1      	bcs.n	8008000 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	6938      	ldr	r0, [r7, #16]
 8008040:	f7ff fcc2 	bl	80079c8 <clust2sect>
 8008044:	4602      	mov	r2, r0
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <dir_sdi+0xcc>
 8008058:	2302      	movs	r3, #2
 800805a:	e010      	b.n	800807e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	0a5b      	lsrs	r3, r3, #9
 8008064:	441a      	add	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	441a      	add	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	3320      	adds	r3, #32
 800809c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <dir_next+0x28>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ac:	d301      	bcc.n	80080b2 <dir_next+0x2c>
 80080ae:	2304      	movs	r3, #4
 80080b0:	e0aa      	b.n	8008208 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f040 8098 	bne.w	80081ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	8912      	ldrh	r2, [r2, #8]
 80080d8:	4293      	cmp	r3, r2
 80080da:	f0c0 8088 	bcc.w	80081ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	61da      	str	r2, [r3, #28]
 80080e4:	2304      	movs	r3, #4
 80080e6:	e08f      	b.n	8008208 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	0a5b      	lsrs	r3, r3, #9
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	8952      	ldrh	r2, [r2, #10]
 80080f0:	3a01      	subs	r2, #1
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d17a      	bne.n	80081ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7ff fc80 	bl	8007a06 <get_fat>
 8008106:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d801      	bhi.n	8008112 <dir_next+0x8c>
 800810e:	2302      	movs	r3, #2
 8008110:	e07a      	b.n	8008208 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008118:	d101      	bne.n	800811e <dir_next+0x98>
 800811a:	2301      	movs	r3, #1
 800811c:	e074      	b.n	8008208 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	429a      	cmp	r2, r3
 8008126:	d358      	bcc.n	80081da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	61da      	str	r2, [r3, #28]
 8008134:	2304      	movs	r3, #4
 8008136:	e067      	b.n	8008208 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7ff fe59 	bl	8007df8 <create_chain>
 8008146:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <dir_next+0xcc>
 800814e:	2307      	movs	r3, #7
 8008150:	e05a      	b.n	8008208 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <dir_next+0xd6>
 8008158:	2302      	movs	r3, #2
 800815a:	e055      	b.n	8008208 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008162:	d101      	bne.n	8008168 <dir_next+0xe2>
 8008164:	2301      	movs	r3, #1
 8008166:	e04f      	b.n	8008208 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fb4d 	bl	8007808 <sync_window>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <dir_next+0xf2>
 8008174:	2301      	movs	r3, #1
 8008176:	e047      	b.n	8008208 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3330      	adds	r3, #48	; 0x30
 800817c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff f977 	bl	8007476 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	6979      	ldr	r1, [r7, #20]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff fc1a 	bl	80079c8 <clust2sect>
 8008194:	4602      	mov	r2, r0
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	62da      	str	r2, [r3, #44]	; 0x2c
 800819a:	e012      	b.n	80081c2 <dir_next+0x13c>
						fs->wflag = 1;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff fb30 	bl	8007808 <sync_window>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <dir_next+0x12c>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e02a      	b.n	8008208 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	3301      	adds	r3, #1
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	895b      	ldrh	r3, [r3, #10]
 80081c6:	461a      	mov	r2, r3
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d3e6      	bcc.n	800819c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad2      	subs	r2, r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80081e0:	6979      	ldr	r1, [r7, #20]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff fbf0 	bl	80079c8 <clust2sect>
 80081e8:	4602      	mov	r2, r0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008200:	441a      	add	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008220:	2100      	movs	r1, #0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff feb4 	bl	8007f90 <dir_sdi>
 8008228:	4603      	mov	r3, r0
 800822a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d12b      	bne.n	800828a <dir_alloc+0x7a>
		n = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	4619      	mov	r1, r3
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fb27 	bl	8007890 <move_window>
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11d      	bne.n	8008288 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2be5      	cmp	r3, #229	; 0xe5
 8008254:	d004      	beq.n	8008260 <dir_alloc+0x50>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d107      	bne.n	8008270 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	3301      	adds	r3, #1
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d102      	bne.n	8008274 <dir_alloc+0x64>
 800826e:	e00c      	b.n	800828a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008270:	2300      	movs	r3, #0
 8008272:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008274:	2101      	movs	r1, #1
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff ff05 	bl	8008086 <dir_next>
 800827c:	4603      	mov	r3, r0
 800827e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0d7      	beq.n	8008236 <dir_alloc+0x26>
 8008286:	e000      	b.n	800828a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008288:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d101      	bne.n	8008294 <dir_alloc+0x84>
 8008290:	2307      	movs	r3, #7
 8008292:	75fb      	strb	r3, [r7, #23]
	return res;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	331a      	adds	r3, #26
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff f83f 	bl	8007330 <ld_word>
 80082b2:	4603      	mov	r3, r0
 80082b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d109      	bne.n	80082d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	3314      	adds	r3, #20
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff f834 	bl	8007330 <ld_word>
 80082c8:	4603      	mov	r3, r0
 80082ca:	041b      	lsls	r3, r3, #16
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80082d2:	68fb      	ldr	r3, [r7, #12]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	331a      	adds	r3, #26
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	b292      	uxth	r2, r2
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f857 	bl	80073a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d109      	bne.n	8008314 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f103 0214 	add.w	r2, r3, #20
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	b29b      	uxth	r3, r3
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7ff f849 	bl	80073a6 <st_word>
	}
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800832a:	2100      	movs	r1, #0
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fe2f 	bl	8007f90 <dir_sdi>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <dir_find+0x24>
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	e03e      	b.n	80083be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4619      	mov	r1, r3
 8008346:	6938      	ldr	r0, [r7, #16]
 8008348:	f7ff faa2 	bl	8007890 <move_window>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d12f      	bne.n	80083b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <dir_find+0x4e>
 8008364:	2304      	movs	r3, #4
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	e028      	b.n	80083bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	330b      	adds	r3, #11
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008376:	b2da      	uxtb	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	330b      	adds	r3, #11
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <dir_find+0x86>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a18      	ldr	r0, [r3, #32]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3324      	adds	r3, #36	; 0x24
 8008394:	220b      	movs	r2, #11
 8008396:	4619      	mov	r1, r3
 8008398:	f7ff f888 	bl	80074ac <mem_cmp>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80083a2:	2100      	movs	r1, #0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff fe6e 	bl	8008086 <dir_next>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0c5      	beq.n	8008340 <dir_find+0x24>
 80083b4:	e002      	b.n	80083bc <dir_find+0xa0>
		if (res != FR_OK) break;
 80083b6:	bf00      	nop
 80083b8:	e000      	b.n	80083bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80083ba:	bf00      	nop

	return res;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80083d4:	2101      	movs	r1, #1
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff ff1a 	bl	8008210 <dir_alloc>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d11c      	bne.n	8008420 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	4619      	mov	r1, r3
 80083ec:	68b8      	ldr	r0, [r7, #8]
 80083ee:	f7ff fa4f 	bl	8007890 <move_window>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d111      	bne.n	8008420 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	2220      	movs	r2, #32
 8008402:	2100      	movs	r1, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff f836 	bl	8007476 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a18      	ldr	r0, [r3, #32]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3324      	adds	r3, #36	; 0x24
 8008412:	220b      	movs	r2, #11
 8008414:	4619      	mov	r1, r3
 8008416:	f7ff f80d 	bl	8007434 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2201      	movs	r2, #1
 800841e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3324      	adds	r3, #36	; 0x24
 8008440:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008442:	220b      	movs	r2, #11
 8008444:	2120      	movs	r1, #32
 8008446:	68b8      	ldr	r0, [r7, #8]
 8008448:	f7ff f815 	bl	8007476 <mem_set>
	si = i = 0; ni = 8;
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	2308      	movs	r3, #8
 8008456:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	61fa      	str	r2, [r7, #28]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008466:	7efb      	ldrb	r3, [r7, #27]
 8008468:	2b20      	cmp	r3, #32
 800846a:	d94e      	bls.n	800850a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800846c:	7efb      	ldrb	r3, [r7, #27]
 800846e:	2b2f      	cmp	r3, #47	; 0x2f
 8008470:	d006      	beq.n	8008480 <create_name+0x54>
 8008472:	7efb      	ldrb	r3, [r7, #27]
 8008474:	2b5c      	cmp	r3, #92	; 0x5c
 8008476:	d110      	bne.n	800849a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008478:	e002      	b.n	8008480 <create_name+0x54>
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	3301      	adds	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b2f      	cmp	r3, #47	; 0x2f
 800848a:	d0f6      	beq.n	800847a <create_name+0x4e>
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b5c      	cmp	r3, #92	; 0x5c
 8008496:	d0f0      	beq.n	800847a <create_name+0x4e>
			break;
 8008498:	e038      	b.n	800850c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800849a:	7efb      	ldrb	r3, [r7, #27]
 800849c:	2b2e      	cmp	r3, #46	; 0x2e
 800849e:	d003      	beq.n	80084a8 <create_name+0x7c>
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d30c      	bcc.n	80084c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2b0b      	cmp	r3, #11
 80084ac:	d002      	beq.n	80084b4 <create_name+0x88>
 80084ae:	7efb      	ldrb	r3, [r7, #27]
 80084b0:	2b2e      	cmp	r3, #46	; 0x2e
 80084b2:	d001      	beq.n	80084b8 <create_name+0x8c>
 80084b4:	2306      	movs	r3, #6
 80084b6:	e044      	b.n	8008542 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80084b8:	2308      	movs	r3, #8
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	230b      	movs	r3, #11
 80084be:	617b      	str	r3, [r7, #20]
			continue;
 80084c0:	e022      	b.n	8008508 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80084c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da04      	bge.n	80084d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80084ca:	7efb      	ldrb	r3, [r7, #27]
 80084cc:	3b80      	subs	r3, #128	; 0x80
 80084ce:	4a1f      	ldr	r2, [pc, #124]	; (800854c <create_name+0x120>)
 80084d0:	5cd3      	ldrb	r3, [r2, r3]
 80084d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80084d4:	7efb      	ldrb	r3, [r7, #27]
 80084d6:	4619      	mov	r1, r3
 80084d8:	481d      	ldr	r0, [pc, #116]	; (8008550 <create_name+0x124>)
 80084da:	f7ff f80e 	bl	80074fa <chk_chr>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <create_name+0xbc>
 80084e4:	2306      	movs	r3, #6
 80084e6:	e02c      	b.n	8008542 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80084e8:	7efb      	ldrb	r3, [r7, #27]
 80084ea:	2b60      	cmp	r3, #96	; 0x60
 80084ec:	d905      	bls.n	80084fa <create_name+0xce>
 80084ee:	7efb      	ldrb	r3, [r7, #27]
 80084f0:	2b7a      	cmp	r3, #122	; 0x7a
 80084f2:	d802      	bhi.n	80084fa <create_name+0xce>
 80084f4:	7efb      	ldrb	r3, [r7, #27]
 80084f6:	3b20      	subs	r3, #32
 80084f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	613a      	str	r2, [r7, #16]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	4413      	add	r3, r2
 8008504:	7efa      	ldrb	r2, [r7, #27]
 8008506:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008508:	e7a6      	b.n	8008458 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800850a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	441a      	add	r2, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <create_name+0xf4>
 800851c:	2306      	movs	r3, #6
 800851e:	e010      	b.n	8008542 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2be5      	cmp	r3, #229	; 0xe5
 8008526:	d102      	bne.n	800852e <create_name+0x102>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2205      	movs	r2, #5
 800852c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800852e:	7efb      	ldrb	r3, [r7, #27]
 8008530:	2b20      	cmp	r3, #32
 8008532:	d801      	bhi.n	8008538 <create_name+0x10c>
 8008534:	2204      	movs	r2, #4
 8008536:	e000      	b.n	800853a <create_name+0x10e>
 8008538:	2200      	movs	r2, #0
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	330b      	adds	r3, #11
 800853e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008540:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008542:	4618      	mov	r0, r3
 8008544:	3720      	adds	r7, #32
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	0800974c 	.word	0x0800974c
 8008550:	0800961c 	.word	0x0800961c

08008554 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008568:	e002      	b.n	8008570 <follow_path+0x1c>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b2f      	cmp	r3, #47	; 0x2f
 8008576:	d0f8      	beq.n	800856a <follow_path+0x16>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b5c      	cmp	r3, #92	; 0x5c
 800857e:	d0f4      	beq.n	800856a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2200      	movs	r2, #0
 8008584:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b1f      	cmp	r3, #31
 800858c:	d80a      	bhi.n	80085a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2280      	movs	r2, #128	; 0x80
 8008592:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008596:	2100      	movs	r1, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff fcf9 	bl	8007f90 <dir_sdi>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
 80085a2:	e043      	b.n	800862c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085a4:	463b      	mov	r3, r7
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff ff3f 	bl	800842c <create_name>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d134      	bne.n	8008622 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff feaf 	bl	800831c <dir_find>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80085c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d127      	bne.n	8008626 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80085d6:	7afb      	ldrb	r3, [r7, #11]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d122      	bne.n	8008626 <follow_path+0xd2>
 80085e0:	2305      	movs	r3, #5
 80085e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80085e4:	e01f      	b.n	8008626 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d11c      	bne.n	800862a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	799b      	ldrb	r3, [r3, #6]
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d102      	bne.n	8008602 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80085fc:	2305      	movs	r3, #5
 80085fe:	75fb      	strb	r3, [r7, #23]
 8008600:	e014      	b.n	800862c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008610:	4413      	add	r3, r2
 8008612:	4619      	mov	r1, r3
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff fe42 	bl	800829e <ld_clust>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008620:	e7c0      	b.n	80085a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <follow_path+0xd8>
				break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800862a:	bf00      	nop
			}
		}
	}

	return res;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008636:	b480      	push	{r7}
 8008638:	b087      	sub	sp, #28
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008642:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d031      	beq.n	80086b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	e002      	b.n	800865a <get_ldnumber+0x24>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3301      	adds	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b20      	cmp	r3, #32
 8008660:	d903      	bls.n	800866a <get_ldnumber+0x34>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b3a      	cmp	r3, #58	; 0x3a
 8008668:	d1f4      	bne.n	8008654 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b3a      	cmp	r3, #58	; 0x3a
 8008670:	d11c      	bne.n	80086ac <get_ldnumber+0x76>
			tp = *path;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	60fa      	str	r2, [r7, #12]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	3b30      	subs	r3, #48	; 0x30
 8008682:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b09      	cmp	r3, #9
 8008688:	d80e      	bhi.n	80086a8 <get_ldnumber+0x72>
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	429a      	cmp	r2, r3
 8008690:	d10a      	bne.n	80086a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d107      	bne.n	80086a8 <get_ldnumber+0x72>
					vol = (int)i;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	3301      	adds	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	e002      	b.n	80086b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80086b0:	693b      	ldr	r3, [r7, #16]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	70da      	strb	r2, [r3, #3]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff f8d8 	bl	8007890 <move_window>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <check_fs+0x2a>
 80086e6:	2304      	movs	r3, #4
 80086e8:	e038      	b.n	800875c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3330      	adds	r3, #48	; 0x30
 80086ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fe1c 	bl	8007330 <ld_word>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008700:	429a      	cmp	r2, r3
 8008702:	d001      	beq.n	8008708 <check_fs+0x48>
 8008704:	2303      	movs	r3, #3
 8008706:	e029      	b.n	800875c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800870e:	2be9      	cmp	r3, #233	; 0xe9
 8008710:	d009      	beq.n	8008726 <check_fs+0x66>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008718:	2beb      	cmp	r3, #235	; 0xeb
 800871a:	d11e      	bne.n	800875a <check_fs+0x9a>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008722:	2b90      	cmp	r3, #144	; 0x90
 8008724:	d119      	bne.n	800875a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3330      	adds	r3, #48	; 0x30
 800872a:	3336      	adds	r3, #54	; 0x36
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fe17 	bl	8007360 <ld_dword>
 8008732:	4603      	mov	r3, r0
 8008734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008738:	4a0a      	ldr	r2, [pc, #40]	; (8008764 <check_fs+0xa4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d101      	bne.n	8008742 <check_fs+0x82>
 800873e:	2300      	movs	r3, #0
 8008740:	e00c      	b.n	800875c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3330      	adds	r3, #48	; 0x30
 8008746:	3352      	adds	r3, #82	; 0x52
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe fe09 	bl	8007360 <ld_dword>
 800874e:	4603      	mov	r3, r0
 8008750:	4a05      	ldr	r2, [pc, #20]	; (8008768 <check_fs+0xa8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d101      	bne.n	800875a <check_fs+0x9a>
 8008756:	2300      	movs	r3, #0
 8008758:	e000      	b.n	800875c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800875a:	2302      	movs	r3, #2
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	00544146 	.word	0x00544146
 8008768:	33544146 	.word	0x33544146

0800876c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b096      	sub	sp, #88	; 0x58
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;
	UINT i;

	/* Get logical drive number */
	*rfs = 0;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff ff58 	bl	8008636 <get_ldnumber>
 8008786:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	2b00      	cmp	r3, #0
 800878c:	da01      	bge.n	8008792 <find_volume+0x26>
 800878e:	230b      	movs	r3, #11
 8008790:	e237      	b.n	8008c02 <find_volume+0x496>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008792:	4aa6      	ldr	r2, [pc, #664]	; (8008a2c <find_volume+0x2c0>)
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <find_volume+0x3a>
 80087a2:	230c      	movs	r3, #12
 80087a4:	e22d      	b.n	8008c02 <find_volume+0x496>


	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087aa:	601a      	str	r2, [r3, #0]


	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01a      	beq.n	80087f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fd15 	bl	80071f0 <disk_status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10c      	bne.n	80087f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <find_volume+0x82>
 80087de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80087ea:	230a      	movs	r3, #10
 80087ec:	e209      	b.n	8008c02 <find_volume+0x496>
			}
			return FR_OK;				/* The file system object is valid */
 80087ee:	2300      	movs	r3, #0
 80087f0:	e207      	b.n	8008c02 <find_volume+0x496>


	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	705a      	strb	r2, [r3, #1]
	/* DISK TEST START */
	FRESULT fResult = disk_read(0, fs->win, 0, 1);
 8008800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008806:	2301      	movs	r3, #1
 8008808:	2200      	movs	r2, #0
 800880a:	2000      	movs	r0, #0
 800880c:	f7fe fd32 	bl	8007274 <disk_read>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	/* DISK TEST END */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fd02 	bl	8007224 <disk_initialize>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <find_volume+0xca>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008832:	2303      	movs	r3, #3
 8008834:	e1e5      	b.n	8008c02 <find_volume+0x496>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <find_volume+0xe0>
 800883c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <find_volume+0xe0>
		return FR_WRITE_PROTECTED;
 8008848:	230a      	movs	r3, #10
 800884a:	e1da      	b.n	8008c02 <find_volume+0x496>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	653b      	str	r3, [r7, #80]	; 0x50


	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008850:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008852:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008854:	f7ff ff34 	bl	80086c0 <check_fs>
 8008858:	4603      	mov	r3, r0
 800885a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800885e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008862:	2b02      	cmp	r3, #2
 8008864:	d149      	bne.n	80088fa <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008866:	2300      	movs	r3, #0
 8008868:	643b      	str	r3, [r7, #64]	; 0x40
 800886a:	e01e      	b.n	80088aa <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800887a:	4413      	add	r3, r2
 800887c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	3304      	adds	r3, #4
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <find_volume+0x12a>
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	3308      	adds	r3, #8
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fd67 	bl	8007360 <ld_dword>
 8008892:	4602      	mov	r2, r0
 8008894:	e000      	b.n	8008898 <find_volume+0x12c>
 8008896:	2200      	movs	r2, #0
 8008898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	3358      	adds	r3, #88	; 0x58
 800889e:	443b      	add	r3, r7
 80088a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80088a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a6:	3301      	adds	r3, #1
 80088a8:	643b      	str	r3, [r7, #64]	; 0x40
 80088aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d9dd      	bls.n	800886c <find_volume+0x100>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80088b0:	2300      	movs	r3, #0
 80088b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80088b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <find_volume+0x154>
 80088ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088bc:	3b01      	subs	r3, #1
 80088be:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80088c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	3358      	adds	r3, #88	; 0x58
 80088c6:	443b      	add	r3, r7
 80088c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088cc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80088ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <find_volume+0x174>
 80088d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088d8:	f7ff fef2 	bl	80086c0 <check_fs>
 80088dc:	4603      	mov	r3, r0
 80088de:	e000      	b.n	80088e2 <find_volume+0x176>
 80088e0:	2303      	movs	r3, #3
 80088e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80088e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d905      	bls.n	80088fa <find_volume+0x18e>
 80088ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f0:	3301      	adds	r3, #1
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
 80088f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d9e2      	bls.n	80088c0 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d101      	bne.n	8008906 <find_volume+0x19a>
 8008902:	2301      	movs	r3, #1
 8008904:	e17d      	b.n	8008c02 <find_volume+0x496>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800890a:	2b01      	cmp	r3, #1
 800890c:	d901      	bls.n	8008912 <find_volume+0x1a6>
 800890e:	230d      	movs	r3, #13
 8008910:	e177      	b.n	8008c02 <find_volume+0x496>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	3330      	adds	r3, #48	; 0x30
 8008916:	330b      	adds	r3, #11
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fd09 	bl	8007330 <ld_word>
 800891e:	4603      	mov	r3, r0
 8008920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008924:	d001      	beq.n	800892a <find_volume+0x1be>
 8008926:	230d      	movs	r3, #13
 8008928:	e16b      	b.n	8008c02 <find_volume+0x496>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	3330      	adds	r3, #48	; 0x30
 800892e:	3316      	adds	r3, #22
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fcfd 	bl	8007330 <ld_word>
 8008936:	4603      	mov	r3, r0
 8008938:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800893a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <find_volume+0x1e2>
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	3330      	adds	r3, #48	; 0x30
 8008944:	3324      	adds	r3, #36	; 0x24
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fd0a 	bl	8007360 <ld_dword>
 800894c:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008952:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	789b      	ldrb	r3, [r3, #2]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d005      	beq.n	8008972 <find_volume+0x206>
 8008966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008968:	789b      	ldrb	r3, [r3, #2]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d001      	beq.n	8008972 <find_volume+0x206>
 800896e:	230d      	movs	r3, #13
 8008970:	e147      	b.n	8008c02 <find_volume+0x496>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	789b      	ldrb	r3, [r3, #2]
 8008976:	461a      	mov	r2, r3
 8008978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008986:	b29a      	uxth	r2, r3
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	895b      	ldrh	r3, [r3, #10]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <find_volume+0x23a>
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	895b      	ldrh	r3, [r3, #10]
 8008998:	461a      	mov	r2, r3
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	895b      	ldrh	r3, [r3, #10]
 800899e:	3b01      	subs	r3, #1
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <find_volume+0x23e>
 80089a6:	230d      	movs	r3, #13
 80089a8:	e12b      	b.n	8008c02 <find_volume+0x496>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	3330      	adds	r3, #48	; 0x30
 80089ae:	3311      	adds	r3, #17
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fcbd 	bl	8007330 <ld_word>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	891b      	ldrh	r3, [r3, #8]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <find_volume+0x264>
 80089cc:	230d      	movs	r3, #13
 80089ce:	e118      	b.n	8008c02 <find_volume+0x496>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	3330      	adds	r3, #48	; 0x30
 80089d4:	3313      	adds	r3, #19
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fcaa 	bl	8007330 <ld_word>
 80089dc:	4603      	mov	r3, r0
 80089de:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80089e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <find_volume+0x288>
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	3320      	adds	r3, #32
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe fcb7 	bl	8007360 <ld_dword>
 80089f2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	3330      	adds	r3, #48	; 0x30
 80089f8:	330e      	adds	r3, #14
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fc98 	bl	8007330 <ld_word>
 8008a00:	4603      	mov	r3, r0
 8008a02:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008a04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <find_volume+0x2a2>
 8008a0a:	230d      	movs	r3, #13
 8008a0c:	e0f9      	b.n	8008c02 <find_volume+0x496>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a12:	4413      	add	r3, r2
 8008a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a16:	8912      	ldrh	r2, [r2, #8]
 8008a18:	0912      	lsrs	r2, r2, #4
 8008a1a:	b292      	uxth	r2, r2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d203      	bcs.n	8008a30 <find_volume+0x2c4>
 8008a28:	230d      	movs	r3, #13
 8008a2a:	e0ea      	b.n	8008c02 <find_volume+0x496>
 8008a2c:	200000b0 	.word	0x200000b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a38:	8952      	ldrh	r2, [r2, #10]
 8008a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <find_volume+0x2de>
 8008a46:	230d      	movs	r3, #13
 8008a48:	e0db      	b.n	8008c02 <find_volume+0x496>
		fmt = FS_FAT32;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d802      	bhi.n	8008a60 <find_volume+0x2f4>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d802      	bhi.n	8008a70 <find_volume+0x304>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	1c9a      	adds	r2, r3, #2
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a7c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a82:	441a      	add	r2, r3
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008a88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	441a      	add	r2, r3
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008a92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d11e      	bne.n	8008ad8 <find_volume+0x36c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	3330      	adds	r3, #48	; 0x30
 8008a9e:	332a      	adds	r3, #42	; 0x2a
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fc45 	bl	8007330 <ld_word>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <find_volume+0x344>
 8008aac:	230d      	movs	r3, #13
 8008aae:	e0a8      	b.n	8008c02 <find_volume+0x496>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	891b      	ldrh	r3, [r3, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <find_volume+0x350>
 8008ab8:	230d      	movs	r3, #13
 8008aba:	e0a2      	b.n	8008c02 <find_volume+0x496>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	3330      	adds	r3, #48	; 0x30
 8008ac0:	332c      	adds	r3, #44	; 0x2c
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fc4c 	bl	8007360 <ld_dword>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad6:	e01f      	b.n	8008b18 <find_volume+0x3ac>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	891b      	ldrh	r3, [r3, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <find_volume+0x378>
 8008ae0:	230d      	movs	r3, #13
 8008ae2:	e08e      	b.n	8008c02 <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	6a1a      	ldr	r2, [r3, #32]
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aea:	441a      	add	r2, r3
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d103      	bne.n	8008b00 <find_volume+0x394>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	e00a      	b.n	8008b16 <find_volume+0x3aa>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	4613      	mov	r3, r2
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	4413      	add	r3, r2
 8008b0a:	085a      	lsrs	r2, r3, #1
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008b16:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	699a      	ldr	r2, [r3, #24]
 8008b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008b22:	0a5b      	lsrs	r3, r3, #9
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d201      	bcs.n	8008b2c <find_volume+0x3c0>
 8008b28:	230d      	movs	r3, #13
 8008b2a:	e06a      	b.n	8008c02 <find_volume+0x496>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b32:	611a      	str	r2, [r3, #16]
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	2280      	movs	r2, #128	; 0x80
 8008b40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008b42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d149      	bne.n	8008bde <find_volume+0x472>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	3330      	adds	r3, #48	; 0x30
 8008b4e:	3330      	adds	r3, #48	; 0x30
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fbed 	bl	8007330 <ld_word>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d140      	bne.n	8008bde <find_volume+0x472>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b5e:	3301      	adds	r3, #1
 8008b60:	4619      	mov	r1, r3
 8008b62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b64:	f7fe fe94 	bl	8007890 <move_window>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d137      	bne.n	8008bde <find_volume+0x472>
		{
			fs->fsi_flag = 0;
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	2200      	movs	r2, #0
 8008b72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	3330      	adds	r3, #48	; 0x30
 8008b78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fbd7 	bl	8007330 <ld_word>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d127      	bne.n	8008bde <find_volume+0x472>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	3330      	adds	r3, #48	; 0x30
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fbe4 	bl	8007360 <ld_dword>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4a1c      	ldr	r2, [pc, #112]	; (8008c0c <find_volume+0x4a0>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d11e      	bne.n	8008bde <find_volume+0x472>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	3330      	adds	r3, #48	; 0x30
 8008ba4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fbd9 	bl	8007360 <ld_dword>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4a17      	ldr	r2, [pc, #92]	; (8008c10 <find_volume+0x4a4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d113      	bne.n	8008bde <find_volume+0x472>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	3330      	adds	r3, #48	; 0x30
 8008bba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe fbce 	bl	8007360 <ld_dword>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	3330      	adds	r3, #48	; 0x30
 8008bce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fbc4 	bl	8007360 <ld_dword>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008be4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <find_volume+0x4a8>)
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <find_volume+0x4a8>)
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <find_volume+0x4a8>)
 8008bf4:	881a      	ldrh	r2, [r3, #0]
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008bfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bfc:	f7fe fde0 	bl	80077c0 <clear_lock>
#endif
	return FR_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3758      	adds	r7, #88	; 0x58
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	41615252 	.word	0x41615252
 8008c10:	61417272 	.word	0x61417272
 8008c14:	200000b4 	.word	0x200000b4

08008c18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008c22:	2309      	movs	r3, #9
 8008c24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01c      	beq.n	8008c66 <validate+0x4e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d018      	beq.n	8008c66 <validate+0x4e>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d013      	beq.n	8008c66 <validate+0x4e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	889a      	ldrh	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	88db      	ldrh	r3, [r3, #6]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d10c      	bne.n	8008c66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe facc 	bl	80071f0 <disk_status>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <validate+0x4e>
			res = FR_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <validate+0x5a>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	e000      	b.n	8008c74 <validate+0x5c>
 8008c72:	2300      	movs	r3, #0
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	6013      	str	r3, [r2, #0]
	return res;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c96:	f107 0310 	add.w	r3, r7, #16
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fccb 	bl	8008636 <get_ldnumber>
 8008ca0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da01      	bge.n	8008cac <f_mount+0x28>
 8008ca8:	230b      	movs	r3, #11
 8008caa:	e02b      	b.n	8008d04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008cac:	4a17      	ldr	r2, [pc, #92]	; (8008d0c <f_mount+0x88>)
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008cbc:	69b8      	ldr	r0, [r7, #24]
 8008cbe:	f7fe fd7f 	bl	80077c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	490d      	ldr	r1, [pc, #52]	; (8008d0c <f_mount+0x88>)
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <f_mount+0x66>
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d001      	beq.n	8008cee <f_mount+0x6a>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e00a      	b.n	8008d04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008cee:	f107 010c 	add.w	r1, r7, #12
 8008cf2:	f107 0308 	add.w	r3, r7, #8
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fd37 	bl	800876c <find_volume>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	200000b0 	.word	0x200000b0

08008d10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b098      	sub	sp, #96	; 0x60
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <f_open+0x18>
 8008d24:	2309      	movs	r3, #9
 8008d26:	e1ac      	b.n	8009082 <f_open+0x372>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008d30:	79fa      	ldrb	r2, [r7, #7]
 8008d32:	f107 0110 	add.w	r1, r7, #16
 8008d36:	f107 0308 	add.w	r3, r7, #8
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fd16 	bl	800876c <find_volume>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f040 8190 	bne.w	8009070 <f_open+0x360>
		dj.obj.fs = fs;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	f107 0314 	add.w	r3, r7, #20
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fbf9 	bl	8008554 <follow_path>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d11a      	bne.n	8008da6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da03      	bge.n	8008d82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008d7a:	2306      	movs	r3, #6
 8008d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d80:	e011      	b.n	8008da6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf14      	ite	ne
 8008d8c:	2301      	movne	r3, #1
 8008d8e:	2300      	moveq	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	f107 0314 	add.w	r3, r7, #20
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fbc8 	bl	8007530 <chk_lock>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	f003 031c 	and.w	r3, r3, #28
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d07e      	beq.n	8008eae <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8008db0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d017      	beq.n	8008de8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d10e      	bne.n	8008dde <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008dc0:	f7fe fc12 	bl	80075e8 <enq_lock>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d006      	beq.n	8008dd8 <f_open+0xc8>
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff faf9 	bl	80083c6 <dir_register>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	e000      	b.n	8008dda <f_open+0xca>
 8008dd8:	2312      	movs	r3, #18
 8008dda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	f043 0308 	orr.w	r3, r3, #8
 8008de4:	71fb      	strb	r3, [r7, #7]
 8008de6:	e010      	b.n	8008e0a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008de8:	7ebb      	ldrb	r3, [r7, #26]
 8008dea:	f003 0311 	and.w	r3, r3, #17
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <f_open+0xea>
					res = FR_DENIED;
 8008df2:	2307      	movs	r3, #7
 8008df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008df8:	e007      	b.n	8008e0a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <f_open+0xfa>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d167      	bne.n	8008ee2 <f_open+0x1d2>
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d062      	beq.n	8008ee2 <f_open+0x1d2>
				dw = GET_FATTIME();
 8008e1c:	4b9b      	ldr	r3, [pc, #620]	; (800908c <f_open+0x37c>)
 8008e1e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e22:	330e      	adds	r3, #14
 8008e24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fad8 	bl	80073dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	3316      	adds	r3, #22
 8008e30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fad2 	bl	80073dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3a:	330b      	adds	r3, #11
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff fa29 	bl	800829e <ld_clust>
 8008e4c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e52:	2200      	movs	r2, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fa41 	bl	80082dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5c:	331c      	adds	r3, #28
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fabb 	bl	80073dc <st_dword>
					fs->wflag = 1;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d037      	beq.n	8008ee2 <f_open+0x1d2>
						dw = fs->winsect;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008e78:	f107 0314 	add.w	r3, r7, #20
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe ff54 	bl	8007d2e <remove_chain>
 8008e86:	4603      	mov	r3, r0
 8008e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d126      	bne.n	8008ee2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fcf9 	bl	8007890 <move_window>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ea8:	3a01      	subs	r2, #1
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	e019      	b.n	8008ee2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d115      	bne.n	8008ee2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008eb6:	7ebb      	ldrb	r3, [r7, #26]
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <f_open+0x1b8>
					res = FR_NO_FILE;
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ec6:	e00c      	b.n	8008ee2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <f_open+0x1d2>
 8008ed2:	7ebb      	ldrb	r3, [r7, #26]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <f_open+0x1d2>
						res = FR_DENIED;
 8008edc:	2307      	movs	r3, #7
 8008ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d128      	bne.n	8008f3c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	f003 0308 	and.w	r3, r3, #8
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	f023 0301 	bic.w	r3, r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bf14      	ite	ne
 8008f14:	2301      	movne	r3, #1
 8008f16:	2300      	moveq	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fb82 	bl	800762c <inc_lock>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <f_open+0x22c>
 8008f36:	2302      	movs	r3, #2
 8008f38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 8095 	bne.w	8009070 <f_open+0x360>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff f9a6 	bl	800829e <ld_clust>
 8008f52:	4602      	mov	r2, r0
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	331c      	adds	r3, #28
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe f9ff 	bl	8007360 <ld_dword>
 8008f62:	4602      	mov	r2, r0
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	88da      	ldrh	r2, [r3, #6]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	79fa      	ldrb	r2, [r7, #7]
 8008f80:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3330      	adds	r3, #48	; 0x30
 8008f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fa69 	bl	8007476 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	f003 0320 	and.w	r3, r3, #32
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d060      	beq.n	8009070 <f_open+0x360>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d05c      	beq.n	8009070 <f_open+0x360>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	895b      	ldrh	r3, [r3, #10]
 8008fc2:	025b      	lsls	r3, r3, #9
 8008fc4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8008fd2:	e016      	b.n	8009002 <f_open+0x2f2>
					clst = get_fat(&fp->obj, clst);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fd14 	bl	8007a06 <get_fat>
 8008fde:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d802      	bhi.n	8008fec <f_open+0x2dc>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ff2:	d102      	bne.n	8008ffa <f_open+0x2ea>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ffa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	657b      	str	r3, [r7, #84]	; 0x54
 8009002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <f_open+0x302>
 800900a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800900c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900e:	429a      	cmp	r2, r3
 8009010:	d8e0      	bhi.n	8008fd4 <f_open+0x2c4>
				}
				fp->clust = clst;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009016:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800901c:	2b00      	cmp	r3, #0
 800901e:	d127      	bne.n	8009070 <f_open+0x360>
 8009020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009026:	2b00      	cmp	r3, #0
 8009028:	d022      	beq.n	8009070 <f_open+0x360>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fcca 	bl	80079c8 <clust2sect>
 8009034:	6478      	str	r0, [r7, #68]	; 0x44
 8009036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <f_open+0x334>
						res = FR_INT_ERR;
 800903c:	2302      	movs	r3, #2
 800903e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009042:	e015      	b.n	8009070 <f_open+0x360>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009046:	0a5a      	lsrs	r2, r3, #9
 8009048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904a:	441a      	add	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	7858      	ldrb	r0, [r3, #1]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	2301      	movs	r3, #1
 8009060:	f7fe f908 	bl	8007274 <disk_read>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <f_open+0x360>
 800906a:	2301      	movs	r3, #1
 800906c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <f_open+0x36e>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800907e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009082:	4618      	mov	r0, r3
 8009084:	3760      	adds	r7, #96	; 0x60
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	48210000 	.word	0x48210000

08009090 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08c      	sub	sp, #48	; 0x30
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f107 0210 	add.w	r2, r7, #16
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fdb1 	bl	8008c18 <validate>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80090bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d107      	bne.n	80090d4 <f_write+0x44>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	7d5b      	ldrb	r3, [r3, #21]
 80090c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80090cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <f_write+0x4a>
 80090d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090d8:	e14b      	b.n	8009372 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	7d1b      	ldrb	r3, [r3, #20]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <f_write+0x5a>
 80090e6:	2307      	movs	r3, #7
 80090e8:	e143      	b.n	8009372 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	f080 812d 	bcs.w	8009356 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	43db      	mvns	r3, r3
 8009102:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009104:	e127      	b.n	8009356 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910e:	2b00      	cmp	r3, #0
 8009110:	f040 80e3 	bne.w	80092da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	0a5b      	lsrs	r3, r3, #9
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	8952      	ldrh	r2, [r2, #10]
 800911e:	3a01      	subs	r2, #1
 8009120:	4013      	ands	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d143      	bne.n	80091b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10c      	bne.n	800914c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	2b00      	cmp	r3, #0
 800913c:	d11a      	bne.n	8009174 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fe58 	bl	8007df8 <create_chain>
 8009148:	62b8      	str	r0, [r7, #40]	; 0x28
 800914a:	e013      	b.n	8009174 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d007      	beq.n	8009164 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	4619      	mov	r1, r3
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7fe fee4 	bl	8007f28 <clmt_clust>
 8009160:	62b8      	str	r0, [r7, #40]	; 0x28
 8009162:	e007      	b.n	8009174 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7fe fe43 	bl	8007df8 <create_chain>
 8009172:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 80f2 	beq.w	8009360 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	2b01      	cmp	r3, #1
 8009180:	d104      	bne.n	800918c <f_write+0xfc>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2202      	movs	r2, #2
 8009186:	755a      	strb	r2, [r3, #21]
 8009188:	2302      	movs	r3, #2
 800918a:	e0f2      	b.n	8009372 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009192:	d104      	bne.n	800919e <f_write+0x10e>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	755a      	strb	r2, [r3, #21]
 800919a:	2301      	movs	r3, #1
 800919c:	e0e9      	b.n	8009372 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d102      	bne.n	80091b2 <f_write+0x122>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	7d1b      	ldrb	r3, [r3, #20]
 80091b6:	b25b      	sxtb	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da18      	bge.n	80091ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	7858      	ldrb	r0, [r3, #1]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	2301      	movs	r3, #1
 80091cc:	f7fe f872 	bl	80072b4 <disk_write>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <f_write+0x150>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	755a      	strb	r2, [r3, #21]
 80091dc:	2301      	movs	r3, #1
 80091de:	e0c8      	b.n	8009372 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	7d1b      	ldrb	r3, [r3, #20]
 80091e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fe fbe6 	bl	80079c8 <clust2sect>
 80091fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <f_write+0x17e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2202      	movs	r2, #2
 8009208:	755a      	strb	r2, [r3, #21]
 800920a:	2302      	movs	r3, #2
 800920c:	e0b1      	b.n	8009372 <f_write+0x2e2>
			sect += csect;
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	4413      	add	r3, r2
 8009214:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	0a5b      	lsrs	r3, r3, #9
 800921a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d03c      	beq.n	800929c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	4413      	add	r3, r2
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	8952      	ldrh	r2, [r2, #10]
 800922c:	4293      	cmp	r3, r2
 800922e:	d905      	bls.n	800923c <f_write+0x1ac>
					cc = fs->csize - csect;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	895b      	ldrh	r3, [r3, #10]
 8009234:	461a      	mov	r2, r3
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	7858      	ldrb	r0, [r3, #1]
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	69f9      	ldr	r1, [r7, #28]
 8009246:	f7fe f835 	bl	80072b4 <disk_write>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <f_write+0x1ca>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	755a      	strb	r2, [r3, #21]
 8009256:	2301      	movs	r3, #1
 8009258:	e08b      	b.n	8009372 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1a      	ldr	r2, [r3, #32]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	6a3a      	ldr	r2, [r7, #32]
 8009264:	429a      	cmp	r2, r3
 8009266:	d915      	bls.n	8009294 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a1a      	ldr	r2, [r3, #32]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	025b      	lsls	r3, r3, #9
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	4413      	add	r3, r2
 800927c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009280:	4619      	mov	r1, r3
 8009282:	f7fe f8d7 	bl	8007434 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	7d1b      	ldrb	r3, [r3, #20]
 800928a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928e:	b2da      	uxtb	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	025b      	lsls	r3, r3, #9
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800929a:	e03f      	b.n	800931c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d016      	beq.n	80092d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	699a      	ldr	r2, [r3, #24]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d210      	bcs.n	80092d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	7858      	ldrb	r0, [r3, #1]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092bc:	2301      	movs	r3, #1
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	f7fd ffd8 	bl	8007274 <disk_read>
 80092c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2201      	movs	r2, #1
 80092ce:	755a      	strb	r2, [r3, #21]
 80092d0:	2301      	movs	r3, #1
 80092d2:	e04e      	b.n	8009372 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80092e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d901      	bls.n	80092f4 <f_write+0x264>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	4413      	add	r3, r2
 8009304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009306:	69f9      	ldr	r1, [r7, #28]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe f893 	bl	8007434 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	7d1b      	ldrb	r3, [r3, #20]
 8009312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009316:	b2da      	uxtb	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800931c:	69fa      	ldr	r2, [r7, #28]
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	4413      	add	r3, r2
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	441a      	add	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	619a      	str	r2, [r3, #24]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	429a      	cmp	r2, r3
 800933a:	bf38      	it	cc
 800933c:	461a      	movcc	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	60da      	str	r2, [r3, #12]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	441a      	add	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f47f aed4 	bne.w	8009106 <f_write+0x76>
 800935e:	e000      	b.n	8009362 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009360:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	7d1b      	ldrb	r3, [r3, #20]
 8009366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936a:	b2da      	uxtb	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3730      	adds	r7, #48	; 0x30
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f107 0208 	add.w	r2, r7, #8
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fc43 	bl	8008c18 <validate>
 8009392:	4603      	mov	r3, r0
 8009394:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d167      	bne.n	800946c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7d1b      	ldrb	r3, [r3, #20]
 80093a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d061      	beq.n	800946c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7d1b      	ldrb	r3, [r3, #20]
 80093ac:	b25b      	sxtb	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da15      	bge.n	80093de <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	7858      	ldrb	r0, [r3, #1]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a1a      	ldr	r2, [r3, #32]
 80093c0:	2301      	movs	r3, #1
 80093c2:	f7fd ff77 	bl	80072b4 <disk_write>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <f_sync+0x54>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e04e      	b.n	800946e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7d1b      	ldrb	r3, [r3, #20]
 80093d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80093de:	4b26      	ldr	r3, [pc, #152]	; (8009478 <f_sync+0xfc>)
 80093e0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fe fa50 	bl	8007890 <move_window>
 80093f0:	4603      	mov	r3, r0
 80093f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d138      	bne.n	800946c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	330b      	adds	r3, #11
 8009404:	781a      	ldrb	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	330b      	adds	r3, #11
 800940a:	f042 0220 	orr.w	r2, r2, #32
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	461a      	mov	r2, r3
 800941c:	68f9      	ldr	r1, [r7, #12]
 800941e:	f7fe ff5d 	bl	80082dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f103 021c 	add.w	r2, r3, #28
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7fd ffd4 	bl	80073dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3316      	adds	r3, #22
 8009438:	6939      	ldr	r1, [r7, #16]
 800943a:	4618      	mov	r0, r3
 800943c:	f7fd ffce 	bl	80073dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3312      	adds	r3, #18
 8009444:	2100      	movs	r1, #0
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd ffad 	bl	80073a6 <st_word>
					fs->wflag = 1;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2201      	movs	r2, #1
 8009450:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe fa49 	bl	80078ec <sync_fs>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7d1b      	ldrb	r3, [r3, #20]
 8009462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009466:	b2da      	uxtb	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800946c:	7dfb      	ldrb	r3, [r7, #23]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	48210000 	.word	0x48210000

0800947c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff ff79 	bl	800937c <f_sync>
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d118      	bne.n	80094c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f107 0208 	add.w	r2, r7, #8
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff fbbb 	bl	8008c18 <validate>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10c      	bne.n	80094c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe f949 	bl	8007748 <dec_lock>
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	4613      	mov	r3, r2
 80094dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80094e6:	4b1f      	ldr	r3, [pc, #124]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 80094e8:	7a5b      	ldrb	r3, [r3, #9]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d131      	bne.n	8009554 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094f0:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 80094f2:	7a5b      	ldrb	r3, [r3, #9]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 80094fa:	2100      	movs	r1, #0
 80094fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80094fe:	4b19      	ldr	r3, [pc, #100]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 8009500:	7a5b      	ldrb	r3, [r3, #9]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	4a17      	ldr	r2, [pc, #92]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800950e:	4b15      	ldr	r3, [pc, #84]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 8009510:	7a5b      	ldrb	r3, [r3, #9]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	4b13      	ldr	r3, [pc, #76]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 8009518:	4413      	add	r3, r2
 800951a:	79fa      	ldrb	r2, [r7, #7]
 800951c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800951e:	4b11      	ldr	r3, [pc, #68]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 8009520:	7a5b      	ldrb	r3, [r3, #9]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	b2d1      	uxtb	r1, r2
 8009528:	4a0e      	ldr	r2, [pc, #56]	; (8009564 <FATFS_LinkDriverEx+0x94>)
 800952a:	7251      	strb	r1, [r2, #9]
 800952c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800952e:	7dbb      	ldrb	r3, [r7, #22]
 8009530:	3330      	adds	r3, #48	; 0x30
 8009532:	b2da      	uxtb	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	3301      	adds	r3, #1
 800953c:	223a      	movs	r2, #58	; 0x3a
 800953e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	3302      	adds	r3, #2
 8009544:	222f      	movs	r2, #47	; 0x2f
 8009546:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	3303      	adds	r3, #3
 800954c:	2200      	movs	r2, #0
 800954e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
}
 8009556:	4618      	mov	r0, r3
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	200000d8 	.word	0x200000d8

08009568 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009572:	2200      	movs	r2, #0
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff ffaa 	bl	80094d0 <FATFS_LinkDriverEx>
 800957c:	4603      	mov	r3, r0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <__libc_init_array>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4d0d      	ldr	r5, [pc, #52]	; (80095c0 <__libc_init_array+0x38>)
 800958c:	2600      	movs	r6, #0
 800958e:	4c0d      	ldr	r4, [pc, #52]	; (80095c4 <__libc_init_array+0x3c>)
 8009590:	1b64      	subs	r4, r4, r5
 8009592:	10a4      	asrs	r4, r4, #2
 8009594:	42a6      	cmp	r6, r4
 8009596:	d109      	bne.n	80095ac <__libc_init_array+0x24>
 8009598:	4d0b      	ldr	r5, [pc, #44]	; (80095c8 <__libc_init_array+0x40>)
 800959a:	2600      	movs	r6, #0
 800959c:	4c0b      	ldr	r4, [pc, #44]	; (80095cc <__libc_init_array+0x44>)
 800959e:	f000 f81f 	bl	80095e0 <_init>
 80095a2:	1b64      	subs	r4, r4, r5
 80095a4:	10a4      	asrs	r4, r4, #2
 80095a6:	42a6      	cmp	r6, r4
 80095a8:	d105      	bne.n	80095b6 <__libc_init_array+0x2e>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b0:	3601      	adds	r6, #1
 80095b2:	4798      	blx	r3
 80095b4:	e7ee      	b.n	8009594 <__libc_init_array+0xc>
 80095b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ba:	3601      	adds	r6, #1
 80095bc:	4798      	blx	r3
 80095be:	e7f2      	b.n	80095a6 <__libc_init_array+0x1e>
 80095c0:	080097cc 	.word	0x080097cc
 80095c4:	080097cc 	.word	0x080097cc
 80095c8:	080097cc 	.word	0x080097cc
 80095cc:	080097d0 	.word	0x080097d0

080095d0 <memset>:
 80095d0:	4402      	add	r2, r0
 80095d2:	4603      	mov	r3, r0
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d100      	bne.n	80095da <memset+0xa>
 80095d8:	4770      	bx	lr
 80095da:	f803 1b01 	strb.w	r1, [r3], #1
 80095de:	e7f9      	b.n	80095d4 <memset+0x4>

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
